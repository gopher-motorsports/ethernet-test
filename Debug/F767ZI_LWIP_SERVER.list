
F767ZI_LWIP_SERVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011280  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fc8  08011480  08011480  00021480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014448  08014448  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08014448  08014448  00024448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014450  08014450  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014450  08014450  00024450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014454  08014454  00024454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08014458  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000070f8  20000078  080144d0  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007170  080144d0  00037170  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030719  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005d07  00000000  00000000  000607bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001788  00000000  00000000  000664c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001660  00000000  00000000  00067c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034ad4  00000000  00000000  000692b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021554  00000000  00000000  0009dd84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010d750  00000000  00000000  000bf2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cca28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a0  00000000  00000000  001ccaa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08011468 	.word	0x08011468

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08011468 	.word	0x08011468

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fb85 	bl	8000d22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f80e 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f900 	bl	8000820 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000620:	f000 f8a0 	bl	8000764 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000624:	f000 f8ce 	bl	80007c4 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000628:	f004 f928 	bl	800487c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  // initialize the HTTPd
  httpd_init();
 800062c:	f005 fbea 	bl	8005e04 <httpd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // start the LWIP process
    MX_LWIP_Process();
 8000630:	f004 fa56 	bl	8004ae0 <MX_LWIP_Process>
 8000634:	e7fc      	b.n	8000630 <main+0x20>
	...

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b0b8      	sub	sp, #224	; 0xe0
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000642:	2234      	movs	r2, #52	; 0x34
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f00f ffc6 	bl	80105d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2290      	movs	r2, #144	; 0x90
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f00f ffb7 	bl	80105d8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800066a:	f002 f8d1 	bl	8002810 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <SystemClock_Config+0x120>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	4a39      	ldr	r2, [pc, #228]	; (8000758 <SystemClock_Config+0x120>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <SystemClock_Config+0x120>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000686:	4b35      	ldr	r3, [pc, #212]	; (800075c <SystemClock_Config+0x124>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800068e:	4a33      	ldr	r2, [pc, #204]	; (800075c <SystemClock_Config+0x124>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000694:	6013      	str	r3, [r2, #0]
 8000696:	4b31      	ldr	r3, [pc, #196]	; (800075c <SystemClock_Config+0x124>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a2:	2301      	movs	r3, #1
 80006a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006be:	2304      	movs	r3, #4
 80006c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006c4:	2360      	movs	r3, #96	; 0x60
 80006c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 f8f8 	bl	80028d0 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006e6:	f000 f93d 	bl	8000964 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ea:	f002 f8a1 	bl	8002830 <HAL_PWREx_EnableOverDrive>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f4:	f000 f936 	bl	8000964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000718:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800071c:	2103      	movs	r1, #3
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fb84 	bl	8002e2c <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800072a:	f000 f91b 	bl	8000964 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <SystemClock_Config+0x128>)
 8000730:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000732:	2300      	movs	r3, #0
 8000734:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000736:	2300      	movs	r3, #0
 8000738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fd6b 	bl	800321c <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x118>
  {
    Error_Handler();
 800074c:	f000 f90a 	bl	8000964 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	37e0      	adds	r7, #224	; 0xe0
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000
 8000760:	00200100 	.word	0x00200100

08000764 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_USART3_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART3_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART3_UART_Init+0x58>)
 80007a8:	f003 f95e 	bl	8003a68 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 f8d7 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000650 	.word	0x20000650
 80007c0:	40004800 	.word	0x40004800

080007c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2206      	movs	r2, #6
 80007d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	2202      	movs	r2, #2
 80007da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000808:	f001 feb9 	bl	800257e <HAL_PCD_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f8a7 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200006d0 	.word	0x200006d0

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b46      	ldr	r3, [pc, #280]	; (8000950 <MX_GPIO_Init+0x130>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a45      	ldr	r2, [pc, #276]	; (8000950 <MX_GPIO_Init+0x130>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b43      	ldr	r3, [pc, #268]	; (8000950 <MX_GPIO_Init+0x130>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	4b40      	ldr	r3, [pc, #256]	; (8000950 <MX_GPIO_Init+0x130>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a3f      	ldr	r2, [pc, #252]	; (8000950 <MX_GPIO_Init+0x130>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <MX_GPIO_Init+0x130>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b3a      	ldr	r3, [pc, #232]	; (8000950 <MX_GPIO_Init+0x130>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a39      	ldr	r2, [pc, #228]	; (8000950 <MX_GPIO_Init+0x130>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b37      	ldr	r3, [pc, #220]	; (8000950 <MX_GPIO_Init+0x130>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <MX_GPIO_Init+0x130>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a33      	ldr	r2, [pc, #204]	; (8000950 <MX_GPIO_Init+0x130>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <MX_GPIO_Init+0x130>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <MX_GPIO_Init+0x130>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a2d      	ldr	r2, [pc, #180]	; (8000950 <MX_GPIO_Init+0x130>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_GPIO_Init+0x130>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_GPIO_Init+0x130>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a27      	ldr	r2, [pc, #156]	; (8000950 <MX_GPIO_Init+0x130>)
 80008b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_GPIO_Init+0x130>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008cc:	4821      	ldr	r0, [pc, #132]	; (8000954 <MX_GPIO_Init+0x134>)
 80008ce:	f001 fe3d 	bl	800254c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	4820      	ldr	r0, [pc, #128]	; (8000958 <MX_GPIO_Init+0x138>)
 80008d8:	f001 fe38 	bl	800254c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_GPIO_Init+0x13c>)
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	481b      	ldr	r0, [pc, #108]	; (8000960 <MX_GPIO_Init+0x140>)
 80008f2:	f001 fc81 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008f6:	f244 0381 	movw	r3, #16513	; 0x4081
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <MX_GPIO_Init+0x134>)
 8000910:	f001 fc72 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000914:	2340      	movs	r3, #64	; 0x40
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <MX_GPIO_Init+0x138>)
 800092c:	f001 fc64 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_GPIO_Init+0x138>)
 8000944:	f001 fc58 	bl	80021f8 <HAL_GPIO_Init>

}
 8000948:	bf00      	nop
 800094a:	3730      	adds	r7, #48	; 0x30
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400
 8000958:	40021800 	.word	0x40021800
 800095c:	10110000 	.word	0x10110000
 8000960:	40020800 	.word	0x40020800

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <HAL_UART_MspInit+0x7c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d128      	bne.n	8000a30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <HAL_UART_MspInit+0x80>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <HAL_UART_MspInit+0x80>)
 80009e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_UART_MspInit+0x80>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_UART_MspInit+0x80>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <HAL_UART_MspInit+0x80>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_UART_MspInit+0x80>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a20:	2307      	movs	r3, #7
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <HAL_UART_MspInit+0x84>)
 8000a2c:	f001 fbe4 	bl	80021f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40004800 	.word	0x40004800
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020c00 	.word	0x40020c00

08000a44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a64:	d141      	bne.n	8000aea <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a22      	ldr	r2, [pc, #136]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a7e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a90:	230a      	movs	r3, #10
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4817      	ldr	r0, [pc, #92]	; (8000af8 <HAL_PCD_MspInit+0xb4>)
 8000a9c:	f001 fbac 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <HAL_PCD_MspInit+0xb4>)
 8000ab6:	f001 fb9f 	bl	80021f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000abe:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 f924 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e00a      	b.n	8000b80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b6a:	f3af 8000 	nop.w
 8000b6e:	4601      	mov	r1, r0
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	b2ca      	uxtb	r2, r1
 8000b78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf0      	blt.n	8000b6a <_read+0x12>
	}

return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e009      	b.n	8000bb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	60ba      	str	r2, [r7, #8]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	dbf1      	blt.n	8000ba4 <_write+0x12>
	}
	return len;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_close>:

int _close(int file)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	return -1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf2:	605a      	str	r2, [r3, #4]
	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_isatty>:

int _isatty(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
	return 1;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
	return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <_sbrk+0x5c>)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <_sbrk+0x60>)
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <_sbrk+0x64>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <_sbrk+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d205      	bcs.n	8000c70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <_sbrk+0x6c>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	371c      	adds	r7, #28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	20080000 	.word	0x20080000
 8000c94:	00000400 	.word	0x00000400
 8000c98:	20000094 	.word	0x20000094
 8000c9c:	20007170 	.word	0x20007170
 8000ca0:	2000716c 	.word	0x2000716c

08000ca4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <SystemInit+0x28>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <SystemInit+0x28>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SystemInit+0x28>)
 8000cba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cbe:	609a      	str	r2, [r3, #8]
#endif
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cd6:	e003      	b.n	8000ce0 <LoopCopyDataInit>

08000cd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cde:	3104      	adds	r1, #4

08000ce0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ce4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ce6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ce8:	d3f6      	bcc.n	8000cd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cec:	e002      	b.n	8000cf4 <LoopFillZerobss>

08000cee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cf0:	f842 3b04 	str.w	r3, [r2], #4

08000cf4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cf8:	d3f9      	bcc.n	8000cee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cfa:	f7ff ffd3 	bl	8000ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f00f fc2d 	bl	801055c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fc85 	bl	8000610 <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000d0c:	08014458 	.word	0x08014458
  ldr  r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d14:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000d18:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000d1c:	20007170 	.word	0x20007170

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>

08000d22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d26:	2003      	movs	r0, #3
 8000d28:	f000 f92c 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 f805 	bl	8000d3c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d32:	f7ff fe1f 	bl	8000974 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f939 	bl	8000fd2 <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f90f 	bl	8000f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000ad4 	.word	0x20000ad4

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000ad4 	.word	0x20000ad4

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_Delay+0x40>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000008 	.word	0x20000008

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <__NVIC_SetPriorityGrouping+0x40>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x40>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00
 8000e64:	05fa0000 	.word	0x05fa0000

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f7ff ff8e 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff47 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff5c 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff8e 	bl	8000ed8 <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5d 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffb0 	bl	8000f40 <SysTick_Config>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000ffc:	4ba9      	ldr	r3, [pc, #676]	; (80012a4 <HAL_ETH_Init+0x2b8>)
 8000ffe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e183      	b.n	800131a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d106      	bne.n	800102c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f003 fd66 	bl	8004af8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102c:	4b9e      	ldr	r3, [pc, #632]	; (80012a8 <HAL_ETH_Init+0x2bc>)
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	4a9d      	ldr	r2, [pc, #628]	; (80012a8 <HAL_ETH_Init+0x2bc>)
 8001032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001036:	6453      	str	r3, [r2, #68]	; 0x44
 8001038:	4b9b      	ldr	r3, [pc, #620]	; (80012a8 <HAL_ETH_Init+0x2bc>)
 800103a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001044:	4b99      	ldr	r3, [pc, #612]	; (80012ac <HAL_ETH_Init+0x2c0>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	4a98      	ldr	r2, [pc, #608]	; (80012ac <HAL_ETH_Init+0x2c0>)
 800104a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800104e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001050:	4b96      	ldr	r3, [pc, #600]	; (80012ac <HAL_ETH_Init+0x2c0>)
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4994      	ldr	r1, [pc, #592]	; (80012ac <HAL_ETH_Init+0x2c0>)
 800105a:	4313      	orrs	r3, r2
 800105c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 0201 	orr.w	r2, r2, #1
 8001070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001074:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001076:	f7ff fea5 	bl	8000dc4 <HAL_GetTick>
 800107a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800107c:	e011      	b.n	80010a2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800107e:	f7ff fea1 	bl	8000dc4 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800108c:	d909      	bls.n	80010a2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2203      	movs	r2, #3
 8001092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e13b      	b.n	800131a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1e4      	bne.n	800107e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f023 031c 	bic.w	r3, r3, #28
 80010c2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80010c4:	f002 f876 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80010c8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4a78      	ldr	r2, [pc, #480]	; (80012b0 <HAL_ETH_Init+0x2c4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d908      	bls.n	80010e4 <HAL_ETH_Init+0xf8>
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	4a77      	ldr	r2, [pc, #476]	; (80012b4 <HAL_ETH_Init+0x2c8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d804      	bhi.n	80010e4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e027      	b.n	8001134 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	4a73      	ldr	r2, [pc, #460]	; (80012b4 <HAL_ETH_Init+0x2c8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d908      	bls.n	80010fe <HAL_ETH_Init+0x112>
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	4a72      	ldr	r2, [pc, #456]	; (80012b8 <HAL_ETH_Init+0x2cc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d804      	bhi.n	80010fe <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f043 030c 	orr.w	r3, r3, #12
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	e01a      	b.n	8001134 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4a6d      	ldr	r2, [pc, #436]	; (80012b8 <HAL_ETH_Init+0x2cc>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d903      	bls.n	800110e <HAL_ETH_Init+0x122>
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	4a6c      	ldr	r2, [pc, #432]	; (80012bc <HAL_ETH_Init+0x2d0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d911      	bls.n	8001132 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	4a6a      	ldr	r2, [pc, #424]	; (80012bc <HAL_ETH_Init+0x2d0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d908      	bls.n	8001128 <HAL_ETH_Init+0x13c>
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	4a69      	ldr	r2, [pc, #420]	; (80012c0 <HAL_ETH_Init+0x2d4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d804      	bhi.n	8001128 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e005      	b.n	8001134 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f043 0310 	orr.w	r3, r3, #16
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	e000      	b.n	8001134 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001132:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800113c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001140:	2100      	movs	r1, #0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fb9a 	bl	800187c <HAL_ETH_WritePHYRegister>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001152:	6939      	ldr	r1, [r7, #16]
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 fd4f 	bl	8001bf8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e0d9      	b.n	800131a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001166:	20ff      	movs	r0, #255	; 0xff
 8001168:	f7ff fe38 	bl	8000ddc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80a7 	beq.w	80012c4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001176:	f7ff fe25 	bl	8000dc4 <HAL_GetTick>
 800117a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	461a      	mov	r2, r3
 8001182:	2101      	movs	r1, #1
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 fb11 	bl	80017ac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800118a:	f7ff fe1b 	bl	8000dc4 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f241 3288 	movw	r2, #5000	; 0x1388
 8001198:	4293      	cmp	r3, r2
 800119a:	d90f      	bls.n	80011bc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011a0:	6939      	ldr	r1, [r7, #16]
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 fd28 	bl	8001bf8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e0ae      	b.n	800131a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0da      	beq.n	800117c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80011c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ca:	2100      	movs	r1, #0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 fb55 	bl	800187c <HAL_ETH_WritePHYRegister>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00b      	beq.n	80011f0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011dc:	6939      	ldr	r1, [r7, #16]
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 fd0a 	bl	8001bf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80011ec:	2301      	movs	r3, #1
 80011ee:	e094      	b.n	800131a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80011f0:	f7ff fde8 	bl	8000dc4 <HAL_GetTick>
 80011f4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	461a      	mov	r2, r3
 80011fc:	2101      	movs	r1, #1
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fad4 	bl	80017ac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001204:	f7ff fdde 	bl	8000dc4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001212:	4293      	cmp	r3, r2
 8001214:	d90f      	bls.n	8001236 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800121a:	6939      	ldr	r1, [r7, #16]
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 fceb 	bl	8001bf8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e071      	b.n	800131a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0da      	beq.n	80011f6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	461a      	mov	r2, r3
 8001246:	211f      	movs	r1, #31
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 faaf 	bl	80017ac <HAL_ETH_ReadPHYRegister>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00b      	beq.n	800126c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001258:	6939      	ldr	r1, [r7, #16]
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 fccc 	bl	8001bf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001268:	2301      	movs	r3, #1
 800126a:	e056      	b.n	800131a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	2b00      	cmp	r3, #0
 8001274:	d004      	beq.n	8001280 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	e002      	b.n	8001286 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	e037      	b.n	8001308 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	e032      	b.n	8001308 <HAL_ETH_Init+0x31c>
 80012a2:	bf00      	nop
 80012a4:	03938700 	.word	0x03938700
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40013800 	.word	0x40013800
 80012b0:	01312cff 	.word	0x01312cff
 80012b4:	02160ebf 	.word	0x02160ebf
 80012b8:	039386ff 	.word	0x039386ff
 80012bc:	05f5e0ff 	.word	0x05f5e0ff
 80012c0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	085b      	lsrs	r3, r3, #1
 80012d2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	461a      	mov	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 facd 	bl	800187c <HAL_ETH_WritePHYRegister>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00b      	beq.n	8001300 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012ec:	6939      	ldr	r1, [r7, #16]
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fc82 	bl	8001bf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e00c      	b.n	800131a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001300:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001304:	f7ff fd6a 	bl	8000ddc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001308:	6939      	ldr	r1, [r7, #16]
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fc74 	bl	8001bf8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop

08001324 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_ETH_DMATxDescListInit+0x20>
 8001340:	2302      	movs	r3, #2
 8001342:	e052      	b.n	80013ea <HAL_ETH_DMATxDescListInit+0xc6>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2202      	movs	r2, #2
 8001350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e030      	b.n	80013c2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	015b      	lsls	r3, r3, #5
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	4413      	add	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001370:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	461a      	mov	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d105      	bne.n	800139a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d208      	bcs.n	80013b6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	015b      	lsls	r3, r3, #5
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	e002      	b.n	80013bc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d3ca      	bcc.n	8001360 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6819      	ldr	r1, [r3, #0]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f241 0310 	movw	r3, #4112	; 0x1010
 80013d4:	440b      	add	r3, r1
 80013d6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b087      	sub	sp, #28
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_ETH_DMARxDescListInit+0x20>
 8001412:	2302      	movs	r3, #2
 8001414:	e056      	b.n	80014c4 <HAL_ETH_DMARxDescListInit+0xce>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2202      	movs	r2, #2
 8001422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	e034      	b.n	800149c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	015b      	lsls	r3, r3, #5
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	4413      	add	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001442:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800144a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	461a      	mov	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d105      	bne.n	8001474 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3b01      	subs	r3, #1
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	429a      	cmp	r2, r3
 800147c:	d208      	bcs.n	8001490 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	015b      	lsls	r3, r3, #5
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	4413      	add	r3, r2
 8001488:	461a      	mov	r2, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	e002      	b.n	8001496 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d3c6      	bcc.n	8001432 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6819      	ldr	r1, [r3, #0]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	f241 030c 	movw	r3, #4108	; 0x100c
 80014ae:	440b      	add	r3, r1
 80014b0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_ETH_TransmitFrame+0x24>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e0cd      	b.n	8001690 <HAL_ETH_TransmitFrame+0x1c0>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800151a:	2301      	movs	r3, #1
 800151c:	e0b8      	b.n	8001690 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	da09      	bge.n	800153c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2212      	movs	r2, #18
 800152c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0a9      	b.n	8001690 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001542:	4293      	cmp	r3, r2
 8001544:	d915      	bls.n	8001572 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	4a54      	ldr	r2, [pc, #336]	; (800169c <HAL_ETH_TransmitFrame+0x1cc>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0a9b      	lsrs	r3, r3, #10
 8001550:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_ETH_TransmitFrame+0x1cc>)
 8001556:	fba3 1302 	umull	r1, r3, r3, r2
 800155a:	0a9b      	lsrs	r3, r3, #10
 800155c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001560:	fb01 f303 	mul.w	r3, r1, r3
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e001      	b.n	8001576 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d11c      	bne.n	80015b6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800158a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001596:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015a6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80015b4:	e04b      	b.n	800164e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	e044      	b.n	8001646 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015ca:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d107      	bne.n	80015e2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015e0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015ea:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d116      	bne.n	8001624 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001604:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	4a25      	ldr	r2, [pc, #148]	; (80016a0 <HAL_ETH_TransmitFrame+0x1d0>)
 800160a:	fb02 f203 	mul.w	r2, r2, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	4413      	add	r3, r2
 8001612:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001616:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001622:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001632:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	461a      	mov	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	3301      	adds	r3, #1
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	429a      	cmp	r2, r3
 800164c:	d3b6      	bcc.n	80015bc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f241 0314 	movw	r3, #4116	; 0x1014
 8001656:	4413      	add	r3, r2
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00d      	beq.n	800167e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	f241 0314 	movw	r3, #4116	; 0x1014
 800166a:	4413      	add	r3, r2
 800166c:	2204      	movs	r2, #4
 800166e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	f241 0304 	movw	r3, #4100	; 0x1004
 8001678:	4413      	add	r3, r2
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	ac02b00b 	.word	0xac02b00b
 80016a0:	fffffa0c 	.word	0xfffffa0c

080016a4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_ETH_GetReceivedFrame+0x1a>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e070      	b.n	80017a0 <HAL_ETH_GetReceivedFrame+0xfc>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2202      	movs	r2, #2
 80016ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db5a      	blt.n	800178e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d030      	beq.n	8001748 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d103      	bne.n	8001700 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	0c1b      	lsrs	r3, r3, #16
 8001710:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001714:	3b04      	subs	r3, #4
 8001716:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	461a      	mov	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	e02b      	b.n	80017a0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001752:	2b00      	cmp	r3, #0
 8001754:	d010      	beq.n	8001778 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	461a      	mov	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
 8001776:	e00a      	b.n	800178e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	460b      	mov	r3, r1
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b82      	cmp	r3, #130	; 0x82
 80017cc:	d101      	bne.n	80017d2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80017ce:	2302      	movs	r3, #2
 80017d0:	e050      	b.n	8001874 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2282      	movs	r2, #130	; 0x82
 80017d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 031c 	and.w	r3, r3, #28
 80017e8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8a1b      	ldrh	r3, [r3, #16]
 80017ee:	02db      	lsls	r3, r3, #11
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80017f8:	897b      	ldrh	r3, [r7, #10]
 80017fa:	019b      	lsls	r3, r3, #6
 80017fc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f023 0302 	bic.w	r3, r3, #2
 800180c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800181e:	f7ff fad1 	bl	8000dc4 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001824:	e015      	b.n	8001852 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001826:	f7ff facd 	bl	8000dc4 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001834:	d309      	bcc.n	800184a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e014      	b.n	8001874 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1e4      	bne.n	8001826 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	b29b      	uxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	460b      	mov	r3, r1
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b42      	cmp	r3, #66	; 0x42
 800189c:	d101      	bne.n	80018a2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800189e:	2302      	movs	r3, #2
 80018a0:	e04e      	b.n	8001940 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2242      	movs	r2, #66	; 0x42
 80018a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 031c 	and.w	r3, r3, #28
 80018b8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8a1b      	ldrh	r3, [r3, #16]
 80018be:	02db      	lsls	r3, r3, #11
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80018c8:	897b      	ldrh	r3, [r7, #10]
 80018ca:	019b      	lsls	r3, r3, #6
 80018cc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80018f8:	f7ff fa64 	bl	8000dc4 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018fe:	e015      	b.n	800192c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001900:	f7ff fa60 	bl	8000dc4 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190e:	d309      	bcc.n	8001924 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e00d      	b.n	8001940 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1e4      	bne.n	8001900 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_ETH_Start+0x16>
 800195a:	2302      	movs	r3, #2
 800195c:	e01f      	b.n	800199e <HAL_ETH_Start+0x56>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2202      	movs	r2, #2
 800196a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fb44 	bl	8001ffc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fb7b 	bl	8002070 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fc12 	bl	80021a4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fbaf 	bl	80020e4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fbdc 	bl	8002144 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_ETH_Stop+0x16>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e01f      	b.n	80019fc <HAL_ETH_Stop+0x56>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2202      	movs	r2, #2
 80019c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fba1 	bl	8002114 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 fbce 	bl	8002174 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fb66 	bl	80020aa <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fbe0 	bl	80021a4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fb26 	bl	8002036 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_ETH_ConfigMAC+0x1c>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e0e4      	b.n	8001bea <HAL_ETH_ConfigMAC+0x1e6>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80b1 	beq.w	8001b9a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4b6c      	ldr	r3, [pc, #432]	; (8001bf4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a50:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001a56:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001a5c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001a62:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001a68:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001a6e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001a74:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001a7a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001a80:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001a86:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001a8c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001a92:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f7ff f996 	bl	8000ddc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ac0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001ac6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001acc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001ad2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001ad8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001ade:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001aea:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001aec:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7ff f970 	bl	8000ddc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b0c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b16:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b26:	4013      	ands	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b34:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001b3a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001b40:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001b46:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001b4c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b64:	2001      	movs	r0, #1
 8001b66:	f7ff f939 	bl	8000ddc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7ff f926 	bl	8000ddc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	61da      	str	r2, [r3, #28]
 8001b98:	e01e      	b.n	8001bd8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ba8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f7ff f906 	bl	8000ddc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	ff20810f 	.word	0xff20810f

08001bf8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0b0      	sub	sp, #192	; 0xc0
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c14:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d103      	bne.n	8001c46 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c42:	663b      	str	r3, [r7, #96]	; 0x60
 8001c44:	e001      	b.n	8001c4a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c54:	2300      	movs	r3, #0
 8001c56:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001c64:	2340      	movs	r3, #64	; 0x40
 8001c66:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001ccc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cd0:	4bab      	ldr	r3, [pc, #684]	; (8001f80 <ETH_MACDMAConfig+0x388>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001cdc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001ce0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001ce4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001cea:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001cee:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001cf2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001cf8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001cfc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001d00:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001d02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001d04:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001d08:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001d0c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001d0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d20:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff f855 	bl	8000ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d3a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d40:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001d44:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001d46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001d4a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001d50:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001d56:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001d5c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001d60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001d68:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d6a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f7ff f830 	bl	8000ddc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d84:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d8e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d98:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001da4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001dac:	4013      	ands	r3, r2
 8001dae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001db2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001db6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001db8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001dbc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001dbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001dc2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001dc8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001dce:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001dd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001dd4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001dd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001de8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f7fe fff1 	bl	8000ddc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e02:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e04:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001e08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7fe ffdc 	bl	8000ddc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e2c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e36:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001e3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e40:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001e52:	2304      	movs	r3, #4
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e6c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e82:	4413      	add	r3, r2
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001e8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <ETH_MACDMAConfig+0x38c>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e96:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001e98:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e9a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001e9c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001e9e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001ea0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001ea2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001ea4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001ea6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001ea8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001eaa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001eac:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001eae:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001eb2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001eb6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001eb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001eca:	4413      	add	r3, r2
 8001ecc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ed0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001eda:	4413      	add	r3, r2
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f7fe ff7a 	bl	8000ddc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ef6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001efc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001f00:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f04:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001f08:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001f0e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001f12:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f20:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7fe ff53 	bl	8000ddc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f42:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d10d      	bne.n	8001f68 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f241 031c 	movw	r3, #4124	; 0x101c
 8001f54:	4413      	add	r3, r2
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6811      	ldr	r1, [r2, #0]
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <ETH_MACDMAConfig+0x390>)
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	f241 031c 	movw	r3, #4124	; 0x101c
 8001f64:	440b      	add	r3, r1
 8001f66:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	2100      	movs	r1, #0
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f80b 	bl	8001f8c <ETH_MACAddressConfig>
}
 8001f76:	bf00      	nop
 8001f78:	37c0      	adds	r7, #192	; 0xc0
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	ff20810f 	.word	0xff20810f
 8001f84:	f8de3f23 	.word	0xf8de3f23
 8001f88:	00010040 	.word	0x00010040

08001f8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3305      	adds	r3, #5
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	3204      	adds	r2, #4
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <ETH_MACAddressConfig+0x68>)
 8001fae:	4413      	add	r3, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3303      	adds	r3, #3
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	061a      	lsls	r2, r3, #24
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <ETH_MACAddressConfig+0x6c>)
 8001fde:	4413      	add	r3, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	6013      	str	r3, [r2, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	371c      	adds	r7, #28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40028040 	.word	0x40028040
 8001ff8:	40028044 	.word	0x40028044

08001ffc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0208 	orr.w	r2, r2, #8
 8002016:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002020:	2001      	movs	r0, #1
 8002022:	f7fe fedb 	bl	8000ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	601a      	str	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0208 	bic.w	r2, r2, #8
 8002050:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800205a:	2001      	movs	r0, #1
 800205c:	f7fe febe 	bl	8000ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]
}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0204 	orr.w	r2, r2, #4
 800208a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002094:	2001      	movs	r0, #1
 8002096:	f7fe fea1 	bl	8000ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	601a      	str	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0204 	bic.w	r2, r2, #4
 80020c4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ce:	2001      	movs	r0, #1
 80020d0:	f7fe fe84 	bl	8000ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80020f4:	4413      	add	r3, r2
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6811      	ldr	r1, [r2, #0]
 80020fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002100:	f241 0318 	movw	r3, #4120	; 0x1018
 8002104:	440b      	add	r3, r1
 8002106:	601a      	str	r2, [r3, #0]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	f241 0318 	movw	r3, #4120	; 0x1018
 8002124:	4413      	add	r3, r2
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6811      	ldr	r1, [r2, #0]
 800212c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002130:	f241 0318 	movw	r3, #4120	; 0x1018
 8002134:	440b      	add	r3, r1
 8002136:	601a      	str	r2, [r3, #0]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	f241 0318 	movw	r3, #4120	; 0x1018
 8002154:	4413      	add	r3, r2
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6811      	ldr	r1, [r2, #0]
 800215c:	f043 0202 	orr.w	r2, r3, #2
 8002160:	f241 0318 	movw	r3, #4120	; 0x1018
 8002164:	440b      	add	r3, r1
 8002166:	601a      	str	r2, [r3, #0]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	f241 0318 	movw	r3, #4120	; 0x1018
 8002184:	4413      	add	r3, r2
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6811      	ldr	r1, [r2, #0]
 800218c:	f023 0202 	bic.w	r2, r3, #2
 8002190:	f241 0318 	movw	r3, #4120	; 0x1018
 8002194:	440b      	add	r3, r1
 8002196:	601a      	str	r2, [r3, #0]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021b8:	4413      	add	r3, r2
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6811      	ldr	r1, [r2, #0]
 80021c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021c8:	440b      	add	r3, r1
 80021ca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	f241 0318 	movw	r3, #4120	; 0x1018
 80021d4:	4413      	add	r3, r2
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021da:	2001      	movs	r0, #1
 80021dc:	f7fe fdfe 	bl	8000ddc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6819      	ldr	r1, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	f241 0318 	movw	r3, #4120	; 0x1018
 80021ea:	440b      	add	r3, r1
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	e175      	b.n	8002504 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	f040 8164 	bne.w	80024fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d00b      	beq.n	8002256 <HAL_GPIO_Init+0x5e>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800224a:	2b11      	cmp	r3, #17
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b12      	cmp	r3, #18
 8002254:	d130      	bne.n	80022b8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800228c:	2201      	movs	r2, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 0201 	and.w	r2, r3, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x100>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b12      	cmp	r3, #18
 80022f6:	d123      	bne.n	8002340 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	69b9      	ldr	r1, [r7, #24]
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0203 	and.w	r2, r3, #3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80be 	beq.w	80024fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	4b65      	ldr	r3, [pc, #404]	; (8002518 <HAL_GPIO_Init+0x320>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a64      	ldr	r2, [pc, #400]	; (8002518 <HAL_GPIO_Init+0x320>)
 8002388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b62      	ldr	r3, [pc, #392]	; (8002518 <HAL_GPIO_Init+0x320>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800239a:	4a60      	ldr	r2, [pc, #384]	; (800251c <HAL_GPIO_Init+0x324>)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a57      	ldr	r2, [pc, #348]	; (8002520 <HAL_GPIO_Init+0x328>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d037      	beq.n	8002436 <HAL_GPIO_Init+0x23e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a56      	ldr	r2, [pc, #344]	; (8002524 <HAL_GPIO_Init+0x32c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d031      	beq.n	8002432 <HAL_GPIO_Init+0x23a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a55      	ldr	r2, [pc, #340]	; (8002528 <HAL_GPIO_Init+0x330>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02b      	beq.n	800242e <HAL_GPIO_Init+0x236>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a54      	ldr	r2, [pc, #336]	; (800252c <HAL_GPIO_Init+0x334>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d025      	beq.n	800242a <HAL_GPIO_Init+0x232>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a53      	ldr	r2, [pc, #332]	; (8002530 <HAL_GPIO_Init+0x338>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <HAL_GPIO_Init+0x22e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_GPIO_Init+0x33c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d019      	beq.n	8002422 <HAL_GPIO_Init+0x22a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a51      	ldr	r2, [pc, #324]	; (8002538 <HAL_GPIO_Init+0x340>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0x226>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a50      	ldr	r2, [pc, #320]	; (800253c <HAL_GPIO_Init+0x344>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x222>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4f      	ldr	r2, [pc, #316]	; (8002540 <HAL_GPIO_Init+0x348>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x21e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4e      	ldr	r2, [pc, #312]	; (8002544 <HAL_GPIO_Init+0x34c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x21a>
 800240e:	2309      	movs	r3, #9
 8002410:	e012      	b.n	8002438 <HAL_GPIO_Init+0x240>
 8002412:	230a      	movs	r3, #10
 8002414:	e010      	b.n	8002438 <HAL_GPIO_Init+0x240>
 8002416:	2308      	movs	r3, #8
 8002418:	e00e      	b.n	8002438 <HAL_GPIO_Init+0x240>
 800241a:	2307      	movs	r3, #7
 800241c:	e00c      	b.n	8002438 <HAL_GPIO_Init+0x240>
 800241e:	2306      	movs	r3, #6
 8002420:	e00a      	b.n	8002438 <HAL_GPIO_Init+0x240>
 8002422:	2305      	movs	r3, #5
 8002424:	e008      	b.n	8002438 <HAL_GPIO_Init+0x240>
 8002426:	2304      	movs	r3, #4
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x240>
 800242a:	2303      	movs	r3, #3
 800242c:	e004      	b.n	8002438 <HAL_GPIO_Init+0x240>
 800242e:	2302      	movs	r3, #2
 8002430:	e002      	b.n	8002438 <HAL_GPIO_Init+0x240>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_GPIO_Init+0x240>
 8002436:	2300      	movs	r3, #0
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	f002 0203 	and.w	r2, r2, #3
 800243e:	0092      	lsls	r2, r2, #2
 8002440:	4093      	lsls	r3, r2
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002448:	4934      	ldr	r1, [pc, #208]	; (800251c <HAL_GPIO_Init+0x324>)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002456:	4b3c      	ldr	r3, [pc, #240]	; (8002548 <HAL_GPIO_Init+0x350>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800247a:	4a33      	ldr	r2, [pc, #204]	; (8002548 <HAL_GPIO_Init+0x350>)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <HAL_GPIO_Init+0x350>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a4:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_GPIO_Init+0x350>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024aa:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_GPIO_Init+0x350>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ce:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <HAL_GPIO_Init+0x350>)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d4:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_GPIO_Init+0x350>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f8:	4a13      	ldr	r2, [pc, #76]	; (8002548 <HAL_GPIO_Init+0x350>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3301      	adds	r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	2b0f      	cmp	r3, #15
 8002508:	f67f ae86 	bls.w	8002218 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800250c:	bf00      	nop
 800250e:	3724      	adds	r7, #36	; 0x24
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40023800 	.word	0x40023800
 800251c:	40013800 	.word	0x40013800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400
 8002528:	40020800 	.word	0x40020800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40021000 	.word	0x40021000
 8002534:	40021400 	.word	0x40021400
 8002538:	40021800 	.word	0x40021800
 800253c:	40021c00 	.word	0x40021c00
 8002540:	40022000 	.word	0x40022000
 8002544:	40022400 	.word	0x40022400
 8002548:	40013c00 	.word	0x40013c00

0800254c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
 8002558:	4613      	mov	r3, r2
 800255a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800255c:	787b      	ldrb	r3, [r7, #1]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002568:	e003      	b.n	8002572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800256a:	887b      	ldrh	r3, [r7, #2]
 800256c:	041a      	lsls	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	619a      	str	r2, [r3, #24]
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800257e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002580:	b08f      	sub	sp, #60	; 0x3c
 8002582:	af0a      	add	r7, sp, #40	; 0x28
 8002584:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e116      	b.n	80027be <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fa4a 	bl	8000a44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2203      	movs	r2, #3
 80025b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 fefc 	bl	80043cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	687e      	ldr	r6, [r7, #4]
 80025dc:	466d      	mov	r5, sp
 80025de:	f106 0410 	add.w	r4, r6, #16
 80025e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80025f2:	1d33      	adds	r3, r6, #4
 80025f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f6:	6838      	ldr	r0, [r7, #0]
 80025f8:	f001 fe90 	bl	800431c <USB_CoreInit>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2202      	movs	r2, #2
 8002606:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0d7      	b.n	80027be <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f001 feea 	bl	80043ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e04a      	b.n	80026b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	333d      	adds	r3, #61	; 0x3d
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	333c      	adds	r3, #60	; 0x3c
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	b298      	uxth	r0, r3
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3342      	adds	r3, #66	; 0x42
 800265c:	4602      	mov	r2, r0
 800265e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	333f      	adds	r3, #63	; 0x3f
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3344      	adds	r3, #68	; 0x44
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3348      	adds	r3, #72	; 0x48
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3350      	adds	r3, #80	; 0x50
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	3301      	adds	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d3af      	bcc.n	8002620 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e044      	b.n	8002750 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	3301      	adds	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d3b5      	bcc.n	80026c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	687e      	ldr	r6, [r7, #4]
 8002762:	466d      	mov	r5, sp
 8002764:	f106 0410 	add.w	r4, r6, #16
 8002768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002774:	e885 0003 	stmia.w	r5, {r0, r1}
 8002778:	1d33      	adds	r3, r6, #4
 800277a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800277c:	6838      	ldr	r0, [r7, #0]
 800277e:	f001 fe61 	bl	8004444 <USB_DevInit>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e014      	b.n	80027be <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d102      	bne.n	80027b2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f80b 	bl	80027c8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 f813 	bl	80047e2 <USB_DevDisconnect>

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080027c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027f6:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_PCDEx_ActivateLPM+0x44>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	10000003 	.word	0x10000003

08002810 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40007000 	.word	0x40007000

08002830 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800285e:	f7fe fab1 	bl	8000dc4 <HAL_GetTick>
 8002862:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002864:	e009      	b.n	800287a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002866:	f7fe faad 	bl	8000dc4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002874:	d901      	bls.n	800287a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e022      	b.n	80028c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800287a:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d1ee      	bne.n	8002866 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002888:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800288e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002892:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002894:	f7fe fa96 	bl	8000dc4 <HAL_GetTick>
 8002898:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800289a:	e009      	b.n	80028b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800289c:	f7fe fa92 	bl	8000dc4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028aa:	d901      	bls.n	80028b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e007      	b.n	80028c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028bc:	d1ee      	bne.n	800289c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40007000 	.word	0x40007000

080028d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028d8:	2300      	movs	r3, #0
 80028da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e29b      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8087 	beq.w	8002a02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f4:	4b96      	ldr	r3, [pc, #600]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d00c      	beq.n	800291a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002900:	4b93      	ldr	r3, [pc, #588]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d112      	bne.n	8002932 <HAL_RCC_OscConfig+0x62>
 800290c:	4b90      	ldr	r3, [pc, #576]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002918:	d10b      	bne.n	8002932 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291a:	4b8d      	ldr	r3, [pc, #564]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d06c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x130>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d168      	bne.n	8002a00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e275      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x7a>
 800293c:	4b84      	ldr	r3, [pc, #528]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a83      	ldr	r2, [pc, #524]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	e02e      	b.n	80029a8 <HAL_RCC_OscConfig+0xd8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x9c>
 8002952:	4b7f      	ldr	r3, [pc, #508]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a7e      	ldr	r2, [pc, #504]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b7c      	ldr	r3, [pc, #496]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a7b      	ldr	r2, [pc, #492]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e01d      	b.n	80029a8 <HAL_RCC_OscConfig+0xd8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0xc0>
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b73      	ldr	r3, [pc, #460]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a72      	ldr	r2, [pc, #456]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0xd8>
 8002990:	4b6f      	ldr	r3, [pc, #444]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6e      	ldr	r2, [pc, #440]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b6c      	ldr	r3, [pc, #432]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a6b      	ldr	r2, [pc, #428]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 80029a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d013      	beq.n	80029d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fa08 	bl	8000dc4 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b8:	f7fe fa04 	bl	8000dc4 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	; 0x64
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e229      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0xe8>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe f9f4 	bl	8000dc4 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e0:	f7fe f9f0 	bl	8000dc4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e215      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f2:	4b57      	ldr	r3, [pc, #348]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x110>
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d069      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a0e:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1a:	4b4d      	ldr	r3, [pc, #308]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d11c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x190>
 8002a26:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d116      	bne.n	8002a60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <HAL_RCC_OscConfig+0x17a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e1e9      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4a:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	493d      	ldr	r1, [pc, #244]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	e040      	b.n	8002ae2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d023      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a68:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a38      	ldr	r2, [pc, #224]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe f9a6 	bl	8000dc4 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7c:	f7fe f9a2 	bl	8000dc4 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e1c7      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4929      	ldr	r1, [pc, #164]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
 8002aae:	e018      	b.n	8002ae2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe f982 	bl	8000dc4 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac4:	f7fe f97e 	bl	8000dc4 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e1a3      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d038      	beq.n	8002b60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d019      	beq.n	8002b2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afa:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7fe f95f 	bl	8000dc4 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7fe f95b 	bl	8000dc4 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e180      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x23a>
 8002b28:	e01a      	b.n	8002b60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b36:	f7fe f945 	bl	8000dc4 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7fe f941 	bl	8000dc4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d903      	bls.n	8002b54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e166      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
 8002b50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b92      	ldr	r3, [pc, #584]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80a4 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6e:	4b8c      	ldr	r3, [pc, #560]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	4b89      	ldr	r3, [pc, #548]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	4a88      	ldr	r2, [pc, #544]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40
 8002b86:	4b86      	ldr	r3, [pc, #536]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b92:	2301      	movs	r3, #1
 8002b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b96:	4b83      	ldr	r3, [pc, #524]	; (8002da4 <HAL_RCC_OscConfig+0x4d4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ba2:	4b80      	ldr	r3, [pc, #512]	; (8002da4 <HAL_RCC_OscConfig+0x4d4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a7f      	ldr	r2, [pc, #508]	; (8002da4 <HAL_RCC_OscConfig+0x4d4>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bae:	f7fe f909 	bl	8000dc4 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7fe f905 	bl	8000dc4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b64      	cmp	r3, #100	; 0x64
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e12a      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc8:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x4d4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x31a>
 8002bdc:	4b70      	ldr	r3, [pc, #448]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	4a6f      	ldr	r2, [pc, #444]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6713      	str	r3, [r2, #112]	; 0x70
 8002be8:	e02d      	b.n	8002c46 <HAL_RCC_OscConfig+0x376>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x33c>
 8002bf2:	4b6b      	ldr	r3, [pc, #428]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	4a6a      	ldr	r2, [pc, #424]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfe:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a67      	ldr	r2, [pc, #412]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002c04:	f023 0304 	bic.w	r3, r3, #4
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0a:	e01c      	b.n	8002c46 <HAL_RCC_OscConfig+0x376>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCC_OscConfig+0x35e>
 8002c14:	4b62      	ldr	r3, [pc, #392]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a61      	ldr	r2, [pc, #388]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002c1a:	f043 0304 	orr.w	r3, r3, #4
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c20:	4b5f      	ldr	r3, [pc, #380]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a5e      	ldr	r2, [pc, #376]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2c:	e00b      	b.n	8002c46 <HAL_RCC_OscConfig+0x376>
 8002c2e:	4b5c      	ldr	r3, [pc, #368]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	4a5b      	ldr	r2, [pc, #364]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3a:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	4a58      	ldr	r2, [pc, #352]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d015      	beq.n	8002c7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7fe f8b9 	bl	8000dc4 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fe f8b5 	bl	8000dc4 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e0d8      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	4b4c      	ldr	r3, [pc, #304]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ee      	beq.n	8002c56 <HAL_RCC_OscConfig+0x386>
 8002c78:	e014      	b.n	8002ca4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fe f8a3 	bl	8000dc4 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe f89f 	bl	8000dc4 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0c2      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ee      	bne.n	8002c82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002caa:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a3c      	ldr	r2, [pc, #240]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80ae 	beq.w	8002e1c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc0:	4b37      	ldr	r3, [pc, #220]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d06d      	beq.n	8002da8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d14b      	bne.n	8002d6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd4:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a31      	ldr	r2, [pc, #196]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe f870 	bl	8000dc4 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe f86c 	bl	8000dc4 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e091      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfa:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	019b      	lsls	r3, r3, #6
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	071b      	lsls	r3, r3, #28
 8002d32:	491b      	ldr	r1, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe f83e 	bl	8000dc4 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe f83a 	bl	8000dc4 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e05f      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x47c>
 8002d6a:	e057      	b.n	8002e1c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f824 	bl	8000dc4 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe f820 	bl	8000dc4 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e045      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_OscConfig+0x4d0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x4b0>
 8002d9e:	e03d      	b.n	8002e1c <HAL_RCC_OscConfig+0x54c>
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002da8:	4b1f      	ldr	r3, [pc, #124]	; (8002e28 <HAL_RCC_OscConfig+0x558>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d030      	beq.n	8002e18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d129      	bne.n	8002e18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d122      	bne.n	8002e18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dd8:	4013      	ands	r3, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d119      	bne.n	8002e18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	3b01      	subs	r3, #1
 8002df2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d10f      	bne.n	8002e18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800

08002e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0d0      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d910      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b67      	ldr	r3, [pc, #412]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 020f 	bic.w	r2, r3, #15
 8002e5a:	4965      	ldr	r1, [pc, #404]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea4:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	494d      	ldr	r1, [pc, #308]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d040      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d115      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e073      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e06b      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b39      	ldr	r3, [pc, #228]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4936      	ldr	r1, [pc, #216]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f20:	f7fd ff50 	bl	8000dc4 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7fd ff4c 	bl	8000dc4 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e053      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d210      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 020f 	bic.w	r2, r3, #15
 8002f66:	4922      	ldr	r1, [pc, #136]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e032      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4916      	ldr	r1, [pc, #88]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fbe:	f000 f821 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4601      	mov	r1, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8002fd0:	5cd3      	ldrb	r3, [r2, r3]
 8002fd2:	fa21 f303 	lsr.w	r3, r1, r3
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1d0>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1d4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd feac 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023c00 	.word	0x40023c00
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	08014080 	.word	0x08014080
 8002ffc:	20000000 	.word	0x20000000
 8003000:	20000004 	.word	0x20000004

08003004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	2300      	movs	r3, #0
 8003014:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800301a:	4b63      	ldr	r3, [pc, #396]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b04      	cmp	r3, #4
 8003024:	d007      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x32>
 8003026:	2b08      	cmp	r3, #8
 8003028:	d008      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x38>
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 80b4 	bne.w	8003198 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b5e      	ldr	r3, [pc, #376]	; (80031ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003032:	60bb      	str	r3, [r7, #8]
      break;
 8003034:	e0b3      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003036:	4b5e      	ldr	r3, [pc, #376]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003038:	60bb      	str	r3, [r7, #8]
      break;
 800303a:	e0b0      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303c:	4b5a      	ldr	r3, [pc, #360]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003044:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003046:	4b58      	ldr	r3, [pc, #352]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d04a      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	4b55      	ldr	r3, [pc, #340]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	f04f 0400 	mov.w	r4, #0
 800305c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	ea03 0501 	and.w	r5, r3, r1
 8003068:	ea04 0602 	and.w	r6, r4, r2
 800306c:	4629      	mov	r1, r5
 800306e:	4632      	mov	r2, r6
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	f04f 0400 	mov.w	r4, #0
 8003078:	0154      	lsls	r4, r2, #5
 800307a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800307e:	014b      	lsls	r3, r1, #5
 8003080:	4619      	mov	r1, r3
 8003082:	4622      	mov	r2, r4
 8003084:	1b49      	subs	r1, r1, r5
 8003086:	eb62 0206 	sbc.w	r2, r2, r6
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	f04f 0400 	mov.w	r4, #0
 8003092:	0194      	lsls	r4, r2, #6
 8003094:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003098:	018b      	lsls	r3, r1, #6
 800309a:	1a5b      	subs	r3, r3, r1
 800309c:	eb64 0402 	sbc.w	r4, r4, r2
 80030a0:	f04f 0100 	mov.w	r1, #0
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	00e2      	lsls	r2, r4, #3
 80030aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030ae:	00d9      	lsls	r1, r3, #3
 80030b0:	460b      	mov	r3, r1
 80030b2:	4614      	mov	r4, r2
 80030b4:	195b      	adds	r3, r3, r5
 80030b6:	eb44 0406 	adc.w	r4, r4, r6
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	0262      	lsls	r2, r4, #9
 80030c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030c8:	0259      	lsls	r1, r3, #9
 80030ca:	460b      	mov	r3, r1
 80030cc:	4614      	mov	r4, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	4621      	mov	r1, r4
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f04f 0400 	mov.w	r4, #0
 80030d8:	461a      	mov	r2, r3
 80030da:	4623      	mov	r3, r4
 80030dc:	f7fd f918 	bl	8000310 <__aeabi_uldivmod>
 80030e0:	4603      	mov	r3, r0
 80030e2:	460c      	mov	r4, r1
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e049      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e8:	4b2f      	ldr	r3, [pc, #188]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	f04f 0400 	mov.w	r4, #0
 80030f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	ea03 0501 	and.w	r5, r3, r1
 80030fe:	ea04 0602 	and.w	r6, r4, r2
 8003102:	4629      	mov	r1, r5
 8003104:	4632      	mov	r2, r6
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	f04f 0400 	mov.w	r4, #0
 800310e:	0154      	lsls	r4, r2, #5
 8003110:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003114:	014b      	lsls	r3, r1, #5
 8003116:	4619      	mov	r1, r3
 8003118:	4622      	mov	r2, r4
 800311a:	1b49      	subs	r1, r1, r5
 800311c:	eb62 0206 	sbc.w	r2, r2, r6
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	f04f 0400 	mov.w	r4, #0
 8003128:	0194      	lsls	r4, r2, #6
 800312a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800312e:	018b      	lsls	r3, r1, #6
 8003130:	1a5b      	subs	r3, r3, r1
 8003132:	eb64 0402 	sbc.w	r4, r4, r2
 8003136:	f04f 0100 	mov.w	r1, #0
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	00e2      	lsls	r2, r4, #3
 8003140:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003144:	00d9      	lsls	r1, r3, #3
 8003146:	460b      	mov	r3, r1
 8003148:	4614      	mov	r4, r2
 800314a:	195b      	adds	r3, r3, r5
 800314c:	eb44 0406 	adc.w	r4, r4, r6
 8003150:	f04f 0100 	mov.w	r1, #0
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	02a2      	lsls	r2, r4, #10
 800315a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800315e:	0299      	lsls	r1, r3, #10
 8003160:	460b      	mov	r3, r1
 8003162:	4614      	mov	r4, r2
 8003164:	4618      	mov	r0, r3
 8003166:	4621      	mov	r1, r4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f04f 0400 	mov.w	r4, #0
 800316e:	461a      	mov	r2, r3
 8003170:	4623      	mov	r3, r4
 8003172:	f7fd f8cd 	bl	8000310 <__aeabi_uldivmod>
 8003176:	4603      	mov	r3, r0
 8003178:	460c      	mov	r4, r1
 800317a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800317c:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	60bb      	str	r3, [r7, #8]
      break;
 8003196:	e002      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800319a:	60bb      	str	r3, [r7, #8]
      break;
 800319c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319e:	68bb      	ldr	r3, [r7, #8]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	00f42400 	.word	0x00f42400
 80031b0:	007a1200 	.word	0x007a1200

080031b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000000 	.word	0x20000000

080031cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d0:	f7ff fff0 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d4:	4601      	mov	r1, r0
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0a9b      	lsrs	r3, r3, #10
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4a03      	ldr	r2, [pc, #12]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	08014090 	.word	0x08014090

080031f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f8:	f7ff ffdc 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031fc:	4601      	mov	r1, r0
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	0b5b      	lsrs	r3, r3, #13
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4a03      	ldr	r2, [pc, #12]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800320a:	5cd3      	ldrb	r3, [r2, r3]
 800320c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40023800 	.word	0x40023800
 8003218:	08014090 	.word	0x08014090

0800321c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d012      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003244:	4b69      	ldr	r3, [pc, #420]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a68      	ldr	r2, [pc, #416]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800324e:	6093      	str	r3, [r2, #8]
 8003250:	4b66      	ldr	r3, [pc, #408]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	4964      	ldr	r1, [pc, #400]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003266:	2301      	movs	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d017      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003276:	4b5d      	ldr	r3, [pc, #372]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800327c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003284:	4959      	ldr	r1, [pc, #356]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003294:	d101      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003296:	2301      	movs	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032a2:	2301      	movs	r3, #1
 80032a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d017      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032b2:	4b4e      	ldr	r3, [pc, #312]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	494a      	ldr	r1, [pc, #296]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d0:	d101      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032de:	2301      	movs	r3, #1
 80032e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032ee:	2301      	movs	r3, #1
 80032f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 808b 	beq.w	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003300:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	4a39      	ldr	r2, [pc, #228]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330a:	6413      	str	r3, [r2, #64]	; 0x40
 800330c:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a34      	ldr	r2, [pc, #208]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800331e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003324:	f7fd fd4e 	bl	8000dc4 <HAL_GetTick>
 8003328:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332c:	f7fd fd4a 	bl	8000dc4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e38d      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800333e:	4b2c      	ldr	r3, [pc, #176]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800334a:	4b28      	ldr	r3, [pc, #160]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003352:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d035      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	429a      	cmp	r2, r3
 8003366:	d02e      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003370:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003372:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800337e:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003388:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800338a:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d114      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fd fd12 	bl	8000dc4 <HAL_GetTick>
 80033a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a2:	e00a      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f7fd fd0e 	bl	8000dc4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e34f      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0ee      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033d2:	d111      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033e2:	400b      	ands	r3, r1
 80033e4:	4901      	ldr	r1, [pc, #4]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
 80033ea:	e00b      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40007000 	.word	0x40007000
 80033f4:	0ffffcff 	.word	0x0ffffcff
 80033f8:	4bb3      	ldr	r3, [pc, #716]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4ab2      	ldr	r2, [pc, #712]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003402:	6093      	str	r3, [r2, #8]
 8003404:	4bb0      	ldr	r3, [pc, #704]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003406:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	49ad      	ldr	r1, [pc, #692]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003412:	4313      	orrs	r3, r2
 8003414:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d010      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003422:	4ba9      	ldr	r3, [pc, #676]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003428:	4aa7      	ldr	r2, [pc, #668]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003432:	4ba5      	ldr	r3, [pc, #660]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003434:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	49a2      	ldr	r1, [pc, #648]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003450:	4b9d      	ldr	r3, [pc, #628]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345e:	499a      	ldr	r1, [pc, #616]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003472:	4b95      	ldr	r3, [pc, #596]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003478:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003480:	4991      	ldr	r1, [pc, #580]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003494:	4b8c      	ldr	r3, [pc, #560]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a2:	4989      	ldr	r1, [pc, #548]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034b6:	4b84      	ldr	r3, [pc, #528]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4980      	ldr	r1, [pc, #512]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034d8:	4b7b      	ldr	r3, [pc, #492]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	f023 0203 	bic.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	4978      	ldr	r1, [pc, #480]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034fa:	4b73      	ldr	r3, [pc, #460]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003500:	f023 020c 	bic.w	r2, r3, #12
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003508:	496f      	ldr	r1, [pc, #444]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800351c:	4b6a      	ldr	r3, [pc, #424]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352a:	4967      	ldr	r1, [pc, #412]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800353e:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003544:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354c:	495e      	ldr	r1, [pc, #376]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003560:	4b59      	ldr	r3, [pc, #356]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	4956      	ldr	r1, [pc, #344]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003582:	4b51      	ldr	r3, [pc, #324]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	494d      	ldr	r1, [pc, #308]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035a4:	4b48      	ldr	r3, [pc, #288]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	4945      	ldr	r1, [pc, #276]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035c6:	4b40      	ldr	r3, [pc, #256]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	493c      	ldr	r1, [pc, #240]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035e8:	4b37      	ldr	r3, [pc, #220]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f6:	4934      	ldr	r1, [pc, #208]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d011      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003618:	492b      	ldr	r1, [pc, #172]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003628:	d101      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800362a:	2301      	movs	r3, #1
 800362c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800363a:	2301      	movs	r3, #1
 800363c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800364a:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003658:	491b      	ldr	r1, [pc, #108]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800366c:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367c:	4912      	ldr	r1, [pc, #72]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003690:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a0:	4909      	ldr	r1, [pc, #36]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00f      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	e002      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	4985      	ldr	r1, [pc, #532]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00b      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036e0:	4b80      	ldr	r3, [pc, #512]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f0:	497c      	ldr	r1, [pc, #496]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d005      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003706:	f040 80d6 	bne.w	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800370a:	4b76      	ldr	r3, [pc, #472]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a75      	ldr	r2, [pc, #468]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003710:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003716:	f7fd fb55 	bl	8000dc4 <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800371e:	f7fd fb51 	bl	8000dc4 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b64      	cmp	r3, #100	; 0x64
 800372a:	d901      	bls.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e194      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003730:	4b6c      	ldr	r3, [pc, #432]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f0      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d021      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374c:	2b00      	cmp	r3, #0
 800374e:	d11d      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003750:	4b64      	ldr	r3, [pc, #400]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003756:	0c1b      	lsrs	r3, r3, #16
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800375e:	4b61      	ldr	r3, [pc, #388]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003764:	0e1b      	lsrs	r3, r3, #24
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	019a      	lsls	r2, r3, #6
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	431a      	orrs	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	061b      	lsls	r3, r3, #24
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	071b      	lsls	r3, r3, #28
 8003784:	4957      	ldr	r1, [pc, #348]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d02e      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b6:	d129      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037b8:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037be:	0c1b      	lsrs	r3, r3, #16
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037cc:	0f1b      	lsrs	r3, r3, #28
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	019a      	lsls	r2, r3, #6
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	071b      	lsls	r3, r3, #28
 80037ec:	493d      	ldr	r1, [pc, #244]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037f4:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037fa:	f023 021f 	bic.w	r2, r3, #31
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	3b01      	subs	r3, #1
 8003804:	4937      	ldr	r1, [pc, #220]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01d      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800381a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381e:	0e1b      	lsrs	r3, r3, #24
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382c:	0f1b      	lsrs	r3, r3, #28
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	019a      	lsls	r2, r3, #6
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	041b      	lsls	r3, r3, #16
 8003840:	431a      	orrs	r2, r3
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	431a      	orrs	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	071b      	lsls	r3, r3, #28
 800384c:	4925      	ldr	r1, [pc, #148]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d011      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	019a      	lsls	r2, r3, #6
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	071b      	lsls	r3, r3, #28
 800387c:	4919      	ldr	r1, [pc, #100]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800388a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800388e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003890:	f7fd fa98 	bl	8000dc4 <HAL_GetTick>
 8003894:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003898:	f7fd fa94 	bl	8000dc4 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	; 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e0d7      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f040 80cd 	bne.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a08      	ldr	r2, [pc, #32]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ca:	f7fd fa7b 	bl	8000dc4 <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038d2:	f7fd fa77 	bl	8000dc4 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b64      	cmp	r3, #100	; 0x64
 80038de:	d903      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0ba      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80038e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038e8:	4b5e      	ldr	r3, [pc, #376]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038f4:	d0ed      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003912:	2b00      	cmp	r3, #0
 8003914:	d02e      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d12a      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800391e:	4b51      	ldr	r3, [pc, #324]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800392c:	4b4d      	ldr	r3, [pc, #308]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	0f1b      	lsrs	r3, r3, #28
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	019a      	lsls	r2, r3, #6
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	061b      	lsls	r3, r3, #24
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	071b      	lsls	r3, r3, #28
 8003952:	4944      	ldr	r1, [pc, #272]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800395a:	4b42      	ldr	r3, [pc, #264]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800395c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003960:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	3b01      	subs	r3, #1
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	493d      	ldr	r1, [pc, #244]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d022      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003988:	d11d      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800398a:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	0e1b      	lsrs	r3, r3, #24
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003998:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	0f1b      	lsrs	r3, r3, #28
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	019a      	lsls	r2, r3, #6
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	041b      	lsls	r3, r3, #16
 80039b2:	431a      	orrs	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	061b      	lsls	r3, r3, #24
 80039b8:	431a      	orrs	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	071b      	lsls	r3, r3, #28
 80039be:	4929      	ldr	r1, [pc, #164]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d028      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039d2:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	0e1b      	lsrs	r3, r3, #24
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039e0:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	019a      	lsls	r2, r3, #6
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	431a      	orrs	r2, r3
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	061b      	lsls	r3, r3, #24
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	071b      	lsls	r3, r3, #28
 8003a06:	4917      	ldr	r1, [pc, #92]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	4911      	ldr	r1, [pc, #68]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a30:	f7fd f9c8 	bl	8000dc4 <HAL_GetTick>
 8003a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a38:	f7fd f9c4 	bl	8000dc4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e007      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a56:	d1ef      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800

08003a68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e040      	b.n	8003afc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fc ff96 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	; 0x24
 8003a94:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f82c 	bl	8003b04 <UART_SetConfig>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e022      	b.n	8003afc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 faca 	bl	8004058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fb51 	bl	800419c <UART_CheckIdleState>
 8003afa:	4603      	mov	r3, r0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4bb1      	ldr	r3, [pc, #708]	; (8003df8 <UART_SetConfig+0x2f4>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	6939      	ldr	r1, [r7, #16]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a9f      	ldr	r2, [pc, #636]	; (8003dfc <UART_SetConfig+0x2f8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d121      	bne.n	8003bc8 <UART_SetConfig+0xc4>
 8003b84:	4b9e      	ldr	r3, [pc, #632]	; (8003e00 <UART_SetConfig+0x2fc>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d816      	bhi.n	8003bc0 <UART_SetConfig+0xbc>
 8003b92:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <UART_SetConfig+0x94>)
 8003b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b98:	08003ba9 	.word	0x08003ba9
 8003b9c:	08003bb5 	.word	0x08003bb5
 8003ba0:	08003baf 	.word	0x08003baf
 8003ba4:	08003bbb 	.word	0x08003bbb
 8003ba8:	2301      	movs	r3, #1
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e151      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	77fb      	strb	r3, [r7, #31]
 8003bb2:	e14e      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	77fb      	strb	r3, [r7, #31]
 8003bb8:	e14b      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003bba:	2308      	movs	r3, #8
 8003bbc:	77fb      	strb	r3, [r7, #31]
 8003bbe:	e148      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	77fb      	strb	r3, [r7, #31]
 8003bc4:	bf00      	nop
 8003bc6:	e144      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a8d      	ldr	r2, [pc, #564]	; (8003e04 <UART_SetConfig+0x300>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d134      	bne.n	8003c3c <UART_SetConfig+0x138>
 8003bd2:	4b8b      	ldr	r3, [pc, #556]	; (8003e00 <UART_SetConfig+0x2fc>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d829      	bhi.n	8003c34 <UART_SetConfig+0x130>
 8003be0:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <UART_SetConfig+0xe4>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003c1d 	.word	0x08003c1d
 8003bec:	08003c35 	.word	0x08003c35
 8003bf0:	08003c35 	.word	0x08003c35
 8003bf4:	08003c35 	.word	0x08003c35
 8003bf8:	08003c29 	.word	0x08003c29
 8003bfc:	08003c35 	.word	0x08003c35
 8003c00:	08003c35 	.word	0x08003c35
 8003c04:	08003c35 	.word	0x08003c35
 8003c08:	08003c23 	.word	0x08003c23
 8003c0c:	08003c35 	.word	0x08003c35
 8003c10:	08003c35 	.word	0x08003c35
 8003c14:	08003c35 	.word	0x08003c35
 8003c18:	08003c2f 	.word	0x08003c2f
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e117      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003c22:	2302      	movs	r3, #2
 8003c24:	77fb      	strb	r3, [r7, #31]
 8003c26:	e114      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e111      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003c2e:	2308      	movs	r3, #8
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e10e      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003c34:	2310      	movs	r3, #16
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	bf00      	nop
 8003c3a:	e10a      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a71      	ldr	r2, [pc, #452]	; (8003e08 <UART_SetConfig+0x304>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d120      	bne.n	8003c88 <UART_SetConfig+0x184>
 8003c46:	4b6e      	ldr	r3, [pc, #440]	; (8003e00 <UART_SetConfig+0x2fc>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d00f      	beq.n	8003c74 <UART_SetConfig+0x170>
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d802      	bhi.n	8003c5e <UART_SetConfig+0x15a>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <UART_SetConfig+0x164>
 8003c5c:	e010      	b.n	8003c80 <UART_SetConfig+0x17c>
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d005      	beq.n	8003c6e <UART_SetConfig+0x16a>
 8003c62:	2b30      	cmp	r3, #48	; 0x30
 8003c64:	d009      	beq.n	8003c7a <UART_SetConfig+0x176>
 8003c66:	e00b      	b.n	8003c80 <UART_SetConfig+0x17c>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e0f1      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	e0ee      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003c74:	2304      	movs	r3, #4
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e0eb      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e0e8      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003c80:	2310      	movs	r3, #16
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	bf00      	nop
 8003c86:	e0e4      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5f      	ldr	r2, [pc, #380]	; (8003e0c <UART_SetConfig+0x308>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d120      	bne.n	8003cd4 <UART_SetConfig+0x1d0>
 8003c92:	4b5b      	ldr	r3, [pc, #364]	; (8003e00 <UART_SetConfig+0x2fc>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	d00f      	beq.n	8003cc0 <UART_SetConfig+0x1bc>
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d802      	bhi.n	8003caa <UART_SetConfig+0x1a6>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <UART_SetConfig+0x1b0>
 8003ca8:	e010      	b.n	8003ccc <UART_SetConfig+0x1c8>
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d005      	beq.n	8003cba <UART_SetConfig+0x1b6>
 8003cae:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb0:	d009      	beq.n	8003cc6 <UART_SetConfig+0x1c2>
 8003cb2:	e00b      	b.n	8003ccc <UART_SetConfig+0x1c8>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e0cb      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	77fb      	strb	r3, [r7, #31]
 8003cbe:	e0c8      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e0c5      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e0c2      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	bf00      	nop
 8003cd2:	e0be      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a4d      	ldr	r2, [pc, #308]	; (8003e10 <UART_SetConfig+0x30c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d124      	bne.n	8003d28 <UART_SetConfig+0x224>
 8003cde:	4b48      	ldr	r3, [pc, #288]	; (8003e00 <UART_SetConfig+0x2fc>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cec:	d012      	beq.n	8003d14 <UART_SetConfig+0x210>
 8003cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf2:	d802      	bhi.n	8003cfa <UART_SetConfig+0x1f6>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <UART_SetConfig+0x204>
 8003cf8:	e012      	b.n	8003d20 <UART_SetConfig+0x21c>
 8003cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cfe:	d006      	beq.n	8003d0e <UART_SetConfig+0x20a>
 8003d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d04:	d009      	beq.n	8003d1a <UART_SetConfig+0x216>
 8003d06:	e00b      	b.n	8003d20 <UART_SetConfig+0x21c>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e0a1      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	77fb      	strb	r3, [r7, #31]
 8003d12:	e09e      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003d14:	2304      	movs	r3, #4
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e09b      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e098      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003d20:	2310      	movs	r3, #16
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	bf00      	nop
 8003d26:	e094      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a39      	ldr	r2, [pc, #228]	; (8003e14 <UART_SetConfig+0x310>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d124      	bne.n	8003d7c <UART_SetConfig+0x278>
 8003d32:	4b33      	ldr	r3, [pc, #204]	; (8003e00 <UART_SetConfig+0x2fc>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d40:	d012      	beq.n	8003d68 <UART_SetConfig+0x264>
 8003d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d46:	d802      	bhi.n	8003d4e <UART_SetConfig+0x24a>
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <UART_SetConfig+0x258>
 8003d4c:	e012      	b.n	8003d74 <UART_SetConfig+0x270>
 8003d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d52:	d006      	beq.n	8003d62 <UART_SetConfig+0x25e>
 8003d54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d58:	d009      	beq.n	8003d6e <UART_SetConfig+0x26a>
 8003d5a:	e00b      	b.n	8003d74 <UART_SetConfig+0x270>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e077      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e074      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e071      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003d6e:	2308      	movs	r3, #8
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	e06e      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003d74:	2310      	movs	r3, #16
 8003d76:	77fb      	strb	r3, [r7, #31]
 8003d78:	bf00      	nop
 8003d7a:	e06a      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <UART_SetConfig+0x314>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d124      	bne.n	8003dd0 <UART_SetConfig+0x2cc>
 8003d86:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <UART_SetConfig+0x2fc>)
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d94:	d012      	beq.n	8003dbc <UART_SetConfig+0x2b8>
 8003d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9a:	d802      	bhi.n	8003da2 <UART_SetConfig+0x29e>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <UART_SetConfig+0x2ac>
 8003da0:	e012      	b.n	8003dc8 <UART_SetConfig+0x2c4>
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da6:	d006      	beq.n	8003db6 <UART_SetConfig+0x2b2>
 8003da8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dac:	d009      	beq.n	8003dc2 <UART_SetConfig+0x2be>
 8003dae:	e00b      	b.n	8003dc8 <UART_SetConfig+0x2c4>
 8003db0:	2300      	movs	r3, #0
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e04d      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003db6:	2302      	movs	r3, #2
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e04a      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e047      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e044      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	bf00      	nop
 8003dce:	e040      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a11      	ldr	r2, [pc, #68]	; (8003e1c <UART_SetConfig+0x318>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d139      	bne.n	8003e4e <UART_SetConfig+0x34a>
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <UART_SetConfig+0x2fc>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de8:	d027      	beq.n	8003e3a <UART_SetConfig+0x336>
 8003dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dee:	d817      	bhi.n	8003e20 <UART_SetConfig+0x31c>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01c      	beq.n	8003e2e <UART_SetConfig+0x32a>
 8003df4:	e027      	b.n	8003e46 <UART_SetConfig+0x342>
 8003df6:	bf00      	nop
 8003df8:	efff69f3 	.word	0xefff69f3
 8003dfc:	40011000 	.word	0x40011000
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40004400 	.word	0x40004400
 8003e08:	40004800 	.word	0x40004800
 8003e0c:	40004c00 	.word	0x40004c00
 8003e10:	40005000 	.word	0x40005000
 8003e14:	40011400 	.word	0x40011400
 8003e18:	40007800 	.word	0x40007800
 8003e1c:	40007c00 	.word	0x40007c00
 8003e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e24:	d006      	beq.n	8003e34 <UART_SetConfig+0x330>
 8003e26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e2a:	d009      	beq.n	8003e40 <UART_SetConfig+0x33c>
 8003e2c:	e00b      	b.n	8003e46 <UART_SetConfig+0x342>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e00e      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003e34:	2302      	movs	r3, #2
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e00b      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e008      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003e40:	2308      	movs	r3, #8
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e005      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003e46:	2310      	movs	r3, #16
 8003e48:	77fb      	strb	r3, [r7, #31]
 8003e4a:	bf00      	nop
 8003e4c:	e001      	b.n	8003e52 <UART_SetConfig+0x34e>
 8003e4e:	2310      	movs	r3, #16
 8003e50:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e5a:	d17f      	bne.n	8003f5c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003e5c:	7ffb      	ldrb	r3, [r7, #31]
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d85c      	bhi.n	8003f1c <UART_SetConfig+0x418>
 8003e62:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <UART_SetConfig+0x364>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	08003ead 	.word	0x08003ead
 8003e70:	08003ecd 	.word	0x08003ecd
 8003e74:	08003f1d 	.word	0x08003f1d
 8003e78:	08003ee5 	.word	0x08003ee5
 8003e7c:	08003f1d 	.word	0x08003f1d
 8003e80:	08003f1d 	.word	0x08003f1d
 8003e84:	08003f1d 	.word	0x08003f1d
 8003e88:	08003f05 	.word	0x08003f05
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e8c:	f7ff f99e 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8003e90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	005a      	lsls	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	441a      	add	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	61bb      	str	r3, [r7, #24]
        break;
 8003eaa:	e03a      	b.n	8003f22 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eac:	f7ff f9a2 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8003eb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	005a      	lsls	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	441a      	add	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	61bb      	str	r3, [r7, #24]
        break;
 8003eca:	e02a      	b.n	8003f22 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	085a      	lsrs	r2, r3, #1
 8003ed2:	4b5f      	ldr	r3, [pc, #380]	; (8004050 <UART_SetConfig+0x54c>)
 8003ed4:	4413      	add	r3, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6852      	ldr	r2, [r2, #4]
 8003eda:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	61bb      	str	r3, [r7, #24]
        break;
 8003ee2:	e01e      	b.n	8003f22 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee4:	f7ff f88e 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8003ee8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	005a      	lsls	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	441a      	add	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	61bb      	str	r3, [r7, #24]
        break;
 8003f02:	e00e      	b.n	8003f22 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	61bb      	str	r3, [r7, #24]
        break;
 8003f1a:	e002      	b.n	8003f22 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	75fb      	strb	r3, [r7, #23]
        break;
 8003f20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b0f      	cmp	r3, #15
 8003f26:	d916      	bls.n	8003f56 <UART_SetConfig+0x452>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2e:	d212      	bcs.n	8003f56 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f023 030f 	bic.w	r3, r3, #15
 8003f38:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	897b      	ldrh	r3, [r7, #10]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	897a      	ldrh	r2, [r7, #10]
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	e070      	b.n	8004038 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	75fb      	strb	r3, [r7, #23]
 8003f5a:	e06d      	b.n	8004038 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003f5c:	7ffb      	ldrb	r3, [r7, #31]
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d859      	bhi.n	8004016 <UART_SetConfig+0x512>
 8003f62:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <UART_SetConfig+0x464>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003fab 	.word	0x08003fab
 8003f70:	08003fc9 	.word	0x08003fc9
 8003f74:	08004017 	.word	0x08004017
 8003f78:	08003fe1 	.word	0x08003fe1
 8003f7c:	08004017 	.word	0x08004017
 8003f80:	08004017 	.word	0x08004017
 8003f84:	08004017 	.word	0x08004017
 8003f88:	08003fff 	.word	0x08003fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7ff f91e 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8003f90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	085a      	lsrs	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	441a      	add	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	61bb      	str	r3, [r7, #24]
        break;
 8003fa8:	e038      	b.n	800401c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003faa:	f7ff f923 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8003fae:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	085a      	lsrs	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	441a      	add	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	61bb      	str	r3, [r7, #24]
        break;
 8003fc6:	e029      	b.n	800401c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	085a      	lsrs	r2, r3, #1
 8003fce:	4b21      	ldr	r3, [pc, #132]	; (8004054 <UART_SetConfig+0x550>)
 8003fd0:	4413      	add	r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6852      	ldr	r2, [r2, #4]
 8003fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	61bb      	str	r3, [r7, #24]
        break;
 8003fde:	e01d      	b.n	800401c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe0:	f7ff f810 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8003fe4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	085a      	lsrs	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	441a      	add	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	61bb      	str	r3, [r7, #24]
        break;
 8003ffc:	e00e      	b.n	800401c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004010:	b29b      	uxth	r3, r3
 8004012:	61bb      	str	r3, [r7, #24]
        break;
 8004014:	e002      	b.n	800401c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	75fb      	strb	r3, [r7, #23]
        break;
 800401a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b0f      	cmp	r3, #15
 8004020:	d908      	bls.n	8004034 <UART_SetConfig+0x530>
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004028:	d204      	bcs.n	8004034 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	e001      	b.n	8004038 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	01e84800 	.word	0x01e84800
 8004054:	00f42400 	.word	0x00f42400

08004058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01a      	beq.n	800416e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004156:	d10a      	bne.n	800416e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	605a      	str	r2, [r3, #4]
  }
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80041aa:	f7fc fe0b 	bl	8000dc4 <HAL_GetTick>
 80041ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d10e      	bne.n	80041dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f82a 	bl	8004226 <UART_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e020      	b.n	800421e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d10e      	bne.n	8004208 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f814 	bl	8004226 <UART_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e00a      	b.n	800421e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	4613      	mov	r3, r2
 8004234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004236:	e05d      	b.n	80042f4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d059      	beq.n	80042f4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004240:	f7fc fdc0 	bl	8000dc4 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	429a      	cmp	r2, r3
 800424e:	d302      	bcc.n	8004256 <UART_WaitOnFlagUntilTimeout+0x30>
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d11b      	bne.n	800428e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004264:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0201 	bic.w	r2, r2, #1
 8004274:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e042      	b.n	8004314 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02b      	beq.n	80042f4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042aa:	d123      	bne.n	80042f4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e00f      	b.n	8004314 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69da      	ldr	r2, [r3, #28]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	429a      	cmp	r2, r3
 8004310:	d092      	beq.n	8004238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800431c:	b084      	sub	sp, #16
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	f107 001c 	add.w	r0, r7, #28
 800432a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	2b01      	cmp	r3, #1
 8004332:	d120      	bne.n	8004376 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <USB_CoreInit+0xac>)
 8004346:	4013      	ands	r3, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa52 	bl	8004814 <USB_CoreReset>
 8004370:	4603      	mov	r3, r0
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e010      	b.n	8004398 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fa46 	bl	8004814 <USB_CoreReset>
 8004388:	4603      	mov	r3, r0
 800438a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10b      	bne.n	80043b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f043 0206 	orr.w	r2, r3, #6
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f043 0220 	orr.w	r2, r3, #32
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043c2:	b004      	add	sp, #16
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	ffbdffbf 	.word	0xffbdffbf

080043cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 0201 	bic.w	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d106      	bne.n	800441a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60da      	str	r2, [r3, #12]
 8004418:	e00b      	b.n	8004432 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d106      	bne.n	800442e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]
 800442c:	e001      	b.n	8004432 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e003      	b.n	800443a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004432:	2032      	movs	r0, #50	; 0x32
 8004434:	f7fc fcd2 	bl	8000ddc <HAL_Delay>

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004444:	b084      	sub	sp, #16
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	e009      	b.n	8004478 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	3340      	adds	r3, #64	; 0x40
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	2200      	movs	r2, #0
 8004470:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	3301      	adds	r3, #1
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b0e      	cmp	r3, #14
 800447c:	d9f2      	bls.n	8004464 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800447e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11c      	bne.n	80044be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004492:	f043 0302 	orr.w	r3, r3, #2
 8004496:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e005      	b.n	80044ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044d0:	461a      	mov	r2, r3
 80044d2:	2300      	movs	r3, #0
 80044d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044dc:	4619      	mov	r1, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e4:	461a      	mov	r2, r3
 80044e6:	680b      	ldr	r3, [r1, #0]
 80044e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d10c      	bne.n	800450a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d104      	bne.n	8004500 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044f6:	2100      	movs	r1, #0
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f959 	bl	80047b0 <USB_SetDevSpeed>
 80044fe:	e018      	b.n	8004532 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004500:	2101      	movs	r1, #1
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f954 	bl	80047b0 <USB_SetDevSpeed>
 8004508:	e013      	b.n	8004532 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	2b03      	cmp	r3, #3
 800450e:	d10c      	bne.n	800452a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004516:	2100      	movs	r1, #0
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f949 	bl	80047b0 <USB_SetDevSpeed>
 800451e:	e008      	b.n	8004532 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004520:	2101      	movs	r1, #1
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f944 	bl	80047b0 <USB_SetDevSpeed>
 8004528:	e003      	b.n	8004532 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800452a:	2103      	movs	r1, #3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f93f 	bl	80047b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004532:	2110      	movs	r1, #16
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f8f3 	bl	8004720 <USB_FlushTxFifo>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f911 	bl	800476c <USB_FlushRxFifo>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455a:	461a      	mov	r2, r3
 800455c:	2300      	movs	r3, #0
 800455e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	461a      	mov	r2, r3
 8004568:	2300      	movs	r3, #0
 800456a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	461a      	mov	r2, r3
 8004574:	2300      	movs	r3, #0
 8004576:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	e043      	b.n	8004606 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004594:	d118      	bne.n	80045c8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a8:	461a      	mov	r2, r3
 80045aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	e013      	b.n	80045da <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	461a      	mov	r2, r3
 80045c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e008      	b.n	80045da <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	2300      	movs	r3, #0
 80045d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	461a      	mov	r2, r3
 80045e8:	2300      	movs	r3, #0
 80045ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	461a      	mov	r2, r3
 80045fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	3301      	adds	r3, #1
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	429a      	cmp	r2, r3
 800460c:	d3b7      	bcc.n	800457e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	e043      	b.n	800469c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800462a:	d118      	bne.n	800465e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463e:	461a      	mov	r2, r3
 8004640:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e013      	b.n	8004670 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004654:	461a      	mov	r2, r3
 8004656:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	e008      	b.n	8004670 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	2300      	movs	r3, #0
 800466e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	461a      	mov	r2, r3
 800467e:	2300      	movs	r3, #0
 8004680:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468e:	461a      	mov	r2, r3
 8004690:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004694:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3301      	adds	r3, #1
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d3b7      	bcc.n	8004614 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f043 0210 	orr.w	r2, r3, #16
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699a      	ldr	r2, [r3, #24]
 80046dc:	4b0e      	ldr	r3, [pc, #56]	; (8004718 <USB_DevInit+0x2d4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f043 0208 	orr.w	r2, r3, #8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d105      	bne.n	8004708 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699a      	ldr	r2, [r3, #24]
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <USB_DevInit+0x2d8>)
 8004702:	4313      	orrs	r3, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004708:	7dfb      	ldrb	r3, [r7, #23]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004714:	b004      	add	sp, #16
 8004716:	4770      	bx	lr
 8004718:	803c3800 	.word	0x803c3800
 800471c:	40000004 	.word	0x40000004

08004720 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	019b      	lsls	r3, r3, #6
 8004732:	f043 0220 	orr.w	r2, r3, #32
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3301      	adds	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4a09      	ldr	r2, [pc, #36]	; (8004768 <USB_FlushTxFifo+0x48>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e006      	b.n	800475a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b20      	cmp	r3, #32
 8004756:	d0f0      	beq.n	800473a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	00030d40 	.word	0x00030d40

0800476c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2210      	movs	r2, #16
 800477c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3301      	adds	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4a09      	ldr	r2, [pc, #36]	; (80047ac <USB_FlushRxFifo+0x40>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d901      	bls.n	8004790 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e006      	b.n	800479e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b10      	cmp	r3, #16
 800479a:	d0f0      	beq.n	800477e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	00030d40 	.word	0x00030d40

080047b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	68f9      	ldr	r1, [r7, #12]
 80047cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047fc:	f043 0302 	orr.w	r3, r3, #2
 8004800:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004802:	2003      	movs	r0, #3
 8004804:	f7fc faea 	bl	8000ddc <HAL_Delay>

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3301      	adds	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <USB_CoreReset+0x64>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e01b      	b.n	800486a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	daf2      	bge.n	8004820 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f043 0201 	orr.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3301      	adds	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a09      	ldr	r2, [pc, #36]	; (8004878 <USB_CoreReset+0x64>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e006      	b.n	800486a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d0f0      	beq.n	800484a <USB_CoreReset+0x36>

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	00030d40 	.word	0x00030d40

0800487c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8004882:	4b8d      	ldr	r3, [pc, #564]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 8004884:	220a      	movs	r2, #10
 8004886:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 20;
 8004888:	4b8b      	ldr	r3, [pc, #556]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 800488a:	2214      	movs	r2, #20
 800488c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 30;
 800488e:	4b8a      	ldr	r3, [pc, #552]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 8004890:	221e      	movs	r2, #30
 8004892:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 40;
 8004894:	4b88      	ldr	r3, [pc, #544]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 8004896:	2228      	movs	r2, #40	; 0x28
 8004898:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 800489a:	4b88      	ldr	r3, [pc, #544]	; (8004abc <MX_LWIP_Init+0x240>)
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 80048a0:	4b86      	ldr	r3, [pc, #536]	; (8004abc <MX_LWIP_Init+0x240>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 80048a6:	4b85      	ldr	r3, [pc, #532]	; (8004abc <MX_LWIP_Init+0x240>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80048ac:	4b83      	ldr	r3, [pc, #524]	; (8004abc <MX_LWIP_Init+0x240>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80048b2:	4b83      	ldr	r3, [pc, #524]	; (8004ac0 <MX_LWIP_Init+0x244>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80048b8:	4b81      	ldr	r3, [pc, #516]	; (8004ac0 <MX_LWIP_Init+0x244>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80048be:	4b80      	ldr	r3, [pc, #512]	; (8004ac0 <MX_LWIP_Init+0x244>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80048c4:	4b7e      	ldr	r3, [pc, #504]	; (8004ac0 <MX_LWIP_Init+0x244>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80048ca:	f001 fb1f 	bl	8005f0c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80048ce:	4b7a      	ldr	r3, [pc, #488]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	061a      	lsls	r2, r3, #24
 80048d4:	4b78      	ldr	r3, [pc, #480]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	041b      	lsls	r3, r3, #16
 80048da:	431a      	orrs	r2, r3
 80048dc:	4b76      	ldr	r3, [pc, #472]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 80048de:	789b      	ldrb	r3, [r3, #2]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	4313      	orrs	r3, r2
 80048e4:	4a74      	ldr	r2, [pc, #464]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 80048e6:	78d2      	ldrb	r2, [r2, #3]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	061a      	lsls	r2, r3, #24
 80048ec:	4b72      	ldr	r3, [pc, #456]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	0619      	lsls	r1, r3, #24
 80048f2:	4b71      	ldr	r3, [pc, #452]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 80048f4:	785b      	ldrb	r3, [r3, #1]
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	4319      	orrs	r1, r3
 80048fa:	4b6f      	ldr	r3, [pc, #444]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 80048fc:	789b      	ldrb	r3, [r3, #2]
 80048fe:	021b      	lsls	r3, r3, #8
 8004900:	430b      	orrs	r3, r1
 8004902:	496d      	ldr	r1, [pc, #436]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 8004904:	78c9      	ldrb	r1, [r1, #3]
 8004906:	430b      	orrs	r3, r1
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800490e:	431a      	orrs	r2, r3
 8004910:	4b69      	ldr	r3, [pc, #420]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	0619      	lsls	r1, r3, #24
 8004916:	4b68      	ldr	r3, [pc, #416]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 8004918:	785b      	ldrb	r3, [r3, #1]
 800491a:	041b      	lsls	r3, r3, #16
 800491c:	4319      	orrs	r1, r3
 800491e:	4b66      	ldr	r3, [pc, #408]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 8004920:	789b      	ldrb	r3, [r3, #2]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	430b      	orrs	r3, r1
 8004926:	4964      	ldr	r1, [pc, #400]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 8004928:	78c9      	ldrb	r1, [r1, #3]
 800492a:	430b      	orrs	r3, r1
 800492c:	0a1b      	lsrs	r3, r3, #8
 800492e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004932:	431a      	orrs	r2, r3
 8004934:	4b60      	ldr	r3, [pc, #384]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	0619      	lsls	r1, r3, #24
 800493a:	4b5f      	ldr	r3, [pc, #380]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	4319      	orrs	r1, r3
 8004942:	4b5d      	ldr	r3, [pc, #372]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 8004944:	789b      	ldrb	r3, [r3, #2]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	430b      	orrs	r3, r1
 800494a:	495b      	ldr	r1, [pc, #364]	; (8004ab8 <MX_LWIP_Init+0x23c>)
 800494c:	78c9      	ldrb	r1, [r1, #3]
 800494e:	430b      	orrs	r3, r1
 8004950:	0e1b      	lsrs	r3, r3, #24
 8004952:	4313      	orrs	r3, r2
 8004954:	4a5b      	ldr	r2, [pc, #364]	; (8004ac4 <MX_LWIP_Init+0x248>)
 8004956:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004958:	4b58      	ldr	r3, [pc, #352]	; (8004abc <MX_LWIP_Init+0x240>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	061a      	lsls	r2, r3, #24
 800495e:	4b57      	ldr	r3, [pc, #348]	; (8004abc <MX_LWIP_Init+0x240>)
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	431a      	orrs	r2, r3
 8004966:	4b55      	ldr	r3, [pc, #340]	; (8004abc <MX_LWIP_Init+0x240>)
 8004968:	789b      	ldrb	r3, [r3, #2]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	4313      	orrs	r3, r2
 800496e:	4a53      	ldr	r2, [pc, #332]	; (8004abc <MX_LWIP_Init+0x240>)
 8004970:	78d2      	ldrb	r2, [r2, #3]
 8004972:	4313      	orrs	r3, r2
 8004974:	061a      	lsls	r2, r3, #24
 8004976:	4b51      	ldr	r3, [pc, #324]	; (8004abc <MX_LWIP_Init+0x240>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	0619      	lsls	r1, r3, #24
 800497c:	4b4f      	ldr	r3, [pc, #316]	; (8004abc <MX_LWIP_Init+0x240>)
 800497e:	785b      	ldrb	r3, [r3, #1]
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	4319      	orrs	r1, r3
 8004984:	4b4d      	ldr	r3, [pc, #308]	; (8004abc <MX_LWIP_Init+0x240>)
 8004986:	789b      	ldrb	r3, [r3, #2]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	430b      	orrs	r3, r1
 800498c:	494b      	ldr	r1, [pc, #300]	; (8004abc <MX_LWIP_Init+0x240>)
 800498e:	78c9      	ldrb	r1, [r1, #3]
 8004990:	430b      	orrs	r3, r1
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004998:	431a      	orrs	r2, r3
 800499a:	4b48      	ldr	r3, [pc, #288]	; (8004abc <MX_LWIP_Init+0x240>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	0619      	lsls	r1, r3, #24
 80049a0:	4b46      	ldr	r3, [pc, #280]	; (8004abc <MX_LWIP_Init+0x240>)
 80049a2:	785b      	ldrb	r3, [r3, #1]
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	4319      	orrs	r1, r3
 80049a8:	4b44      	ldr	r3, [pc, #272]	; (8004abc <MX_LWIP_Init+0x240>)
 80049aa:	789b      	ldrb	r3, [r3, #2]
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	430b      	orrs	r3, r1
 80049b0:	4942      	ldr	r1, [pc, #264]	; (8004abc <MX_LWIP_Init+0x240>)
 80049b2:	78c9      	ldrb	r1, [r1, #3]
 80049b4:	430b      	orrs	r3, r1
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80049bc:	431a      	orrs	r2, r3
 80049be:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <MX_LWIP_Init+0x240>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	0619      	lsls	r1, r3, #24
 80049c4:	4b3d      	ldr	r3, [pc, #244]	; (8004abc <MX_LWIP_Init+0x240>)
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	041b      	lsls	r3, r3, #16
 80049ca:	4319      	orrs	r1, r3
 80049cc:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <MX_LWIP_Init+0x240>)
 80049ce:	789b      	ldrb	r3, [r3, #2]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	430b      	orrs	r3, r1
 80049d4:	4939      	ldr	r1, [pc, #228]	; (8004abc <MX_LWIP_Init+0x240>)
 80049d6:	78c9      	ldrb	r1, [r1, #3]
 80049d8:	430b      	orrs	r3, r1
 80049da:	0e1b      	lsrs	r3, r3, #24
 80049dc:	4313      	orrs	r3, r2
 80049de:	4a3a      	ldr	r2, [pc, #232]	; (8004ac8 <MX_LWIP_Init+0x24c>)
 80049e0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80049e2:	4b37      	ldr	r3, [pc, #220]	; (8004ac0 <MX_LWIP_Init+0x244>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	061a      	lsls	r2, r3, #24
 80049e8:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <MX_LWIP_Init+0x244>)
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	041b      	lsls	r3, r3, #16
 80049ee:	431a      	orrs	r2, r3
 80049f0:	4b33      	ldr	r3, [pc, #204]	; (8004ac0 <MX_LWIP_Init+0x244>)
 80049f2:	789b      	ldrb	r3, [r3, #2]
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	4313      	orrs	r3, r2
 80049f8:	4a31      	ldr	r2, [pc, #196]	; (8004ac0 <MX_LWIP_Init+0x244>)
 80049fa:	78d2      	ldrb	r2, [r2, #3]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	061a      	lsls	r2, r3, #24
 8004a00:	4b2f      	ldr	r3, [pc, #188]	; (8004ac0 <MX_LWIP_Init+0x244>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	0619      	lsls	r1, r3, #24
 8004a06:	4b2e      	ldr	r3, [pc, #184]	; (8004ac0 <MX_LWIP_Init+0x244>)
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	041b      	lsls	r3, r3, #16
 8004a0c:	4319      	orrs	r1, r3
 8004a0e:	4b2c      	ldr	r3, [pc, #176]	; (8004ac0 <MX_LWIP_Init+0x244>)
 8004a10:	789b      	ldrb	r3, [r3, #2]
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	430b      	orrs	r3, r1
 8004a16:	492a      	ldr	r1, [pc, #168]	; (8004ac0 <MX_LWIP_Init+0x244>)
 8004a18:	78c9      	ldrb	r1, [r1, #3]
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a22:	431a      	orrs	r2, r3
 8004a24:	4b26      	ldr	r3, [pc, #152]	; (8004ac0 <MX_LWIP_Init+0x244>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	0619      	lsls	r1, r3, #24
 8004a2a:	4b25      	ldr	r3, [pc, #148]	; (8004ac0 <MX_LWIP_Init+0x244>)
 8004a2c:	785b      	ldrb	r3, [r3, #1]
 8004a2e:	041b      	lsls	r3, r3, #16
 8004a30:	4319      	orrs	r1, r3
 8004a32:	4b23      	ldr	r3, [pc, #140]	; (8004ac0 <MX_LWIP_Init+0x244>)
 8004a34:	789b      	ldrb	r3, [r3, #2]
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	4921      	ldr	r1, [pc, #132]	; (8004ac0 <MX_LWIP_Init+0x244>)
 8004a3c:	78c9      	ldrb	r1, [r1, #3]
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	0a1b      	lsrs	r3, r3, #8
 8004a42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a46:	431a      	orrs	r2, r3
 8004a48:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <MX_LWIP_Init+0x244>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	0619      	lsls	r1, r3, #24
 8004a4e:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <MX_LWIP_Init+0x244>)
 8004a50:	785b      	ldrb	r3, [r3, #1]
 8004a52:	041b      	lsls	r3, r3, #16
 8004a54:	4319      	orrs	r1, r3
 8004a56:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <MX_LWIP_Init+0x244>)
 8004a58:	789b      	ldrb	r3, [r3, #2]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	4918      	ldr	r1, [pc, #96]	; (8004ac0 <MX_LWIP_Init+0x244>)
 8004a60:	78c9      	ldrb	r1, [r1, #3]
 8004a62:	430b      	orrs	r3, r1
 8004a64:	0e1b      	lsrs	r3, r3, #24
 8004a66:	4313      	orrs	r3, r2
 8004a68:	4a18      	ldr	r2, [pc, #96]	; (8004acc <MX_LWIP_Init+0x250>)
 8004a6a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004a6c:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <MX_LWIP_Init+0x254>)
 8004a6e:	9302      	str	r3, [sp, #8]
 8004a70:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <MX_LWIP_Init+0x258>)
 8004a72:	9301      	str	r3, [sp, #4]
 8004a74:	2300      	movs	r3, #0
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	4b14      	ldr	r3, [pc, #80]	; (8004acc <MX_LWIP_Init+0x250>)
 8004a7a:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <MX_LWIP_Init+0x24c>)
 8004a7c:	4911      	ldr	r1, [pc, #68]	; (8004ac4 <MX_LWIP_Init+0x248>)
 8004a7e:	4816      	ldr	r0, [pc, #88]	; (8004ad8 <MX_LWIP_Init+0x25c>)
 8004a80:	f001 feea 	bl	8006858 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004a84:	4814      	ldr	r0, [pc, #80]	; (8004ad8 <MX_LWIP_Init+0x25c>)
 8004a86:	f002 f899 	bl	8006bbc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <MX_LWIP_Init+0x25c>)
 8004a8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a90:	089b      	lsrs	r3, r3, #2
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004a9c:	480e      	ldr	r0, [pc, #56]	; (8004ad8 <MX_LWIP_Init+0x25c>)
 8004a9e:	f002 f89d 	bl	8006bdc <netif_set_up>
 8004aa2:	e002      	b.n	8004aaa <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004aa4:	480c      	ldr	r0, [pc, #48]	; (8004ad8 <MX_LWIP_Init+0x25c>)
 8004aa6:	f002 f905 	bl	8006cb4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004aaa:	490c      	ldr	r1, [pc, #48]	; (8004adc <MX_LWIP_Init+0x260>)
 8004aac:	480a      	ldr	r0, [pc, #40]	; (8004ad8 <MX_LWIP_Init+0x25c>)
 8004aae:	f002 f933 	bl	8006d18 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004ab2:	bf00      	nop
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000b18 	.word	0x20000b18
 8004abc:	20000b14 	.word	0x20000b14
 8004ac0:	20000ad8 	.word	0x20000ad8
 8004ac4:	20000b10 	.word	0x20000b10
 8004ac8:	20000b1c 	.word	0x20000b1c
 8004acc:	20000b20 	.word	0x20000b20
 8004ad0:	080103b1 	.word	0x080103b1
 8004ad4:	08005099 	.word	0x08005099
 8004ad8:	20000adc 	.word	0x20000adc
 8004adc:	08005105 	.word	0x08005105

08004ae0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004ae4:	4803      	ldr	r0, [pc, #12]	; (8004af4 <MX_LWIP_Process+0x14>)
 8004ae6:	f000 fab7 	bl	8005058 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004aea:	f009 f881 	bl	800dbf0 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000adc 	.word	0x20000adc

08004af8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08e      	sub	sp, #56	; 0x38
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a4e      	ldr	r2, [pc, #312]	; (8004c50 <HAL_ETH_MspInit+0x158>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	f040 8096 	bne.w	8004c48 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004b1c:	4b4d      	ldr	r3, [pc, #308]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	4a4c      	ldr	r2, [pc, #304]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b26:	6313      	str	r3, [r2, #48]	; 0x30
 8004b28:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b30:	623b      	str	r3, [r7, #32]
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	4b47      	ldr	r3, [pc, #284]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	4a46      	ldr	r2, [pc, #280]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b40:	4b44      	ldr	r3, [pc, #272]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	4b41      	ldr	r3, [pc, #260]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	4a40      	ldr	r2, [pc, #256]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b56:	6313      	str	r3, [r2, #48]	; 0x30
 8004b58:	4b3e      	ldr	r3, [pc, #248]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b64:	4b3b      	ldr	r3, [pc, #236]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	4a3a      	ldr	r2, [pc, #232]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b6a:	f043 0304 	orr.w	r3, r3, #4
 8004b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b70:	4b38      	ldr	r3, [pc, #224]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b7c:	4b35      	ldr	r3, [pc, #212]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	4a34      	ldr	r2, [pc, #208]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6313      	str	r3, [r2, #48]	; 0x30
 8004b88:	4b32      	ldr	r3, [pc, #200]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b94:	4b2f      	ldr	r3, [pc, #188]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	4a2e      	ldr	r2, [pc, #184]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004b9a:	f043 0302 	orr.w	r3, r3, #2
 8004b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba0:	4b2c      	ldr	r3, [pc, #176]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bac:	4b29      	ldr	r3, [pc, #164]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb8:	4b26      	ldr	r3, [pc, #152]	; (8004c54 <HAL_ETH_MspInit+0x15c>)
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004bc4:	2332      	movs	r3, #50	; 0x32
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004bd4:	230b      	movs	r3, #11
 8004bd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bdc:	4619      	mov	r1, r3
 8004bde:	481e      	ldr	r0, [pc, #120]	; (8004c58 <HAL_ETH_MspInit+0x160>)
 8004be0:	f7fd fb0a 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004be4:	2386      	movs	r3, #134	; 0x86
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be8:	2302      	movs	r3, #2
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004bf4:	230b      	movs	r3, #11
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4817      	ldr	r0, [pc, #92]	; (8004c5c <HAL_ETH_MspInit+0x164>)
 8004c00:	f7fd fafa 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c12:	2303      	movs	r3, #3
 8004c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c16:	230b      	movs	r3, #11
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c1e:	4619      	mov	r1, r3
 8004c20:	480f      	ldr	r0, [pc, #60]	; (8004c60 <HAL_ETH_MspInit+0x168>)
 8004c22:	f7fd fae9 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004c26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c34:	2303      	movs	r3, #3
 8004c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c38:	230b      	movs	r3, #11
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c40:	4619      	mov	r1, r3
 8004c42:	4808      	ldr	r0, [pc, #32]	; (8004c64 <HAL_ETH_MspInit+0x16c>)
 8004c44:	f7fd fad8 	bl	80021f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004c48:	bf00      	nop
 8004c4a:	3738      	adds	r7, #56	; 0x38
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40028000 	.word	0x40028000
 8004c54:	40023800 	.word	0x40023800
 8004c58:	40020800 	.word	0x40020800
 8004c5c:	40020000 	.word	0x40020000
 8004c60:	40020400 	.word	0x40020400
 8004c64:	40021800 	.word	0x40021800

08004c68 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004c74:	4b49      	ldr	r3, [pc, #292]	; (8004d9c <low_level_init+0x134>)
 8004c76:	4a4a      	ldr	r2, [pc, #296]	; (8004da0 <low_level_init+0x138>)
 8004c78:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004c7a:	4b48      	ldr	r3, [pc, #288]	; (8004d9c <low_level_init+0x134>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004c80:	4b46      	ldr	r3, [pc, #280]	; (8004d9c <low_level_init+0x134>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004c86:	2300      	movs	r3, #0
 8004c88:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004c8e:	23e1      	movs	r3, #225	; 0xe1
 8004c90:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004c92:	2300      	movs	r3, #0
 8004c94:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004c96:	2300      	movs	r3, #0
 8004c98:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004c9e:	4a3f      	ldr	r2, [pc, #252]	; (8004d9c <low_level_init+0x134>)
 8004ca0:	f107 0308 	add.w	r3, r7, #8
 8004ca4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004ca6:	4b3d      	ldr	r3, [pc, #244]	; (8004d9c <low_level_init+0x134>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004cac:	4b3b      	ldr	r3, [pc, #236]	; (8004d9c <low_level_init+0x134>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004cb2:	4b3a      	ldr	r3, [pc, #232]	; (8004d9c <low_level_init+0x134>)
 8004cb4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004cb8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004cba:	4838      	ldr	r0, [pc, #224]	; (8004d9c <low_level_init+0x134>)
 8004cbc:	f7fc f996 	bl	8000fec <HAL_ETH_Init>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d108      	bne.n	8004cdc <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004cd0:	f043 0304 	orr.w	r3, r3, #4
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004cdc:	2304      	movs	r3, #4
 8004cde:	4a31      	ldr	r2, [pc, #196]	; (8004da4 <low_level_init+0x13c>)
 8004ce0:	4931      	ldr	r1, [pc, #196]	; (8004da8 <low_level_init+0x140>)
 8004ce2:	482e      	ldr	r0, [pc, #184]	; (8004d9c <low_level_init+0x134>)
 8004ce4:	f7fc fb1e 	bl	8001324 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004ce8:	2304      	movs	r3, #4
 8004cea:	4a30      	ldr	r2, [pc, #192]	; (8004dac <low_level_init+0x144>)
 8004cec:	4930      	ldr	r1, [pc, #192]	; (8004db0 <low_level_init+0x148>)
 8004cee:	482b      	ldr	r0, [pc, #172]	; (8004d9c <low_level_init+0x134>)
 8004cf0:	f7fc fb81 	bl	80013f6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2206      	movs	r2, #6
 8004cf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004cfc:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <low_level_init+0x134>)
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	781a      	ldrb	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004d08:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <low_level_init+0x134>)
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	785a      	ldrb	r2, [r3, #1]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004d14:	4b21      	ldr	r3, [pc, #132]	; (8004d9c <low_level_init+0x134>)
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	789a      	ldrb	r2, [r3, #2]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004d20:	4b1e      	ldr	r3, [pc, #120]	; (8004d9c <low_level_init+0x134>)
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	78da      	ldrb	r2, [r3, #3]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <low_level_init+0x134>)
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	791a      	ldrb	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004d38:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <low_level_init+0x134>)
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	795a      	ldrb	r2, [r3, #5]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004d4a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d52:	f043 030a 	orr.w	r3, r3, #10
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004d5e:	480f      	ldr	r0, [pc, #60]	; (8004d9c <low_level_init+0x134>)
 8004d60:	f7fc fdf2 	bl	8001948 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004d64:	f107 0310 	add.w	r3, r7, #16
 8004d68:	461a      	mov	r2, r3
 8004d6a:	211d      	movs	r1, #29
 8004d6c:	480b      	ldr	r0, [pc, #44]	; (8004d9c <low_level_init+0x134>)
 8004d6e:	f7fc fd1d 	bl	80017ac <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f043 030b 	orr.w	r3, r3, #11
 8004d78:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	211d      	movs	r1, #29
 8004d80:	4806      	ldr	r0, [pc, #24]	; (8004d9c <low_level_init+0x134>)
 8004d82:	f7fc fd7b 	bl	800187c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004d86:	f107 0310 	add.w	r3, r7, #16
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	211d      	movs	r1, #29
 8004d8e:	4803      	ldr	r0, [pc, #12]	; (8004d9c <low_level_init+0x134>)
 8004d90:	f7fc fd0c 	bl	80017ac <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004d94:	bf00      	nop
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	200023f4 	.word	0x200023f4
 8004da0:	40028000 	.word	0x40028000
 8004da4:	2000243c 	.word	0x2000243c
 8004da8:	20000b24 	.word	0x20000b24
 8004dac:	20000ba4 	.word	0x20000ba4
 8004db0:	20002374 	.word	0x20002374

08004db4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	; 0x28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004dbe:	4b4b      	ldr	r3, [pc, #300]	; (8004eec <low_level_output+0x138>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004dd6:	4b45      	ldr	r3, [pc, #276]	; (8004eec <low_level_output+0x138>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	623b      	str	r3, [r7, #32]
 8004de4:	e05a      	b.n	8004e9c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	da03      	bge.n	8004df6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004dee:	23f8      	movs	r3, #248	; 0xf8
 8004df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004df4:	e05c      	b.n	8004eb0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	895b      	ldrh	r3, [r3, #10]
 8004dfa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004e00:	e02f      	b.n	8004e62 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	18d0      	adds	r0, r2, r3
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	18d1      	adds	r1, r2, r3
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f00b fbd2 	bl	80105c2 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	da03      	bge.n	8004e34 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004e2c:	23f8      	movs	r3, #248	; 0xf8
 8004e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004e32:	e03d      	b.n	8004eb0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004e44:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004e50:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004e5c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4413      	add	r3, r2
 8004e68:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d8c8      	bhi.n	8004e02 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	18d0      	adds	r0, r2, r3
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4619      	mov	r1, r3
 8004e82:	f00b fb9e 	bl	80105c2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1a1      	bne.n	8004de6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004ea2:	6979      	ldr	r1, [r7, #20]
 8004ea4:	4811      	ldr	r0, [pc, #68]	; (8004eec <low_level_output+0x138>)
 8004ea6:	f7fc fb13 	bl	80014d0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004eb0:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <low_level_output+0x138>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	f241 0314 	movw	r3, #4116	; 0x1014
 8004eb8:	4413      	add	r3, r2
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00d      	beq.n	8004ee0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004ec4:	4b09      	ldr	r3, [pc, #36]	; (8004eec <low_level_output+0x138>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	f241 0314 	movw	r3, #4116	; 0x1014
 8004ecc:	4413      	add	r3, r2
 8004ece:	2220      	movs	r2, #32
 8004ed0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004ed2:	4b06      	ldr	r3, [pc, #24]	; (8004eec <low_level_output+0x138>)
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	f241 0304 	movw	r3, #4100	; 0x1004
 8004eda:	4413      	add	r3, r2
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004ee0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3728      	adds	r7, #40	; 0x28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	200023f4 	.word	0x200023f4

08004ef0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08c      	sub	sp, #48	; 0x30
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004f14:	484f      	ldr	r0, [pc, #316]	; (8005054 <low_level_input+0x164>)
 8004f16:	f7fc fbc5 	bl	80016a4 <HAL_ETH_GetReceivedFrame>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <low_level_input+0x34>

    return NULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e092      	b.n	800504a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004f24:	4b4b      	ldr	r3, [pc, #300]	; (8005054 <low_level_input+0x164>)
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f28:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004f2a:	4b4a      	ldr	r3, [pc, #296]	; (8005054 <low_level_input+0x164>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004f30:	89fb      	ldrh	r3, [r7, #14]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d007      	beq.n	8004f46 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004f36:	89fb      	ldrh	r3, [r7, #14]
 8004f38:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f001 ff86 	bl	8006e50 <pbuf_alloc>
 8004f44:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d04b      	beq.n	8004fe4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004f4c:	4b41      	ldr	r3, [pc, #260]	; (8005054 <low_level_input+0x164>)
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f5a:	e040      	b.n	8004fde <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	895b      	ldrh	r3, [r3, #10]
 8004f60:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004f66:	e021      	b.n	8004fac <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	18d0      	adds	r0, r2, r3
 8004f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	18d1      	adds	r1, r2, r3
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f00b fb1f 	bl	80105c2 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	4413      	add	r3, r2
 8004f96:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004f9a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004fa6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d8d6      	bhi.n	8004f68 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	18d0      	adds	r0, r2, r3
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	f00b faf9 	bl	80105c2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1bb      	bne.n	8004f5c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <low_level_input+0x164>)
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004fea:	2300      	movs	r3, #0
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	e00b      	b.n	8005008 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	3301      	adds	r3, #1
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	4b12      	ldr	r3, [pc, #72]	; (8005054 <low_level_input+0x164>)
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	429a      	cmp	r2, r3
 8005010:	d3ee      	bcc.n	8004ff0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <low_level_input+0x164>)
 8005014:	2200      	movs	r2, #0
 8005016:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005018:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <low_level_input+0x164>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005020:	4413      	add	r3, r2
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00d      	beq.n	8005048 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <low_level_input+0x164>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	f241 0314 	movw	r3, #4116	; 0x1014
 8005034:	4413      	add	r3, r2
 8005036:	2280      	movs	r2, #128	; 0x80
 8005038:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800503a:	4b06      	ldr	r3, [pc, #24]	; (8005054 <low_level_input+0x164>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	f241 0308 	movw	r3, #4104	; 0x1008
 8005042:	4413      	add	r3, r2
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800504a:	4618      	mov	r0, r3
 800504c:	3730      	adds	r7, #48	; 0x30
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200023f4 	.word	0x200023f4

08005058 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ff45 	bl	8004ef0 <low_level_input>
 8005066:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d010      	beq.n	8005090 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	4798      	blx	r3
 8005078:	4603      	mov	r3, r0
 800507a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800507c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d006      	beq.n	8005092 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f002 f9c3 	bl	8007410 <pbuf_free>
    p = NULL;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	e000      	b.n	8005092 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005090:	bf00      	nop
  }
}
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <ethernetif_init+0x1c>
 80050a6:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <ethernetif_init+0x48>)
 80050a8:	f240 220f 	movw	r2, #527	; 0x20f
 80050ac:	490d      	ldr	r1, [pc, #52]	; (80050e4 <ethernetif_init+0x4c>)
 80050ae:	480e      	ldr	r0, [pc, #56]	; (80050e8 <ethernetif_init+0x50>)
 80050b0:	f00b fa9a 	bl	80105e8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2273      	movs	r2, #115	; 0x73
 80050b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2274      	movs	r2, #116	; 0x74
 80050c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <ethernetif_init+0x54>)
 80050c8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <ethernetif_init+0x58>)
 80050ce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fdc9 	bl	8004c68 <low_level_init>

  return ERR_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	08011480 	.word	0x08011480
 80050e4:	0801149c 	.word	0x0801149c
 80050e8:	080114ac 	.word	0x080114ac
 80050ec:	0800e881 	.word	0x0800e881
 80050f0:	08004db5 	.word	0x08004db5

080050f4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80050f8:	f7fb fe64 	bl	8000dc4 <HAL_GetTick>
 80050fc:	4603      	mov	r3, r0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800511a:	089b      	lsrs	r3, r3, #2
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d05d      	beq.n	80051e2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005126:	4b34      	ldr	r3, [pc, #208]	; (80051f8 <ethernetif_update_config+0xf4>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d03f      	beq.n	80051ae <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800512e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005132:	2100      	movs	r1, #0
 8005134:	4830      	ldr	r0, [pc, #192]	; (80051f8 <ethernetif_update_config+0xf4>)
 8005136:	f7fc fba1 	bl	800187c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800513a:	f7fb fe43 	bl	8000dc4 <HAL_GetTick>
 800513e:	4603      	mov	r3, r0
 8005140:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005142:	f107 0308 	add.w	r3, r7, #8
 8005146:	461a      	mov	r2, r3
 8005148:	2101      	movs	r1, #1
 800514a:	482b      	ldr	r0, [pc, #172]	; (80051f8 <ethernetif_update_config+0xf4>)
 800514c:	f7fc fb2e 	bl	80017ac <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005150:	f7fb fe38 	bl	8000dc4 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800515e:	d828      	bhi.n	80051b2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0eb      	beq.n	8005142 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800516a:	f107 0308 	add.w	r3, r7, #8
 800516e:	461a      	mov	r2, r3
 8005170:	211f      	movs	r1, #31
 8005172:	4821      	ldr	r0, [pc, #132]	; (80051f8 <ethernetif_update_config+0xf4>)
 8005174:	f7fc fb1a 	bl	80017ac <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b00      	cmp	r3, #0
 8005180:	d004      	beq.n	800518c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005182:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <ethernetif_update_config+0xf4>)
 8005184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005188:	60da      	str	r2, [r3, #12]
 800518a:	e002      	b.n	8005192 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800518c:	4b1a      	ldr	r3, [pc, #104]	; (80051f8 <ethernetif_update_config+0xf4>)
 800518e:	2200      	movs	r2, #0
 8005190:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800519c:	4b16      	ldr	r3, [pc, #88]	; (80051f8 <ethernetif_update_config+0xf4>)
 800519e:	2200      	movs	r2, #0
 80051a0:	609a      	str	r2, [r3, #8]
 80051a2:	e016      	b.n	80051d2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80051a4:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <ethernetif_update_config+0xf4>)
 80051a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	e011      	b.n	80051d2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80051ae:	bf00      	nop
 80051b0:	e000      	b.n	80051b4 <ethernetif_update_config+0xb0>
          goto error;
 80051b2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80051b4:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <ethernetif_update_config+0xf4>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	08db      	lsrs	r3, r3, #3
 80051ba:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80051bc:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <ethernetif_update_config+0xf4>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80051c4:	4313      	orrs	r3, r2
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	2100      	movs	r1, #0
 80051cc:	480a      	ldr	r0, [pc, #40]	; (80051f8 <ethernetif_update_config+0xf4>)
 80051ce:	f7fc fb55 	bl	800187c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80051d2:	2100      	movs	r1, #0
 80051d4:	4808      	ldr	r0, [pc, #32]	; (80051f8 <ethernetif_update_config+0xf4>)
 80051d6:	f7fc fc15 	bl	8001a04 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80051da:	4807      	ldr	r0, [pc, #28]	; (80051f8 <ethernetif_update_config+0xf4>)
 80051dc:	f7fc fbb4 	bl	8001948 <HAL_ETH_Start>
 80051e0:	e002      	b.n	80051e8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80051e2:	4805      	ldr	r0, [pc, #20]	; (80051f8 <ethernetif_update_config+0xf4>)
 80051e4:	f7fc fbdf 	bl	80019a6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f807 	bl	80051fc <ethernetif_notify_conn_changed>
}
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	200023f4 	.word	0x200023f4

080051fc <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <fs_open+0x16>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d102      	bne.n	800522c <fs_open+0x1c>
    return ERR_ARG;
 8005226:	f06f 030f 	mvn.w	r3, #15
 800522a:	e028      	b.n	800527e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800522c:	4b16      	ldr	r3, [pc, #88]	; (8005288 <fs_open+0x78>)
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e020      	b.n	8005274 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	4619      	mov	r1, r3
 8005238:	6838      	ldr	r0, [r7, #0]
 800523a:	f7fb f801 	bl	8000240 <strcmp>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d114      	bne.n	800526e <fs_open+0x5e>
      file->data = (const char *)f->data;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	7c1a      	ldrb	r2, [r3, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	e007      	b.n	800527e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1db      	bne.n	8005232 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800527a:	f06f 0305 	mvn.w	r3, #5
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	08014290 	.word	0x08014290

0800528c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	1ad3      	subs	r3, r2, r3
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80052c6:	222c      	movs	r2, #44	; 0x2c
 80052c8:	2100      	movs	r1, #0
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f00b f984 	bl	80105d8 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80052de:	202c      	movs	r0, #44	; 0x2c
 80052e0:	f001 f8ce 	bl	8006480 <mem_malloc>
 80052e4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <http_state_alloc+0x1a>
    http_state_init(ret);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff ffe6 	bl	80052be <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80052f2:	687b      	ldr	r3, [r7, #4]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d007      	beq.n	800531c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff ffbb 	bl	800528c <fs_close>
    hs->handle = NULL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	4618      	mov	r0, r3
 800532a:	f002 f871 	bl	8007410 <pbuf_free>
    hs->req = NULL;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <http_state_free+0x1a>
    http_state_eof(hs);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ffd6 	bl	80052fc <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 ff2f 	bl	80061b4 <mem_free>
  }
}
 8005356:	bf00      	nop
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <http_write+0x22>
 8005374:	4b2c      	ldr	r3, [pc, #176]	; (8005428 <http_write+0xc8>)
 8005376:	f240 2219 	movw	r2, #537	; 0x219
 800537a:	492c      	ldr	r1, [pc, #176]	; (800542c <http_write+0xcc>)
 800537c:	482c      	ldr	r0, [pc, #176]	; (8005430 <http_write+0xd0>)
 800537e:	f00b f933 	bl	80105e8 <iprintf>
  len = *length;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8005388:	8afb      	ldrh	r3, [r7, #22]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <http_write+0x32>
    return ERR_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	e045      	b.n	800541e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005398:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800539a:	8aba      	ldrh	r2, [r7, #20]
 800539c:	8afb      	ldrh	r3, [r7, #22]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d201      	bcs.n	80053a6 <http_write+0x46>
    len = max_len;
 80053a2:	8abb      	ldrh	r3, [r7, #20]
 80053a4:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80053ae:	8afa      	ldrh	r2, [r7, #22]
 80053b0:	8abb      	ldrh	r3, [r7, #20]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d901      	bls.n	80053ba <http_write+0x5a>
    len = max_len;
 80053b6:	8abb      	ldrh	r3, [r7, #20]
 80053b8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	8afa      	ldrh	r2, [r7, #22]
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f006 fd9b 	bl	800befc <tcp_write>
 80053c6:	4603      	mov	r3, r0
 80053c8:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 80053ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d2:	d10f      	bne.n	80053f4 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d902      	bls.n	80053ee <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 80053e8:	2301      	movs	r3, #1
 80053ea:	82fb      	strh	r3, [r7, #22]
 80053ec:	e002      	b.n	80053f4 <http_write+0x94>
      } else {
        len /= 2;
 80053ee:	8afb      	ldrh	r3, [r7, #22]
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 80053f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d102      	bne.n	8005404 <http_write+0xa4>
 80053fe:	8afb      	ldrh	r3, [r7, #22]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d8da      	bhi.n	80053ba <http_write+0x5a>

  if (err == ERR_OK) {
 8005404:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d103      	bne.n	8005414 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8afa      	ldrh	r2, [r7, #22]
 8005410:	801a      	strh	r2, [r3, #0]
 8005412:	e002      	b.n	800541a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800541a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	08011514 	.word	0x08011514
 800542c:	0801154c 	.word	0x0801154c
 8005430:	0801155c 	.word	0x0801155c

08005434 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8005442:	2100      	movs	r1, #0
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f003 fe1d 	bl	8009084 <tcp_arg>
  altcp_recv(pcb, NULL);
 800544a:	2100      	movs	r1, #0
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f003 fe2b 	bl	80090a8 <tcp_recv>
  altcp_err(pcb, NULL);
 8005452:	2100      	movs	r1, #0
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f003 fe6b 	bl	8009130 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800545a:	2200      	movs	r2, #0
 800545c:	2100      	movs	r1, #0
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f003 fea0 	bl	80091a4 <tcp_poll>
  altcp_sent(pcb, NULL);
 8005464:	2100      	movs	r1, #0
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f003 fe40 	bl	80090ec <tcp_sent>
  if (hs != NULL) {
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8005472:	68b8      	ldr	r0, [r7, #8]
 8005474:	f7ff ff62 	bl	800533c <http_state_free>
  }

  if (abort_conn) {
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d004      	beq.n	8005488 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f002 fd46 	bl	8007f10 <tcp_abort>
    return ERR_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e00f      	b.n	80054a8 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f002 fc57 	bl	8007d3c <tcp_close>
 800548e:	4603      	mov	r3, r0
 8005490:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8005492:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800549a:	2204      	movs	r2, #4
 800549c:	4904      	ldr	r1, [pc, #16]	; (80054b0 <http_close_or_abort_conn+0x7c>)
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f003 fe80 	bl	80091a4 <tcp_poll>
  }
  return err;
 80054a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	08005b77 	.word	0x08005b77

080054b4 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80054be:	2200      	movs	r2, #0
 80054c0:	6839      	ldr	r1, [r7, #0]
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff ffb6 	bl	8005434 <http_close_or_abort_conn>
 80054c8:	4603      	mov	r3, r0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff ffe8 	bl	80054b4 <http_close_conn>
  }
}
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d105      	bne.n	800550a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80054fe:	6839      	ldr	r1, [r7, #0]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff ffe6 	bl	80054d2 <http_eof>
    return 0;
 8005506:	2300      	movs	r3, #0
 8005508:	e016      	b.n	8005538 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff fec6 	bl	80052a0 <fs_bytes_left>
 8005514:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	dc05      	bgt.n	8005528 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800551c:	6839      	ldr	r1, [r7, #0]
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff ffd7 	bl	80054d2 <http_eof>
    return 0;
 8005524:	2300      	movs	r3, #0
 8005526:	e007      	b.n	8005538 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <http_check_eof+0x54>)
 800552a:	f240 429d 	movw	r2, #1181	; 0x49d
 800552e:	4905      	ldr	r1, [pc, #20]	; (8005544 <http_check_eof+0x58>)
 8005530:	4805      	ldr	r0, [pc, #20]	; (8005548 <http_check_eof+0x5c>)
 8005532:	f00b f859 	bl	80105e8 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8005536:	2301      	movs	r3, #1
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	08011514 	.word	0x08011514
 8005544:	08011584 	.word	0x08011584
 8005548:	0801155c 	.word	0x0801155c

0800554c <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005562:	4293      	cmp	r3, r2
 8005564:	d803      	bhi.n	800556e <http_send_data_nonssi+0x22>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	b29b      	uxth	r3, r3
 800556c:	e001      	b.n	8005572 <http_send_data_nonssi+0x26>
 800556e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005572:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	6999      	ldr	r1, [r3, #24]
 8005578:	f107 020c 	add.w	r2, r7, #12
 800557c:	2300      	movs	r3, #0
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff feee 	bl	8005360 <http_write>
 8005584:	4603      	mov	r3, r0
 8005586:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10d      	bne.n	80055ac <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005590:	2301      	movs	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	89ba      	ldrh	r2, [r7, #12]
 800559a:	441a      	add	r2, r3
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	89ba      	ldrh	r2, [r7, #12]
 80055a6:	1a9a      	subs	r2, r3, r2
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80055c0:	2300      	movs	r3, #0
 80055c2:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <http_send+0x18>
    return 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e025      	b.n	800561a <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d108      	bne.n	80055e8 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff ff87 	bl	80054ec <http_check_eof>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <http_send+0x32>
      return 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	e018      	b.n	800561a <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff ffae 	bl	800554c <http_send_data_nonssi>
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10d      	bne.n	8005618 <http_send+0x62>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fe4d 	bl	80052a0 <fs_bytes_left>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	dc05      	bgt.n	8005618 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ff5f 	bl	80054d2 <http_eof>
    return 0;
 8005614:	2300      	movs	r3, #0
 8005616:	e000      	b.n	800561a <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <http_get_404_file+0x80>)
 8005632:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f7ff fde7 	bl	8005210 <fs_open>
 8005642:	4603      	mov	r3, r0
 8005644:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8005646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d024      	beq.n	8005698 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <http_get_404_file+0x84>)
 8005652:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f7ff fdd7 	bl	8005210 <fs_open>
 8005662:	4603      	mov	r3, r0
 8005664:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d014      	beq.n	8005698 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	4a0e      	ldr	r2, [pc, #56]	; (80056ac <http_get_404_file+0x88>)
 8005672:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f7ff fdc7 	bl	8005210 <fs_open>
 8005682:	4603      	mov	r3, r0
 8005684:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]
        return NULL;
 8005694:	2300      	movs	r3, #0
 8005696:	e000      	b.n	800569a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005698:	687b      	ldr	r3, [r7, #4]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	080115bc 	.word	0x080115bc
 80056a8:	080115c8 	.word	0x080115c8
 80056ac:	080115d4 	.word	0x080115d4

080056b0 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08e      	sub	sp, #56	; 0x38
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <http_parse_request+0x24>
 80056c6:	4b65      	ldr	r3, [pc, #404]	; (800585c <http_parse_request+0x1ac>)
 80056c8:	f240 72ae 	movw	r2, #1966	; 0x7ae
 80056cc:	4964      	ldr	r1, [pc, #400]	; (8005860 <http_parse_request+0x1b0>)
 80056ce:	4865      	ldr	r0, [pc, #404]	; (8005864 <http_parse_request+0x1b4>)
 80056d0:	f00a ff8a 	bl	80105e8 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <http_parse_request+0x38>
 80056da:	4b60      	ldr	r3, [pc, #384]	; (800585c <http_parse_request+0x1ac>)
 80056dc:	f240 72af 	movw	r2, #1967	; 0x7af
 80056e0:	4961      	ldr	r1, [pc, #388]	; (8005868 <http_parse_request+0x1b8>)
 80056e2:	4860      	ldr	r0, [pc, #384]	; (8005864 <http_parse_request+0x1b4>)
 80056e4:	f00a ff80 	bl	80105e8 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d103      	bne.n	80056f8 <http_parse_request+0x48>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80056f8:	f06f 0307 	mvn.w	r3, #7
 80056fc:	e0aa      	b.n	8005854 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d103      	bne.n	800570e <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570a:	621a      	str	r2, [r3, #32]
 800570c:	e005      	b.n	800571a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005714:	4618      	mov	r0, r3
 8005716:	f001 ff3d 	bl	8007594 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800571a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800571c:	f001 ff18 	bl	8007550 <pbuf_ref>

  if (hs->req->next != NULL) {
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d012      	beq.n	8005750 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	891b      	ldrh	r3, [r3, #8]
 8005730:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005734:	4293      	cmp	r3, r2
 8005736:	bf28      	it	cs
 8005738:	4613      	movcs	r3, r2
 800573a:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6a18      	ldr	r0, [r3, #32]
 8005740:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005742:	2300      	movs	r3, #0
 8005744:	4949      	ldr	r1, [pc, #292]	; (800586c <http_parse_request+0x1bc>)
 8005746:	f002 f84d 	bl	80077e4 <pbuf_copy_partial>
    data = httpd_req_buf;
 800574a:	4b48      	ldr	r3, [pc, #288]	; (800586c <http_parse_request+0x1bc>)
 800574c:	637b      	str	r3, [r7, #52]	; 0x34
 800574e:	e005      	b.n	800575c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	895b      	ldrh	r3, [r3, #10]
 800575a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800575c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800575e:	2b06      	cmp	r3, #6
 8005760:	d963      	bls.n	800582a <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8005762:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005764:	461a      	mov	r2, r3
 8005766:	4942      	ldr	r1, [pc, #264]	; (8005870 <http_parse_request+0x1c0>)
 8005768:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800576a:	f000 fb99 	bl	8005ea0 <lwip_strnstr>
 800576e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d059      	beq.n	800582a <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800577a:	2204      	movs	r2, #4
 800577c:	493d      	ldr	r1, [pc, #244]	; (8005874 <http_parse_request+0x1c4>)
 800577e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005780:	f00a ff8b 	bl	801069a <strncmp>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d117      	bne.n	80057ba <http_parse_request+0x10a>
        sp1 = data + 3;
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578c:	3303      	adds	r3, #3
 800578e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	3301      	adds	r3, #1
 8005794:	461a      	mov	r2, r3
 8005796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	b29b      	uxth	r3, r3
 800579c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	3301      	adds	r3, #1
 80057a6:	8b7a      	ldrh	r2, [r7, #26]
 80057a8:	4933      	ldr	r1, [pc, #204]	; (8005878 <http_parse_request+0x1c8>)
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fb78 	bl	8005ea0 <lwip_strnstr>
 80057b0:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d111      	bne.n	80057dc <http_parse_request+0x12c>
 80057b8:	e006      	b.n	80057c8 <http_parse_request+0x118>
        data[4] = 0;
 80057ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057bc:	3304      	adds	r3, #4
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 80057c2:	f06f 030f 	mvn.w	r3, #15
 80057c6:	e045      	b.n	8005854 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	3301      	adds	r3, #1
 80057cc:	8b7a      	ldrh	r2, [r7, #26]
 80057ce:	4928      	ldr	r1, [pc, #160]	; (8005870 <http_parse_request+0x1c0>)
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fb65 	bl	8005ea0 <lwip_strnstr>
 80057d6:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 80057d8:	2301      	movs	r3, #1
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	3201      	adds	r2, #1
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01e      	beq.n	800582a <http_parse_request+0x17a>
 80057ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d91a      	bls.n	800582a <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80057f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80057f6:	461a      	mov	r2, r3
 80057f8:	4920      	ldr	r1, [pc, #128]	; (800587c <http_parse_request+0x1cc>)
 80057fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057fc:	f000 fb50 	bl	8005ea0 <lwip_strnstr>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d011      	beq.n	800582a <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3301      	adds	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8005812:	8b3b      	ldrh	r3, [r7, #24]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4413      	add	r3, r2
 8005818:	2200      	movs	r2, #0
 800581a:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800581c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800581e:	6979      	ldr	r1, [r7, #20]
 8005820:	68b8      	ldr	r0, [r7, #8]
 8005822:	f000 f82d 	bl	8005880 <http_find_file>
 8005826:	4603      	mov	r3, r0
 8005828:	e014      	b.n	8005854 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	4618      	mov	r0, r3
 8005830:	f001 fe76 	bl	8007520 <pbuf_clen>
 8005834:	4603      	mov	r3, r0
 8005836:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	891b      	ldrh	r3, [r3, #8]
 800583e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005842:	d205      	bcs.n	8005850 <http_parse_request+0x1a0>
 8005844:	8a7b      	ldrh	r3, [r7, #18]
 8005846:	2b05      	cmp	r3, #5
 8005848:	d802      	bhi.n	8005850 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800584a:	f06f 0304 	mvn.w	r3, #4
 800584e:	e001      	b.n	8005854 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8005850:	f06f 030f 	mvn.w	r3, #15
  }
}
 8005854:	4618      	mov	r0, r3
 8005856:	3738      	adds	r7, #56	; 0x38
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	08011514 	.word	0x08011514
 8005860:	080115e0 	.word	0x080115e0
 8005864:	0801155c 	.word	0x0801155c
 8005868:	080115ec 	.word	0x080115ec
 800586c:	20000098 	.word	0x20000098
 8005870:	080115f8 	.word	0x080115f8
 8005874:	080115fc 	.word	0x080115fc
 8005878:	08011604 	.word	0x08011604
 800587c:	08011608 	.word	0x08011608

08005880 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b092      	sub	sp, #72	; 0x48
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8005890:	2300      	movs	r3, #0
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4618      	mov	r0, r3
 800589e:	f7fa fcd9 	bl	8000254 <strlen>
 80058a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d06b      	beq.n	8005982 <http_find_file+0x102>
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	3b01      	subs	r3, #1
 80058b0:	4413      	add	r3, r2
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b2f      	cmp	r3, #47	; 0x2f
 80058b6:	d164      	bne.n	8005982 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80058b8:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80058ba:	4a53      	ldr	r2, [pc, #332]	; (8005a08 <http_find_file+0x188>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d102      	bne.n	80058c6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d15d      	bne.n	8005982 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	3b01      	subs	r3, #1
 80058ca:	2b3f      	cmp	r3, #63	; 0x3f
 80058cc:	bf28      	it	cs
 80058ce:	233f      	movcs	r3, #63	; 0x3f
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058dc:	4619      	mov	r1, r3
 80058de:	484a      	ldr	r0, [pc, #296]	; (8005a08 <http_find_file+0x188>)
 80058e0:	f00a fe6f 	bl	80105c2 <memcpy>
      http_uri_buf[copy_len] = 0;
 80058e4:	4a48      	ldr	r2, [pc, #288]	; (8005a08 <http_find_file+0x188>)
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	4413      	add	r3, r2
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80058ee:	2300      	movs	r3, #0
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f2:	e043      	b.n	800597c <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d028      	beq.n	800594c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005900:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01e      	beq.n	8005946 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8005908:	4a40      	ldr	r2, [pc, #256]	; (8005a0c <http_find_file+0x18c>)
 800590a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005910:	4618      	mov	r0, r3
 8005912:	f7fa fc9f 	bl	8000254 <strlen>
 8005916:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	4293      	cmp	r3, r2
 800591e:	bf28      	it	cs
 8005920:	4613      	movcs	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	4a38      	ldr	r2, [pc, #224]	; (8005a08 <http_find_file+0x188>)
 8005928:	1898      	adds	r0, r3, r2
 800592a:	4a38      	ldr	r2, [pc, #224]	; (8005a0c <http_find_file+0x18c>)
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4619      	mov	r1, r3
 8005936:	f00a fe44 	bl	80105c2 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800593a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	4413      	add	r3, r2
 8005940:	4a31      	ldr	r2, [pc, #196]	; (8005a08 <http_find_file+0x188>)
 8005942:	2100      	movs	r1, #0
 8005944:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8005946:	4b30      	ldr	r3, [pc, #192]	; (8005a08 <http_find_file+0x188>)
 8005948:	633b      	str	r3, [r7, #48]	; 0x30
 800594a:	e004      	b.n	8005956 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800594c:	4a2f      	ldr	r2, [pc, #188]	; (8005a0c <http_find_file+0x18c>)
 800594e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005950:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005954:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff fc58 	bl	8005210 <fs_open>
 8005960:	4603      	mov	r3, r0
 8005962:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8005964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d104      	bne.n	8005976 <http_find_file+0xf6>
        uri = file_name;
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8005974:	e005      	b.n	8005982 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005978:	3301      	adds	r3, #1
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800597c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597e:	2b04      	cmp	r3, #4
 8005980:	d9b8      	bls.n	80058f4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	2b00      	cmp	r3, #0
 8005986:	d124      	bne.n	80059d2 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	213f      	movs	r1, #63	; 0x3f
 800598c:	4618      	mov	r0, r3
 800598e:	f00a fe77 	bl	8010680 <strchr>
 8005992:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8005994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
      params++;
 80059a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a2:	3301      	adds	r3, #1
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	4611      	mov	r1, r2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fc2f 	bl	8005210 <fs_open>
 80059b2:	4603      	mov	r3, r0
 80059b4:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80059b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d102      	bne.n	80059c4 <http_find_file+0x144>
      file = &hs->file_handle;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80059c2:	e006      	b.n	80059d2 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 80059c4:	f107 0308 	add.w	r3, r7, #8
 80059c8:	4619      	mov	r1, r3
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f7ff fe2a 	bl	8005624 <http_get_404_file>
 80059d0:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80059d8:	f107 0308 	add.w	r3, r7, #8
 80059dc:	4619      	mov	r1, r3
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff fe20 	bl	8005624 <http_get_404_file>
 80059e4:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	4613      	mov	r3, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f809 	bl	8005a10 <http_init_file>
 80059fe:	4603      	mov	r3, r0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3740      	adds	r7, #64	; 0x40
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000498 	.word	0x20000498
 8005a0c:	080142a4 	.word	0x080142a4

08005a10 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d05d      	beq.n	8005ae0 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d106      	bne.n	8005a3a <http_init_file+0x2a>
 8005a2c:	4b35      	ldr	r3, [pc, #212]	; (8005b04 <http_init_file+0xf4>)
 8005a2e:	f640 120b 	movw	r2, #2315	; 0x90b
 8005a32:	4935      	ldr	r1, [pc, #212]	; (8005b08 <http_init_file+0xf8>)
 8005a34:	4835      	ldr	r0, [pc, #212]	; (8005b0c <http_init_file+0xfc>)
 8005a36:	f00a fdd7 	bl	80105e8 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	da06      	bge.n	8005a5e <http_init_file+0x4e>
 8005a50:	4b2c      	ldr	r3, [pc, #176]	; (8005b04 <http_init_file+0xf4>)
 8005a52:	f640 1234 	movw	r2, #2356	; 0x934
 8005a56:	492e      	ldr	r1, [pc, #184]	; (8005b10 <http_init_file+0x100>)
 8005a58:	482c      	ldr	r0, [pc, #176]	; (8005b0c <http_init_file+0xfc>)
 8005a5a:	f00a fdc5 	bl	80105e8 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	461a      	mov	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	7c1b      	ldrb	r3, [r3, #16]
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <http_init_file+0x7c>
 8005a7e:	4b21      	ldr	r3, [pc, #132]	; (8005b04 <http_init_file+0xf4>)
 8005a80:	f640 1244 	movw	r2, #2372	; 0x944
 8005a84:	4923      	ldr	r1, [pc, #140]	; (8005b14 <http_init_file+0x104>)
 8005a86:	4821      	ldr	r0, [pc, #132]	; (8005b0c <http_init_file+0xfc>)
 8005a88:	f00a fdae 	bl	80105e8 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d033      	beq.n	8005afa <http_init_file+0xea>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	7c1b      	ldrb	r3, [r3, #16]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d02c      	beq.n	8005afa <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6998      	ldr	r0, [r3, #24]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	491b      	ldr	r1, [pc, #108]	; (8005b18 <http_init_file+0x108>)
 8005aac:	f000 f9f8 	bl	8005ea0 <lwip_strnstr>
 8005ab0:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d020      	beq.n	8005afa <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	3304      	adds	r3, #4
 8005abc:	461a      	mov	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699a      	ldr	r2, [r3, #24]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	441a      	add	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad2      	subs	r2, r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	625a      	str	r2, [r3, #36]	; 0x24
 8005ade:	e00c      	b.n	8005afa <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	08011514 	.word	0x08011514
 8005b08:	08011610 	.word	0x08011610
 8005b0c:	0801155c 	.word	0x0801155c
 8005b10:	08011624 	.word	0x08011624
 8005b14:	08011644 	.word	0x08011644
 8005b18:	08011608 	.word	0x08011608

08005b1c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <http_err+0x1c>
    http_state_free(hs);
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff fc02 	bl	800533c <http_state_free>
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <http_sent+0x1c>
    return ERR_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e008      	b.n	8005b6e <http_sent+0x2e>
  }

  hs->retries = 0;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8005b64:	6979      	ldr	r1, [r7, #20]
 8005b66:	68b8      	ldr	r0, [r7, #8]
 8005b68:	f7ff fd25 	bl	80055b6 <http_send>

  return ERR_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d107      	bne.n	8005b9a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	6838      	ldr	r0, [r7, #0]
 8005b8e:	f7ff fc91 	bl	80054b4 <http_close_conn>
 8005b92:	4603      	mov	r3, r0
 8005b94:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e021      	b.n	8005bde <http_poll+0x68>
  } else {
    hs->retries++;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d105      	bne.n	8005bc0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8005bb4:	68f9      	ldr	r1, [r7, #12]
 8005bb6:	6838      	ldr	r0, [r7, #0]
 8005bb8:	f7ff fc7c 	bl	80054b4 <http_close_conn>
      return ERR_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e00e      	b.n	8005bde <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d009      	beq.n	8005bdc <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8005bc8:	68f9      	ldr	r1, [r7, #12]
 8005bca:	6838      	ldr	r0, [r7, #0]
 8005bcc:	f7ff fcf3 	bl	80055b6 <http_send>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8005bd6:	6838      	ldr	r0, [r7, #0]
 8005bd8:	f006 ff7c 	bl	800cad4 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8005bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d105      	bne.n	8005c0e <http_recv+0x26>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <http_recv+0x26>
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d111      	bne.n	8005c32 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	891b      	ldrh	r3, [r3, #8]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	68b8      	ldr	r0, [r7, #8]
 8005c1c:	f002 fb52 	bl	80082c4 <tcp_recved>
      pbuf_free(p);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 fbf5 	bl	8007410 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8005c26:	6979      	ldr	r1, [r7, #20]
 8005c28:	68b8      	ldr	r0, [r7, #8]
 8005c2a:	f7ff fc43 	bl	80054b4 <http_close_conn>
    return ERR_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e055      	b.n	8005cde <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	891b      	ldrh	r3, [r3, #8]
 8005c36:	4619      	mov	r1, r3
 8005c38:	68b8      	ldr	r0, [r7, #8]
 8005c3a:	f002 fb43 	bl	80082c4 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d147      	bne.n	8005cd6 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff fd30 	bl	80056b0 <http_parse_request>
 8005c50:	4603      	mov	r3, r0
 8005c52:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8005c54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d015      	beq.n	8005c88 <http_recv+0xa0>
 8005c5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c60:	f113 0f05 	cmn.w	r3, #5
 8005c64:	d010      	beq.n	8005c88 <http_recv+0xa0>
 8005c66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c6a:	f113 0f10 	cmn.w	r3, #16
 8005c6e:	d00b      	beq.n	8005c88 <http_recv+0xa0>
 8005c70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c74:	f113 0f08 	cmn.w	r3, #8
 8005c78:	d006      	beq.n	8005c88 <http_recv+0xa0>
 8005c7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ce8 <http_recv+0x100>)
 8005c7c:	f640 2205 	movw	r2, #2565	; 0xa05
 8005c80:	491a      	ldr	r1, [pc, #104]	; (8005cec <http_recv+0x104>)
 8005c82:	481b      	ldr	r0, [pc, #108]	; (8005cf0 <http_recv+0x108>)
 8005c84:	f00a fcb0 	bl	80105e8 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8005c88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c8c:	f113 0f05 	cmn.w	r3, #5
 8005c90:	d00b      	beq.n	8005caa <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <http_recv+0xc2>
          pbuf_free(hs->req);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 fbb6 	bl	8007410 <pbuf_free>
          hs->req = NULL;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 fbb0 	bl	8007410 <pbuf_free>
      if (parsed == ERR_OK) {
 8005cb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8005cb8:	6979      	ldr	r1, [r7, #20]
 8005cba:	68b8      	ldr	r0, [r7, #8]
 8005cbc:	f7ff fc7b 	bl	80055b6 <http_send>
 8005cc0:	e00c      	b.n	8005cdc <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8005cc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005cc6:	f113 0f10 	cmn.w	r3, #16
 8005cca:	d107      	bne.n	8005cdc <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8005ccc:	6979      	ldr	r1, [r7, #20]
 8005cce:	68b8      	ldr	r0, [r7, #8]
 8005cd0:	f7ff fbf0 	bl	80054b4 <http_close_conn>
 8005cd4:	e002      	b.n	8005cdc <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f001 fb9a 	bl	8007410 <pbuf_free>
    }
  }
  return ERR_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	08011514 	.word	0x08011514
 8005cec:	08011670 	.word	0x08011670
 8005cf0:	0801155c 	.word	0x0801155c

08005cf4 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8005d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <http_accept+0x1c>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d102      	bne.n	8005d16 <http_accept+0x22>
    return ERR_VAL;
 8005d10:	f06f 0305 	mvn.w	r3, #5
 8005d14:	e025      	b.n	8005d62 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005d16:	2101      	movs	r1, #1
 8005d18:	68b8      	ldr	r0, [r7, #8]
 8005d1a:	f002 ffb3 	bl	8008c84 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8005d1e:	f7ff fadb 	bl	80052d8 <http_state_alloc>
 8005d22:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d102      	bne.n	8005d30 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8005d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2e:	e018      	b.n	8005d62 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8005d36:	6979      	ldr	r1, [r7, #20]
 8005d38:	68b8      	ldr	r0, [r7, #8]
 8005d3a:	f003 f9a3 	bl	8009084 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8005d3e:	490b      	ldr	r1, [pc, #44]	; (8005d6c <http_accept+0x78>)
 8005d40:	68b8      	ldr	r0, [r7, #8]
 8005d42:	f003 f9b1 	bl	80090a8 <tcp_recv>
  altcp_err(pcb, http_err);
 8005d46:	490a      	ldr	r1, [pc, #40]	; (8005d70 <http_accept+0x7c>)
 8005d48:	68b8      	ldr	r0, [r7, #8]
 8005d4a:	f003 f9f1 	bl	8009130 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005d4e:	2204      	movs	r2, #4
 8005d50:	4908      	ldr	r1, [pc, #32]	; (8005d74 <http_accept+0x80>)
 8005d52:	68b8      	ldr	r0, [r7, #8]
 8005d54:	f003 fa26 	bl	80091a4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8005d58:	4907      	ldr	r1, [pc, #28]	; (8005d78 <http_accept+0x84>)
 8005d5a:	68b8      	ldr	r0, [r7, #8]
 8005d5c:	f003 f9c6 	bl	80090ec <tcp_sent>

  return ERR_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	08005be9 	.word	0x08005be9
 8005d70:	08005b1d 	.word	0x08005b1d
 8005d74:	08005b77 	.word	0x08005b77
 8005d78:	08005b41 	.word	0x08005b41

08005d7c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d029      	beq.n	8005de2 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005d8e:	2101      	movs	r1, #1
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f002 ff77 	bl	8008c84 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8005d96:	887b      	ldrh	r3, [r7, #2]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4914      	ldr	r1, [pc, #80]	; (8005dec <httpd_init_pcb+0x70>)
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f002 f8c3 	bl	8007f28 <tcp_bind>
 8005da2:	4603      	mov	r3, r0
 8005da4:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8005da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d006      	beq.n	8005dbc <httpd_init_pcb+0x40>
 8005dae:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <httpd_init_pcb+0x74>)
 8005db0:	f640 2257 	movw	r2, #2647	; 0xa57
 8005db4:	490f      	ldr	r1, [pc, #60]	; (8005df4 <httpd_init_pcb+0x78>)
 8005db6:	4810      	ldr	r0, [pc, #64]	; (8005df8 <httpd_init_pcb+0x7c>)
 8005db8:	f00a fc16 	bl	80105e8 <iprintf>
    pcb = altcp_listen(pcb);
 8005dbc:	21ff      	movs	r1, #255	; 0xff
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f002 f96a 	bl	8008098 <tcp_listen_with_backlog>
 8005dc4:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d106      	bne.n	8005dda <httpd_init_pcb+0x5e>
 8005dcc:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <httpd_init_pcb+0x74>)
 8005dce:	f640 2259 	movw	r2, #2649	; 0xa59
 8005dd2:	490a      	ldr	r1, [pc, #40]	; (8005dfc <httpd_init_pcb+0x80>)
 8005dd4:	4808      	ldr	r0, [pc, #32]	; (8005df8 <httpd_init_pcb+0x7c>)
 8005dd6:	f00a fc07 	bl	80105e8 <iprintf>
    altcp_accept(pcb, http_accept);
 8005dda:	4909      	ldr	r1, [pc, #36]	; (8005e00 <httpd_init_pcb+0x84>)
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f003 f9c9 	bl	8009174 <tcp_accept>
  }
}
 8005de2:	bf00      	nop
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	0801439c 	.word	0x0801439c
 8005df0:	08011514 	.word	0x08011514
 8005df4:	0801169c 	.word	0x0801169c
 8005df8:	0801155c 	.word	0x0801155c
 8005dfc:	080116b8 	.word	0x080116b8
 8005e00:	08005cf5 	.word	0x08005cf5

08005e04 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8005e0a:	202e      	movs	r0, #46	; 0x2e
 8005e0c:	f003 f92c 	bl	8009068 <tcp_new_ip_type>
 8005e10:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d106      	bne.n	8005e26 <httpd_init+0x22>
 8005e18:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <httpd_init+0x34>)
 8005e1a:	f640 2272 	movw	r2, #2674	; 0xa72
 8005e1e:	4907      	ldr	r1, [pc, #28]	; (8005e3c <httpd_init+0x38>)
 8005e20:	4807      	ldr	r0, [pc, #28]	; (8005e40 <httpd_init+0x3c>)
 8005e22:	f00a fbe1 	bl	80105e8 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8005e26:	2150      	movs	r1, #80	; 0x50
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff ffa7 	bl	8005d7c <httpd_init_pcb>
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	08011514 	.word	0x08011514
 8005e3c:	080116d8 	.word	0x080116d8
 8005e40:	0801155c 	.word	0x0801155c

08005e44 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	021b      	lsls	r3, r3, #8
 8005e52:	b21a      	sxth	r2, r3
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	b21b      	sxth	r3, r3
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	b21b      	sxth	r3, r3
 8005e60:	b29b      	uxth	r3, r3
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	061a      	lsls	r2, r3, #24
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	0a1b      	lsrs	r3, r3, #8
 8005e88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	0e1b      	lsrs	r3, r3, #24
 8005e92:	4313      	orrs	r3, r2
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8005eac:	68b8      	ldr	r0, [r7, #8]
 8005eae:	f7fa f9d1 	bl	8000254 <strlen>
 8005eb2:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	e022      	b.n	8005f04 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	e012      	b.n	8005eea <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	781a      	ldrb	r2, [r3, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d109      	bne.n	8005ee4 <lwip_strnstr+0x44>
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	6978      	ldr	r0, [r7, #20]
 8005ed6:	f00a fbe0 	bl	801069a <strncmp>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	e00f      	b.n	8005f04 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <lwip_strnstr+0x62>
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	441a      	add	r2, r3
 8005ef8:	68f9      	ldr	r1, [r7, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	440b      	add	r3, r1
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d9e0      	bls.n	8005ec4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005f16:	f000 f8d5 	bl	80060c4 <mem_init>
  memp_init();
 8005f1a:	f000 fbdb 	bl	80066d4 <memp_init>
  pbuf_init();
  netif_init();
 8005f1e:	f000 fc93 	bl	8006848 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005f22:	f007 fea7 	bl	800dc74 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005f26:	f001 fd01 	bl	800792c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005f2a:	f007 fe1b 	bl	800db64 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <ptr_to_mem+0x20>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	4413      	add	r3, r2
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	200004d8 	.word	0x200004d8

08005f5c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a05      	ldr	r2, [pc, #20]	; (8005f7c <mem_to_ptr+0x20>)
 8005f68:	6812      	ldr	r2, [r2, #0]
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	b29b      	uxth	r3, r3
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	200004d8 	.word	0x200004d8

08005f80 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005f80:	b590      	push	{r4, r7, lr}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005f88:	4b45      	ldr	r3, [pc, #276]	; (80060a0 <plug_holes+0x120>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d206      	bcs.n	8005fa0 <plug_holes+0x20>
 8005f92:	4b44      	ldr	r3, [pc, #272]	; (80060a4 <plug_holes+0x124>)
 8005f94:	f240 12df 	movw	r2, #479	; 0x1df
 8005f98:	4943      	ldr	r1, [pc, #268]	; (80060a8 <plug_holes+0x128>)
 8005f9a:	4844      	ldr	r0, [pc, #272]	; (80060ac <plug_holes+0x12c>)
 8005f9c:	f00a fb24 	bl	80105e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005fa0:	4b43      	ldr	r3, [pc, #268]	; (80060b0 <plug_holes+0x130>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d306      	bcc.n	8005fb8 <plug_holes+0x38>
 8005faa:	4b3e      	ldr	r3, [pc, #248]	; (80060a4 <plug_holes+0x124>)
 8005fac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005fb0:	4940      	ldr	r1, [pc, #256]	; (80060b4 <plug_holes+0x134>)
 8005fb2:	483e      	ldr	r0, [pc, #248]	; (80060ac <plug_holes+0x12c>)
 8005fb4:	f00a fb18 	bl	80105e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	791b      	ldrb	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d006      	beq.n	8005fce <plug_holes+0x4e>
 8005fc0:	4b38      	ldr	r3, [pc, #224]	; (80060a4 <plug_holes+0x124>)
 8005fc2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005fc6:	493c      	ldr	r1, [pc, #240]	; (80060b8 <plug_holes+0x138>)
 8005fc8:	4838      	ldr	r0, [pc, #224]	; (80060ac <plug_holes+0x12c>)
 8005fca:	f00a fb0d 	bl	80105e8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005fd6:	d906      	bls.n	8005fe6 <plug_holes+0x66>
 8005fd8:	4b32      	ldr	r3, [pc, #200]	; (80060a4 <plug_holes+0x124>)
 8005fda:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005fde:	4937      	ldr	r1, [pc, #220]	; (80060bc <plug_holes+0x13c>)
 8005fe0:	4832      	ldr	r0, [pc, #200]	; (80060ac <plug_holes+0x12c>)
 8005fe2:	f00a fb01 	bl	80105e8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff ffa4 	bl	8005f38 <ptr_to_mem>
 8005ff0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d024      	beq.n	8006044 <plug_holes+0xc4>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	791b      	ldrb	r3, [r3, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d120      	bne.n	8006044 <plug_holes+0xc4>
 8006002:	4b2b      	ldr	r3, [pc, #172]	; (80060b0 <plug_holes+0x130>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	429a      	cmp	r2, r3
 800600a:	d01b      	beq.n	8006044 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800600c:	4b2c      	ldr	r3, [pc, #176]	; (80060c0 <plug_holes+0x140>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	429a      	cmp	r2, r3
 8006014:	d102      	bne.n	800601c <plug_holes+0x9c>
      lfree = mem;
 8006016:	4a2a      	ldr	r2, [pc, #168]	; (80060c0 <plug_holes+0x140>)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	881a      	ldrh	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800602c:	d00a      	beq.n	8006044 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff ff80 	bl	8005f38 <ptr_to_mem>
 8006038:	4604      	mov	r4, r0
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ff8e 	bl	8005f5c <mem_to_ptr>
 8006040:	4603      	mov	r3, r0
 8006042:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	885b      	ldrh	r3, [r3, #2]
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff ff75 	bl	8005f38 <ptr_to_mem>
 800604e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	429a      	cmp	r2, r3
 8006056:	d01f      	beq.n	8006098 <plug_holes+0x118>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	791b      	ldrb	r3, [r3, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d11b      	bne.n	8006098 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006060:	4b17      	ldr	r3, [pc, #92]	; (80060c0 <plug_holes+0x140>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	429a      	cmp	r2, r3
 8006068:	d102      	bne.n	8006070 <plug_holes+0xf0>
      lfree = pmem;
 800606a:	4a15      	ldr	r2, [pc, #84]	; (80060c0 <plug_holes+0x140>)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	881a      	ldrh	r2, [r3, #0]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006080:	d00a      	beq.n	8006098 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff ff56 	bl	8005f38 <ptr_to_mem>
 800608c:	4604      	mov	r4, r0
 800608e:	68b8      	ldr	r0, [r7, #8]
 8006090:	f7ff ff64 	bl	8005f5c <mem_to_ptr>
 8006094:	4603      	mov	r3, r0
 8006096:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006098:	bf00      	nop
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	bd90      	pop	{r4, r7, pc}
 80060a0:	200004d8 	.word	0x200004d8
 80060a4:	080116f4 	.word	0x080116f4
 80060a8:	08011724 	.word	0x08011724
 80060ac:	0801173c 	.word	0x0801173c
 80060b0:	200004dc 	.word	0x200004dc
 80060b4:	08011764 	.word	0x08011764
 80060b8:	08011780 	.word	0x08011780
 80060bc:	0801179c 	.word	0x0801179c
 80060c0:	200004e0 	.word	0x200004e0

080060c4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80060ca:	4b18      	ldr	r3, [pc, #96]	; (800612c <mem_init+0x68>)
 80060cc:	3303      	adds	r3, #3
 80060ce:	f023 0303 	bic.w	r3, r3, #3
 80060d2:	461a      	mov	r2, r3
 80060d4:	4b16      	ldr	r3, [pc, #88]	; (8006130 <mem_init+0x6c>)
 80060d6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80060d8:	4b15      	ldr	r3, [pc, #84]	; (8006130 <mem_init+0x6c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80060e4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80060f2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80060f6:	f7ff ff1f 	bl	8005f38 <ptr_to_mem>
 80060fa:	4602      	mov	r2, r0
 80060fc:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <mem_init+0x70>)
 80060fe:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8006100:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <mem_init+0x70>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2201      	movs	r2, #1
 8006106:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <mem_init+0x70>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006110:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006112:	4b08      	ldr	r3, [pc, #32]	; (8006134 <mem_init+0x70>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800611a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800611c:	4b04      	ldr	r3, [pc, #16]	; (8006130 <mem_init+0x6c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a05      	ldr	r2, [pc, #20]	; (8006138 <mem_init+0x74>)
 8006122:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20003c24 	.word	0x20003c24
 8006130:	200004d8 	.word	0x200004d8
 8006134:	200004dc 	.word	0x200004dc
 8006138:	200004e0 	.word	0x200004e0

0800613c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff ff09 	bl	8005f5c <mem_to_ptr>
 800614a:	4603      	mov	r3, r0
 800614c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff fef0 	bl	8005f38 <ptr_to_mem>
 8006158:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	885b      	ldrh	r3, [r3, #2]
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff feea 	bl	8005f38 <ptr_to_mem>
 8006164:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800616e:	d818      	bhi.n	80061a2 <mem_link_valid+0x66>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	885b      	ldrh	r3, [r3, #2]
 8006174:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006178:	d813      	bhi.n	80061a2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800617e:	8afa      	ldrh	r2, [r7, #22]
 8006180:	429a      	cmp	r2, r3
 8006182:	d004      	beq.n	800618e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	8afa      	ldrh	r2, [r7, #22]
 800618a:	429a      	cmp	r2, r3
 800618c:	d109      	bne.n	80061a2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800618e:	4b08      	ldr	r3, [pc, #32]	; (80061b0 <mem_link_valid+0x74>)
 8006190:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	429a      	cmp	r2, r3
 8006196:	d006      	beq.n	80061a6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	885b      	ldrh	r3, [r3, #2]
 800619c:	8afa      	ldrh	r2, [r7, #22]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d001      	beq.n	80061a6 <mem_link_valid+0x6a>
    return 0;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e000      	b.n	80061a8 <mem_link_valid+0x6c>
  }
  return 1;
 80061a6:	2301      	movs	r3, #1
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	200004dc 	.word	0x200004dc

080061b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d04c      	beq.n	800625c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80061cc:	4b25      	ldr	r3, [pc, #148]	; (8006264 <mem_free+0xb0>)
 80061ce:	f240 2273 	movw	r2, #627	; 0x273
 80061d2:	4925      	ldr	r1, [pc, #148]	; (8006268 <mem_free+0xb4>)
 80061d4:	4825      	ldr	r0, [pc, #148]	; (800626c <mem_free+0xb8>)
 80061d6:	f00a fa07 	bl	80105e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80061da:	e040      	b.n	800625e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3b08      	subs	r3, #8
 80061e0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80061e2:	4b23      	ldr	r3, [pc, #140]	; (8006270 <mem_free+0xbc>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d306      	bcc.n	80061fa <mem_free+0x46>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f103 020c 	add.w	r2, r3, #12
 80061f2:	4b20      	ldr	r3, [pc, #128]	; (8006274 <mem_free+0xc0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d907      	bls.n	800620a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80061fa:	4b1a      	ldr	r3, [pc, #104]	; (8006264 <mem_free+0xb0>)
 80061fc:	f240 227f 	movw	r2, #639	; 0x27f
 8006200:	491d      	ldr	r1, [pc, #116]	; (8006278 <mem_free+0xc4>)
 8006202:	481a      	ldr	r0, [pc, #104]	; (800626c <mem_free+0xb8>)
 8006204:	f00a f9f0 	bl	80105e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006208:	e029      	b.n	800625e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	791b      	ldrb	r3, [r3, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d107      	bne.n	8006222 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006212:	4b14      	ldr	r3, [pc, #80]	; (8006264 <mem_free+0xb0>)
 8006214:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006218:	4918      	ldr	r1, [pc, #96]	; (800627c <mem_free+0xc8>)
 800621a:	4814      	ldr	r0, [pc, #80]	; (800626c <mem_free+0xb8>)
 800621c:	f00a f9e4 	bl	80105e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006220:	e01d      	b.n	800625e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff ff8a 	bl	800613c <mem_link_valid>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d107      	bne.n	800623e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800622e:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <mem_free+0xb0>)
 8006230:	f240 2295 	movw	r2, #661	; 0x295
 8006234:	4912      	ldr	r1, [pc, #72]	; (8006280 <mem_free+0xcc>)
 8006236:	480d      	ldr	r0, [pc, #52]	; (800626c <mem_free+0xb8>)
 8006238:	f00a f9d6 	bl	80105e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800623c:	e00f      	b.n	800625e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006244:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <mem_free+0xd0>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	429a      	cmp	r2, r3
 800624c:	d202      	bcs.n	8006254 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800624e:	4a0d      	ldr	r2, [pc, #52]	; (8006284 <mem_free+0xd0>)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff fe93 	bl	8005f80 <plug_holes>
 800625a:	e000      	b.n	800625e <mem_free+0xaa>
    return;
 800625c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	080116f4 	.word	0x080116f4
 8006268:	080117c8 	.word	0x080117c8
 800626c:	0801173c 	.word	0x0801173c
 8006270:	200004d8 	.word	0x200004d8
 8006274:	200004dc 	.word	0x200004dc
 8006278:	080117ec 	.word	0x080117ec
 800627c:	08011808 	.word	0x08011808
 8006280:	08011830 	.word	0x08011830
 8006284:	200004e0 	.word	0x200004e0

08006288 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006294:	887b      	ldrh	r3, [r7, #2]
 8006296:	3303      	adds	r3, #3
 8006298:	b29b      	uxth	r3, r3
 800629a:	f023 0303 	bic.w	r3, r3, #3
 800629e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80062a0:	8bfb      	ldrh	r3, [r7, #30]
 80062a2:	2b0b      	cmp	r3, #11
 80062a4:	d801      	bhi.n	80062aa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80062a6:	230c      	movs	r3, #12
 80062a8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80062aa:	8bfb      	ldrh	r3, [r7, #30]
 80062ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80062b0:	d803      	bhi.n	80062ba <mem_trim+0x32>
 80062b2:	8bfa      	ldrh	r2, [r7, #30]
 80062b4:	887b      	ldrh	r3, [r7, #2]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d201      	bcs.n	80062be <mem_trim+0x36>
    return NULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	e0cc      	b.n	8006458 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80062be:	4b68      	ldr	r3, [pc, #416]	; (8006460 <mem_trim+0x1d8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d304      	bcc.n	80062d2 <mem_trim+0x4a>
 80062c8:	4b66      	ldr	r3, [pc, #408]	; (8006464 <mem_trim+0x1dc>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d306      	bcc.n	80062e0 <mem_trim+0x58>
 80062d2:	4b65      	ldr	r3, [pc, #404]	; (8006468 <mem_trim+0x1e0>)
 80062d4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80062d8:	4964      	ldr	r1, [pc, #400]	; (800646c <mem_trim+0x1e4>)
 80062da:	4865      	ldr	r0, [pc, #404]	; (8006470 <mem_trim+0x1e8>)
 80062dc:	f00a f984 	bl	80105e8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80062e0:	4b5f      	ldr	r3, [pc, #380]	; (8006460 <mem_trim+0x1d8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d304      	bcc.n	80062f4 <mem_trim+0x6c>
 80062ea:	4b5e      	ldr	r3, [pc, #376]	; (8006464 <mem_trim+0x1dc>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d301      	bcc.n	80062f8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	e0af      	b.n	8006458 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3b08      	subs	r3, #8
 80062fc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80062fe:	69b8      	ldr	r0, [r7, #24]
 8006300:	f7ff fe2c 	bl	8005f5c <mem_to_ptr>
 8006304:	4603      	mov	r3, r0
 8006306:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	881a      	ldrh	r2, [r3, #0]
 800630c:	8afb      	ldrh	r3, [r7, #22]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	b29b      	uxth	r3, r3
 8006312:	3b08      	subs	r3, #8
 8006314:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006316:	8bfa      	ldrh	r2, [r7, #30]
 8006318:	8abb      	ldrh	r3, [r7, #20]
 800631a:	429a      	cmp	r2, r3
 800631c:	d906      	bls.n	800632c <mem_trim+0xa4>
 800631e:	4b52      	ldr	r3, [pc, #328]	; (8006468 <mem_trim+0x1e0>)
 8006320:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006324:	4953      	ldr	r1, [pc, #332]	; (8006474 <mem_trim+0x1ec>)
 8006326:	4852      	ldr	r0, [pc, #328]	; (8006470 <mem_trim+0x1e8>)
 8006328:	f00a f95e 	bl	80105e8 <iprintf>
  if (newsize > size) {
 800632c:	8bfa      	ldrh	r2, [r7, #30]
 800632e:	8abb      	ldrh	r3, [r7, #20]
 8006330:	429a      	cmp	r2, r3
 8006332:	d901      	bls.n	8006338 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006334:	2300      	movs	r3, #0
 8006336:	e08f      	b.n	8006458 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006338:	8bfa      	ldrh	r2, [r7, #30]
 800633a:	8abb      	ldrh	r3, [r7, #20]
 800633c:	429a      	cmp	r2, r3
 800633e:	d101      	bne.n	8006344 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	e089      	b.n	8006458 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff fdf5 	bl	8005f38 <ptr_to_mem>
 800634e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	791b      	ldrb	r3, [r3, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d13f      	bne.n	80063d8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006360:	d106      	bne.n	8006370 <mem_trim+0xe8>
 8006362:	4b41      	ldr	r3, [pc, #260]	; (8006468 <mem_trim+0x1e0>)
 8006364:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006368:	4943      	ldr	r1, [pc, #268]	; (8006478 <mem_trim+0x1f0>)
 800636a:	4841      	ldr	r0, [pc, #260]	; (8006470 <mem_trim+0x1e8>)
 800636c:	f00a f93c 	bl	80105e8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006376:	8afa      	ldrh	r2, [r7, #22]
 8006378:	8bfb      	ldrh	r3, [r7, #30]
 800637a:	4413      	add	r3, r2
 800637c:	b29b      	uxth	r3, r3
 800637e:	3308      	adds	r3, #8
 8006380:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006382:	4b3e      	ldr	r3, [pc, #248]	; (800647c <mem_trim+0x1f4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	429a      	cmp	r2, r3
 800638a:	d106      	bne.n	800639a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800638c:	89fb      	ldrh	r3, [r7, #14]
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff fdd2 	bl	8005f38 <ptr_to_mem>
 8006394:	4602      	mov	r2, r0
 8006396:	4b39      	ldr	r3, [pc, #228]	; (800647c <mem_trim+0x1f4>)
 8006398:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800639a:	89fb      	ldrh	r3, [r7, #14]
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff fdcb 	bl	8005f38 <ptr_to_mem>
 80063a2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2200      	movs	r2, #0
 80063a8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	89ba      	ldrh	r2, [r7, #12]
 80063ae:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	8afa      	ldrh	r2, [r7, #22]
 80063b4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	89fa      	ldrh	r2, [r7, #14]
 80063ba:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80063c4:	d047      	beq.n	8006456 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff fdb4 	bl	8005f38 <ptr_to_mem>
 80063d0:	4602      	mov	r2, r0
 80063d2:	89fb      	ldrh	r3, [r7, #14]
 80063d4:	8053      	strh	r3, [r2, #2]
 80063d6:	e03e      	b.n	8006456 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80063d8:	8bfb      	ldrh	r3, [r7, #30]
 80063da:	f103 0214 	add.w	r2, r3, #20
 80063de:	8abb      	ldrh	r3, [r7, #20]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d838      	bhi.n	8006456 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80063e4:	8afa      	ldrh	r2, [r7, #22]
 80063e6:	8bfb      	ldrh	r3, [r7, #30]
 80063e8:	4413      	add	r3, r2
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3308      	adds	r3, #8
 80063ee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80063f8:	d106      	bne.n	8006408 <mem_trim+0x180>
 80063fa:	4b1b      	ldr	r3, [pc, #108]	; (8006468 <mem_trim+0x1e0>)
 80063fc:	f240 3216 	movw	r2, #790	; 0x316
 8006400:	491d      	ldr	r1, [pc, #116]	; (8006478 <mem_trim+0x1f0>)
 8006402:	481b      	ldr	r0, [pc, #108]	; (8006470 <mem_trim+0x1e8>)
 8006404:	f00a f8f0 	bl	80105e8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006408:	89fb      	ldrh	r3, [r7, #14]
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fd94 	bl	8005f38 <ptr_to_mem>
 8006410:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006412:	4b1a      	ldr	r3, [pc, #104]	; (800647c <mem_trim+0x1f4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	429a      	cmp	r2, r3
 800641a:	d202      	bcs.n	8006422 <mem_trim+0x19a>
      lfree = mem2;
 800641c:	4a17      	ldr	r2, [pc, #92]	; (800647c <mem_trim+0x1f4>)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2200      	movs	r2, #0
 8006426:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	881a      	ldrh	r2, [r3, #0]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	8afa      	ldrh	r2, [r7, #22]
 8006434:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	89fa      	ldrh	r2, [r7, #14]
 800643a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006444:	d007      	beq.n	8006456 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff fd74 	bl	8005f38 <ptr_to_mem>
 8006450:	4602      	mov	r2, r0
 8006452:	89fb      	ldrh	r3, [r7, #14]
 8006454:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006456:	687b      	ldr	r3, [r7, #4]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	200004d8 	.word	0x200004d8
 8006464:	200004dc 	.word	0x200004dc
 8006468:	080116f4 	.word	0x080116f4
 800646c:	08011864 	.word	0x08011864
 8006470:	0801173c 	.word	0x0801173c
 8006474:	0801187c 	.word	0x0801187c
 8006478:	0801189c 	.word	0x0801189c
 800647c:	200004e0 	.word	0x200004e0

08006480 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800648a:	88fb      	ldrh	r3, [r7, #6]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <mem_malloc+0x14>
    return NULL;
 8006490:	2300      	movs	r3, #0
 8006492:	e0d9      	b.n	8006648 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006494:	88fb      	ldrh	r3, [r7, #6]
 8006496:	3303      	adds	r3, #3
 8006498:	b29b      	uxth	r3, r3
 800649a:	f023 0303 	bic.w	r3, r3, #3
 800649e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80064a0:	8bbb      	ldrh	r3, [r7, #28]
 80064a2:	2b0b      	cmp	r3, #11
 80064a4:	d801      	bhi.n	80064aa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80064a6:	230c      	movs	r3, #12
 80064a8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80064aa:	8bbb      	ldrh	r3, [r7, #28]
 80064ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80064b0:	d803      	bhi.n	80064ba <mem_malloc+0x3a>
 80064b2:	8bba      	ldrh	r2, [r7, #28]
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d201      	bcs.n	80064be <mem_malloc+0x3e>
    return NULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e0c4      	b.n	8006648 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80064be:	4b64      	ldr	r3, [pc, #400]	; (8006650 <mem_malloc+0x1d0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff fd4a 	bl	8005f5c <mem_to_ptr>
 80064c8:	4603      	mov	r3, r0
 80064ca:	83fb      	strh	r3, [r7, #30]
 80064cc:	e0b4      	b.n	8006638 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80064ce:	8bfb      	ldrh	r3, [r7, #30]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7ff fd31 	bl	8005f38 <ptr_to_mem>
 80064d6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	791b      	ldrb	r3, [r3, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f040 80a4 	bne.w	800662a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	8bfb      	ldrh	r3, [r7, #30]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	f1a3 0208 	sub.w	r2, r3, #8
 80064f0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80064f2:	429a      	cmp	r2, r3
 80064f4:	f0c0 8099 	bcc.w	800662a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	8bfb      	ldrh	r3, [r7, #30]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f1a3 0208 	sub.w	r2, r3, #8
 8006506:	8bbb      	ldrh	r3, [r7, #28]
 8006508:	3314      	adds	r3, #20
 800650a:	429a      	cmp	r2, r3
 800650c:	d333      	bcc.n	8006576 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800650e:	8bfa      	ldrh	r2, [r7, #30]
 8006510:	8bbb      	ldrh	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	b29b      	uxth	r3, r3
 8006516:	3308      	adds	r3, #8
 8006518:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800651a:	8a7b      	ldrh	r3, [r7, #18]
 800651c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006520:	d106      	bne.n	8006530 <mem_malloc+0xb0>
 8006522:	4b4c      	ldr	r3, [pc, #304]	; (8006654 <mem_malloc+0x1d4>)
 8006524:	f240 3287 	movw	r2, #903	; 0x387
 8006528:	494b      	ldr	r1, [pc, #300]	; (8006658 <mem_malloc+0x1d8>)
 800652a:	484c      	ldr	r0, [pc, #304]	; (800665c <mem_malloc+0x1dc>)
 800652c:	f00a f85c 	bl	80105e8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006530:	8a7b      	ldrh	r3, [r7, #18]
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fd00 	bl	8005f38 <ptr_to_mem>
 8006538:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	881a      	ldrh	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8bfa      	ldrh	r2, [r7, #30]
 800654c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	8a7a      	ldrh	r2, [r7, #18]
 8006552:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2201      	movs	r2, #1
 8006558:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006562:	d00b      	beq.n	800657c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff fce5 	bl	8005f38 <ptr_to_mem>
 800656e:	4602      	mov	r2, r0
 8006570:	8a7b      	ldrh	r3, [r7, #18]
 8006572:	8053      	strh	r3, [r2, #2]
 8006574:	e002      	b.n	800657c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2201      	movs	r2, #1
 800657a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800657c:	4b34      	ldr	r3, [pc, #208]	; (8006650 <mem_malloc+0x1d0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	429a      	cmp	r2, r3
 8006584:	d127      	bne.n	80065d6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006586:	4b32      	ldr	r3, [pc, #200]	; (8006650 <mem_malloc+0x1d0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800658c:	e005      	b.n	800659a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff fcd0 	bl	8005f38 <ptr_to_mem>
 8006598:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	791b      	ldrb	r3, [r3, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <mem_malloc+0x12c>
 80065a2:	4b2f      	ldr	r3, [pc, #188]	; (8006660 <mem_malloc+0x1e0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d1f0      	bne.n	800658e <mem_malloc+0x10e>
          }
          lfree = cur;
 80065ac:	4a28      	ldr	r2, [pc, #160]	; (8006650 <mem_malloc+0x1d0>)
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80065b2:	4b27      	ldr	r3, [pc, #156]	; (8006650 <mem_malloc+0x1d0>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	4b2a      	ldr	r3, [pc, #168]	; (8006660 <mem_malloc+0x1e0>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d00b      	beq.n	80065d6 <mem_malloc+0x156>
 80065be:	4b24      	ldr	r3, [pc, #144]	; (8006650 <mem_malloc+0x1d0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	791b      	ldrb	r3, [r3, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d006      	beq.n	80065d6 <mem_malloc+0x156>
 80065c8:	4b22      	ldr	r3, [pc, #136]	; (8006654 <mem_malloc+0x1d4>)
 80065ca:	f240 32b5 	movw	r2, #949	; 0x3b5
 80065ce:	4925      	ldr	r1, [pc, #148]	; (8006664 <mem_malloc+0x1e4>)
 80065d0:	4822      	ldr	r0, [pc, #136]	; (800665c <mem_malloc+0x1dc>)
 80065d2:	f00a f809 	bl	80105e8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80065d6:	8bba      	ldrh	r2, [r7, #28]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	4413      	add	r3, r2
 80065dc:	3308      	adds	r3, #8
 80065de:	4a20      	ldr	r2, [pc, #128]	; (8006660 <mem_malloc+0x1e0>)
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d906      	bls.n	80065f4 <mem_malloc+0x174>
 80065e6:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <mem_malloc+0x1d4>)
 80065e8:	f240 32ba 	movw	r2, #954	; 0x3ba
 80065ec:	491e      	ldr	r1, [pc, #120]	; (8006668 <mem_malloc+0x1e8>)
 80065ee:	481b      	ldr	r0, [pc, #108]	; (800665c <mem_malloc+0x1dc>)
 80065f0:	f009 fffa 	bl	80105e8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d006      	beq.n	800660c <mem_malloc+0x18c>
 80065fe:	4b15      	ldr	r3, [pc, #84]	; (8006654 <mem_malloc+0x1d4>)
 8006600:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8006604:	4919      	ldr	r1, [pc, #100]	; (800666c <mem_malloc+0x1ec>)
 8006606:	4815      	ldr	r0, [pc, #84]	; (800665c <mem_malloc+0x1dc>)
 8006608:	f009 ffee 	bl	80105e8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d006      	beq.n	8006624 <mem_malloc+0x1a4>
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <mem_malloc+0x1d4>)
 8006618:	f240 32be 	movw	r2, #958	; 0x3be
 800661c:	4914      	ldr	r1, [pc, #80]	; (8006670 <mem_malloc+0x1f0>)
 800661e:	480f      	ldr	r0, [pc, #60]	; (800665c <mem_malloc+0x1dc>)
 8006620:	f009 ffe2 	bl	80105e8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	3308      	adds	r3, #8
 8006628:	e00e      	b.n	8006648 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800662a:	8bfb      	ldrh	r3, [r7, #30]
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fc83 	bl	8005f38 <ptr_to_mem>
 8006632:	4603      	mov	r3, r0
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006638:	8bfa      	ldrh	r2, [r7, #30]
 800663a:	8bbb      	ldrh	r3, [r7, #28]
 800663c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006640:	429a      	cmp	r2, r3
 8006642:	f4ff af44 	bcc.w	80064ce <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3720      	adds	r7, #32
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	200004e0 	.word	0x200004e0
 8006654:	080116f4 	.word	0x080116f4
 8006658:	0801189c 	.word	0x0801189c
 800665c:	0801173c 	.word	0x0801173c
 8006660:	200004dc 	.word	0x200004dc
 8006664:	080118b0 	.word	0x080118b0
 8006668:	080118cc 	.word	0x080118cc
 800666c:	080118fc 	.word	0x080118fc
 8006670:	0801192c 	.word	0x0801192c

08006674 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	3303      	adds	r3, #3
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e011      	b.n	80066ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4413      	add	r3, r2
 80066b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	885b      	ldrh	r3, [r3, #2]
 80066be:	461a      	mov	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4293      	cmp	r3, r2
 80066c4:	dbe7      	blt.n	8006696 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80066c6:	bf00      	nop
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
	...

080066d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80066da:	2300      	movs	r3, #0
 80066dc:	80fb      	strh	r3, [r7, #6]
 80066de:	e009      	b.n	80066f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	4a08      	ldr	r2, [pc, #32]	; (8006704 <memp_init+0x30>)
 80066e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff ffc3 	bl	8006674 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	3301      	adds	r3, #1
 80066f2:	80fb      	strh	r3, [r7, #6]
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	2b08      	cmp	r3, #8
 80066f8:	d9f2      	bls.n	80066e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	08014338 	.word	0x08014338

08006708 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d012      	beq.n	8006744 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	6812      	ldr	r2, [r2, #0]
 8006726:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d006      	beq.n	8006740 <do_memp_malloc_pool+0x38>
 8006732:	4b07      	ldr	r3, [pc, #28]	; (8006750 <do_memp_malloc_pool+0x48>)
 8006734:	f240 1219 	movw	r2, #281	; 0x119
 8006738:	4906      	ldr	r1, [pc, #24]	; (8006754 <do_memp_malloc_pool+0x4c>)
 800673a:	4807      	ldr	r0, [pc, #28]	; (8006758 <do_memp_malloc_pool+0x50>)
 800673c:	f009 ff54 	bl	80105e8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	e000      	b.n	8006746 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	08011950 	.word	0x08011950
 8006754:	08011980 	.word	0x08011980
 8006758:	080119a4 	.word	0x080119a4

0800675c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	2b08      	cmp	r3, #8
 800676a:	d908      	bls.n	800677e <memp_malloc+0x22>
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <memp_malloc+0x3c>)
 800676e:	f240 1257 	movw	r2, #343	; 0x157
 8006772:	490a      	ldr	r1, [pc, #40]	; (800679c <memp_malloc+0x40>)
 8006774:	480a      	ldr	r0, [pc, #40]	; (80067a0 <memp_malloc+0x44>)
 8006776:	f009 ff37 	bl	80105e8 <iprintf>
 800677a:	2300      	movs	r3, #0
 800677c:	e008      	b.n	8006790 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	4a08      	ldr	r2, [pc, #32]	; (80067a4 <memp_malloc+0x48>)
 8006782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff ffbe 	bl	8006708 <do_memp_malloc_pool>
 800678c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800678e:	68fb      	ldr	r3, [r7, #12]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	08011950 	.word	0x08011950
 800679c:	080119e0 	.word	0x080119e0
 80067a0:	080119a4 	.word	0x080119a4
 80067a4:	08014338 	.word	0x08014338

080067a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d006      	beq.n	80067ca <do_memp_free_pool+0x22>
 80067bc:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <do_memp_free_pool+0x40>)
 80067be:	f240 126d 	movw	r2, #365	; 0x16d
 80067c2:	490a      	ldr	r1, [pc, #40]	; (80067ec <do_memp_free_pool+0x44>)
 80067c4:	480a      	ldr	r0, [pc, #40]	; (80067f0 <do_memp_free_pool+0x48>)
 80067c6:	f009 ff0f 	bl	80105e8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	08011950 	.word	0x08011950
 80067ec:	08011a00 	.word	0x08011a00
 80067f0:	080119a4 	.word	0x080119a4

080067f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	4603      	mov	r3, r0
 80067fc:	6039      	str	r1, [r7, #0]
 80067fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	2b08      	cmp	r3, #8
 8006804:	d907      	bls.n	8006816 <memp_free+0x22>
 8006806:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <memp_free+0x44>)
 8006808:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800680c:	490b      	ldr	r1, [pc, #44]	; (800683c <memp_free+0x48>)
 800680e:	480c      	ldr	r0, [pc, #48]	; (8006840 <memp_free+0x4c>)
 8006810:	f009 feea 	bl	80105e8 <iprintf>
 8006814:	e00c      	b.n	8006830 <memp_free+0x3c>

  if (mem == NULL) {
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	4a09      	ldr	r2, [pc, #36]	; (8006844 <memp_free+0x50>)
 8006820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff ffbe 	bl	80067a8 <do_memp_free_pool>
 800682c:	e000      	b.n	8006830 <memp_free+0x3c>
    return;
 800682e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	08011950 	.word	0x08011950
 800683c:	08011a20 	.word	0x08011a20
 8006840:	080119a4 	.word	0x080119a4
 8006844:	08014338 	.word	0x08014338

08006848 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800684c:	bf00      	nop
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
	...

08006858 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d108      	bne.n	800687e <netif_add+0x26>
 800686c:	4b57      	ldr	r3, [pc, #348]	; (80069cc <netif_add+0x174>)
 800686e:	f240 1227 	movw	r2, #295	; 0x127
 8006872:	4957      	ldr	r1, [pc, #348]	; (80069d0 <netif_add+0x178>)
 8006874:	4857      	ldr	r0, [pc, #348]	; (80069d4 <netif_add+0x17c>)
 8006876:	f009 feb7 	bl	80105e8 <iprintf>
 800687a:	2300      	movs	r3, #0
 800687c:	e0a2      	b.n	80069c4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	2b00      	cmp	r3, #0
 8006882:	d108      	bne.n	8006896 <netif_add+0x3e>
 8006884:	4b51      	ldr	r3, [pc, #324]	; (80069cc <netif_add+0x174>)
 8006886:	f44f 7294 	mov.w	r2, #296	; 0x128
 800688a:	4953      	ldr	r1, [pc, #332]	; (80069d8 <netif_add+0x180>)
 800688c:	4851      	ldr	r0, [pc, #324]	; (80069d4 <netif_add+0x17c>)
 800688e:	f009 feab 	bl	80105e8 <iprintf>
 8006892:	2300      	movs	r3, #0
 8006894:	e096      	b.n	80069c4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800689c:	4b4f      	ldr	r3, [pc, #316]	; (80069dc <netif_add+0x184>)
 800689e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80068a6:	4b4d      	ldr	r3, [pc, #308]	; (80069dc <netif_add+0x184>)
 80068a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80068b0:	4b4a      	ldr	r3, [pc, #296]	; (80069dc <netif_add+0x184>)
 80068b2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4a45      	ldr	r2, [pc, #276]	; (80069e0 <netif_add+0x188>)
 80068ca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a3a      	ldr	r2, [r7, #32]
 80068e4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80068e6:	4b3f      	ldr	r3, [pc, #252]	; (80069e4 <netif_add+0x18c>)
 80068e8:	781a      	ldrb	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 f913 	bl	8006b28 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	4798      	blx	r3
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <netif_add+0xba>
    return NULL;
 800690e:	2300      	movs	r3, #0
 8006910:	e058      	b.n	80069c4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006918:	2bff      	cmp	r3, #255	; 0xff
 800691a:	d103      	bne.n	8006924 <netif_add+0xcc>
        netif->num = 0;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006928:	4b2f      	ldr	r3, [pc, #188]	; (80069e8 <netif_add+0x190>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	e02b      	b.n	8006988 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	429a      	cmp	r2, r3
 8006936:	d106      	bne.n	8006946 <netif_add+0xee>
 8006938:	4b24      	ldr	r3, [pc, #144]	; (80069cc <netif_add+0x174>)
 800693a:	f240 128b 	movw	r2, #395	; 0x18b
 800693e:	492b      	ldr	r1, [pc, #172]	; (80069ec <netif_add+0x194>)
 8006940:	4824      	ldr	r0, [pc, #144]	; (80069d4 <netif_add+0x17c>)
 8006942:	f009 fe51 	bl	80105e8 <iprintf>
        num_netifs++;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	3301      	adds	r3, #1
 800694a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	2bff      	cmp	r3, #255	; 0xff
 8006950:	dd06      	ble.n	8006960 <netif_add+0x108>
 8006952:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <netif_add+0x174>)
 8006954:	f240 128d 	movw	r2, #397	; 0x18d
 8006958:	4925      	ldr	r1, [pc, #148]	; (80069f0 <netif_add+0x198>)
 800695a:	481e      	ldr	r0, [pc, #120]	; (80069d4 <netif_add+0x17c>)
 800695c:	f009 fe44 	bl	80105e8 <iprintf>
        if (netif2->num == netif->num) {
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800696c:	429a      	cmp	r2, r3
 800696e:	d108      	bne.n	8006982 <netif_add+0x12a>
          netif->num++;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006976:	3301      	adds	r3, #1
 8006978:	b2da      	uxtb	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006980:	e005      	b.n	800698e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1d0      	bne.n	8006930 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1be      	bne.n	8006912 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800699a:	2bfe      	cmp	r3, #254	; 0xfe
 800699c:	d103      	bne.n	80069a6 <netif_add+0x14e>
    netif_num = 0;
 800699e:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <netif_add+0x18c>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	701a      	strb	r2, [r3, #0]
 80069a4:	e006      	b.n	80069b4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069ac:	3301      	adds	r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <netif_add+0x18c>)
 80069b2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80069b4:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <netif_add+0x190>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80069bc:	4a0a      	ldr	r2, [pc, #40]	; (80069e8 <netif_add+0x190>)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80069c2:	68fb      	ldr	r3, [r7, #12]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	08011a3c 	.word	0x08011a3c
 80069d0:	08011ad0 	.word	0x08011ad0
 80069d4:	08011a8c 	.word	0x08011a8c
 80069d8:	08011aec 	.word	0x08011aec
 80069dc:	0801439c 	.word	0x0801439c
 80069e0:	08006d3b 	.word	0x08006d3b
 80069e4:	20000508 	.word	0x20000508
 80069e8:	20007140 	.word	0x20007140
 80069ec:	08011b10 	.word	0x08011b10
 80069f0:	08011b24 	.word	0x08011b24

080069f4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f002 fd75 	bl	80094f0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f007 fabd 	bl	800df88 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d106      	bne.n	8006a38 <netif_do_set_ipaddr+0x20>
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <netif_do_set_ipaddr+0x88>)
 8006a2c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006a30:	491c      	ldr	r1, [pc, #112]	; (8006aa4 <netif_do_set_ipaddr+0x8c>)
 8006a32:	481d      	ldr	r0, [pc, #116]	; (8006aa8 <netif_do_set_ipaddr+0x90>)
 8006a34:	f009 fdd8 	bl	80105e8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <netif_do_set_ipaddr+0x34>
 8006a3e:	4b18      	ldr	r3, [pc, #96]	; (8006aa0 <netif_do_set_ipaddr+0x88>)
 8006a40:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006a44:	4917      	ldr	r1, [pc, #92]	; (8006aa4 <netif_do_set_ipaddr+0x8c>)
 8006a46:	4818      	ldr	r0, [pc, #96]	; (8006aa8 <netif_do_set_ipaddr+0x90>)
 8006a48:	f009 fdce 	bl	80105e8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3304      	adds	r3, #4
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d01c      	beq.n	8006a94 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3304      	adds	r3, #4
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006a6a:	f107 0314 	add.w	r3, r7, #20
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ffbf 	bl	80069f4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <netif_do_set_ipaddr+0x6a>
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	e000      	b.n	8006a84 <netif_do_set_ipaddr+0x6c>
 8006a82:	2300      	movs	r3, #0
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006a88:	2101      	movs	r1, #1
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f8d2 	bl	8006c34 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006a90:	2301      	movs	r3, #1
 8006a92:	e000      	b.n	8006a96 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	08011a3c 	.word	0x08011a3c
 8006aa4:	08011b54 	.word	0x08011b54
 8006aa8:	08011a8c 	.word	0x08011a8c

08006aac <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d00a      	beq.n	8006adc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <netif_do_set_netmask+0x26>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	e000      	b.n	8006ad4 <netif_do_set_netmask+0x28>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	330c      	adds	r3, #12
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d00a      	beq.n	8006b1a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <netif_do_set_gw+0x26>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	e000      	b.n	8006b12 <netif_do_set_gw+0x28>
 8006b10:	2300      	movs	r3, #0
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006b44:	4b1c      	ldr	r3, [pc, #112]	; (8006bb8 <netif_set_addr+0x90>)
 8006b46:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006b4e:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <netif_set_addr+0x90>)
 8006b50:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006b58:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <netif_set_addr+0x90>)
 8006b5a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <netif_set_addr+0x42>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <netif_set_addr+0x46>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e000      	b.n	8006b70 <netif_set_addr+0x48>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d006      	beq.n	8006b86 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006b78:	f107 0310 	add.w	r3, r7, #16
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	68b9      	ldr	r1, [r7, #8]
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff ff49 	bl	8006a18 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff ff8e 	bl	8006aac <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f7ff ffa8 	bl	8006aea <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006ba0:	f107 0310 	add.w	r3, r7, #16
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff ff35 	bl	8006a18 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006bae:	bf00      	nop
 8006bb0:	3720      	adds	r7, #32
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	0801439c 	.word	0x0801439c

08006bbc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006bc4:	4a04      	ldr	r2, [pc, #16]	; (8006bd8 <netif_set_default+0x1c>)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	20007144 	.word	0x20007144

08006bdc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d107      	bne.n	8006bfa <netif_set_up+0x1e>
 8006bea:	4b0f      	ldr	r3, [pc, #60]	; (8006c28 <netif_set_up+0x4c>)
 8006bec:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006bf0:	490e      	ldr	r1, [pc, #56]	; (8006c2c <netif_set_up+0x50>)
 8006bf2:	480f      	ldr	r0, [pc, #60]	; (8006c30 <netif_set_up+0x54>)
 8006bf4:	f009 fcf8 	bl	80105e8 <iprintf>
 8006bf8:	e013      	b.n	8006c22 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10c      	bne.n	8006c22 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006c1a:	2103      	movs	r1, #3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f809 	bl	8006c34 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	08011a3c 	.word	0x08011a3c
 8006c2c:	08011bc4 	.word	0x08011bc4
 8006c30:	08011a8c 	.word	0x08011a8c

08006c34 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <netif_issue_reports+0x20>
 8006c46:	4b18      	ldr	r3, [pc, #96]	; (8006ca8 <netif_issue_reports+0x74>)
 8006c48:	f240 326d 	movw	r2, #877	; 0x36d
 8006c4c:	4917      	ldr	r1, [pc, #92]	; (8006cac <netif_issue_reports+0x78>)
 8006c4e:	4818      	ldr	r0, [pc, #96]	; (8006cb0 <netif_issue_reports+0x7c>)
 8006c50:	f009 fcca 	bl	80105e8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01e      	beq.n	8006ca0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006c68:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d017      	beq.n	8006ca0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006c70:	78fb      	ldrb	r3, [r7, #3]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d013      	beq.n	8006ca2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00e      	beq.n	8006ca2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3304      	adds	r3, #4
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f008 f8df 	bl	800ee5c <etharp_request>
 8006c9e:	e000      	b.n	8006ca2 <netif_issue_reports+0x6e>
    return;
 8006ca0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	08011a3c 	.word	0x08011a3c
 8006cac:	08011be0 	.word	0x08011be0
 8006cb0:	08011a8c 	.word	0x08011a8c

08006cb4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d107      	bne.n	8006cd2 <netif_set_down+0x1e>
 8006cc2:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <netif_set_down+0x58>)
 8006cc4:	f240 329b 	movw	r2, #923	; 0x39b
 8006cc8:	4911      	ldr	r1, [pc, #68]	; (8006d10 <netif_set_down+0x5c>)
 8006cca:	4812      	ldr	r0, [pc, #72]	; (8006d14 <netif_set_down+0x60>)
 8006ccc:	f009 fc8c 	bl	80105e8 <iprintf>
 8006cd0:	e019      	b.n	8006d06 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d012      	beq.n	8006d06 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006ce6:	f023 0301 	bic.w	r3, r3, #1
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f007 fc69 	bl	800e5d8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	08011a3c 	.word	0x08011a3c
 8006d10:	08011c04 	.word	0x08011c04
 8006d14:	08011a8c 	.word	0x08011a8c

08006d18 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	61da      	str	r2, [r3, #28]
  }
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006d46:	f06f 030b 	mvn.w	r3, #11
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
	...

08006d58 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d013      	beq.n	8006d90 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006d68:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <netif_get_by_index+0x48>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	e00c      	b.n	8006d8a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d76:	3301      	adds	r3, #1
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	79fa      	ldrb	r2, [r7, #7]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d101      	bne.n	8006d84 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	e006      	b.n	8006d92 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1ef      	bne.n	8006d70 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	20007140 	.word	0x20007140

08006da4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006daa:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <pbuf_free_ooseq+0x38>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006db0:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <pbuf_free_ooseq+0x3c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	607b      	str	r3, [r7, #4]
 8006db6:	e00a      	b.n	8006dce <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f002 fbd3 	bl	800956c <tcp_free_ooseq>
      return;
 8006dc6:	e005      	b.n	8006dd4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	607b      	str	r3, [r7, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1f1      	bne.n	8006db8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20007148 	.word	0x20007148
 8006de0:	20007150 	.word	0x20007150

08006de4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006de8:	4b03      	ldr	r3, [pc, #12]	; (8006df8 <pbuf_pool_is_empty+0x14>)
 8006dea:	2201      	movs	r2, #1
 8006dec:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006dee:	bf00      	nop
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	20007148 	.word	0x20007148

08006dfc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	4611      	mov	r1, r2
 8006e08:	461a      	mov	r2, r3
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	80fb      	strh	r3, [r7, #6]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	88fa      	ldrh	r2, [r7, #6]
 8006e22:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	88ba      	ldrh	r2, [r7, #4]
 8006e28:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006e2a:	8b3b      	ldrh	r3, [r7, #24]
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	7f3a      	ldrb	r2, [r7, #28]
 8006e36:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	73da      	strb	r2, [r3, #15]
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08c      	sub	sp, #48	; 0x30
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	4603      	mov	r3, r0
 8006e58:	71fb      	strb	r3, [r7, #7]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	80bb      	strh	r3, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006e66:	887b      	ldrh	r3, [r7, #2]
 8006e68:	2b41      	cmp	r3, #65	; 0x41
 8006e6a:	d00b      	beq.n	8006e84 <pbuf_alloc+0x34>
 8006e6c:	2b41      	cmp	r3, #65	; 0x41
 8006e6e:	dc02      	bgt.n	8006e76 <pbuf_alloc+0x26>
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d007      	beq.n	8006e84 <pbuf_alloc+0x34>
 8006e74:	e0c2      	b.n	8006ffc <pbuf_alloc+0x1ac>
 8006e76:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006e7a:	d00b      	beq.n	8006e94 <pbuf_alloc+0x44>
 8006e7c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006e80:	d070      	beq.n	8006f64 <pbuf_alloc+0x114>
 8006e82:	e0bb      	b.n	8006ffc <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006e84:	887a      	ldrh	r2, [r7, #2]
 8006e86:	88bb      	ldrh	r3, [r7, #4]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	f000 f8d2 	bl	8007034 <pbuf_alloc_reference>
 8006e90:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006e92:	e0bd      	b.n	8007010 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006e94:	2300      	movs	r3, #0
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006e9c:	88bb      	ldrh	r3, [r7, #4]
 8006e9e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006ea0:	2008      	movs	r0, #8
 8006ea2:	f7ff fc5b 	bl	800675c <memp_malloc>
 8006ea6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d109      	bne.n	8006ec2 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8006eae:	f7ff ff99 	bl	8006de4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <pbuf_alloc+0x6e>
            pbuf_free(p);
 8006eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eba:	f000 faa9 	bl	8007410 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e0a7      	b.n	8007012 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006ec2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ec4:	3303      	adds	r3, #3
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	f023 0303 	bic.w	r3, r3, #3
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	8b7a      	ldrh	r2, [r7, #26]
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	bf28      	it	cs
 8006eda:	4613      	movcs	r3, r2
 8006edc:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006ede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ee0:	3310      	adds	r3, #16
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3303      	adds	r3, #3
 8006ee8:	f023 0303 	bic.w	r3, r3, #3
 8006eec:	4618      	mov	r0, r3
 8006eee:	89f9      	ldrh	r1, [r7, #14]
 8006ef0:	8b7a      	ldrh	r2, [r7, #26]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	887b      	ldrh	r3, [r7, #2]
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	460b      	mov	r3, r1
 8006efc:	4601      	mov	r1, r0
 8006efe:	6938      	ldr	r0, [r7, #16]
 8006f00:	f7ff ff7c 	bl	8006dfc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f003 0303 	and.w	r3, r3, #3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d006      	beq.n	8006f1e <pbuf_alloc+0xce>
 8006f10:	4b42      	ldr	r3, [pc, #264]	; (800701c <pbuf_alloc+0x1cc>)
 8006f12:	f240 1201 	movw	r2, #257	; 0x101
 8006f16:	4942      	ldr	r1, [pc, #264]	; (8007020 <pbuf_alloc+0x1d0>)
 8006f18:	4842      	ldr	r0, [pc, #264]	; (8007024 <pbuf_alloc+0x1d4>)
 8006f1a:	f009 fb65 	bl	80105e8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006f1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f20:	3303      	adds	r3, #3
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006f2a:	d106      	bne.n	8006f3a <pbuf_alloc+0xea>
 8006f2c:	4b3b      	ldr	r3, [pc, #236]	; (800701c <pbuf_alloc+0x1cc>)
 8006f2e:	f240 1203 	movw	r2, #259	; 0x103
 8006f32:	493d      	ldr	r1, [pc, #244]	; (8007028 <pbuf_alloc+0x1d8>)
 8006f34:	483b      	ldr	r0, [pc, #236]	; (8007024 <pbuf_alloc+0x1d4>)
 8006f36:	f009 fb57 	bl	80105e8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d102      	bne.n	8006f46 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
 8006f44:	e002      	b.n	8006f4c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006f50:	8b7a      	ldrh	r2, [r7, #26]
 8006f52:	89fb      	ldrh	r3, [r7, #14]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006f5c:	8b7b      	ldrh	r3, [r7, #26]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d19e      	bne.n	8006ea0 <pbuf_alloc+0x50>
      break;
 8006f62:	e055      	b.n	8007010 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006f64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f66:	3303      	adds	r3, #3
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f023 0303 	bic.w	r3, r3, #3
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	88bb      	ldrh	r3, [r7, #4]
 8006f72:	3303      	adds	r3, #3
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	4413      	add	r3, r2
 8006f7e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006f80:	8b3b      	ldrh	r3, [r7, #24]
 8006f82:	3310      	adds	r3, #16
 8006f84:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006f86:	8b3a      	ldrh	r2, [r7, #24]
 8006f88:	88bb      	ldrh	r3, [r7, #4]
 8006f8a:	3303      	adds	r3, #3
 8006f8c:	f023 0303 	bic.w	r3, r3, #3
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d306      	bcc.n	8006fa2 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006f94:	8afa      	ldrh	r2, [r7, #22]
 8006f96:	88bb      	ldrh	r3, [r7, #4]
 8006f98:	3303      	adds	r3, #3
 8006f9a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d201      	bcs.n	8006fa6 <pbuf_alloc+0x156>
        return NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e035      	b.n	8007012 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006fa6:	8afb      	ldrh	r3, [r7, #22]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fa69 	bl	8006480 <mem_malloc>
 8006fae:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <pbuf_alloc+0x16a>
        return NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e02b      	b.n	8007012 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006fba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fbc:	3310      	adds	r3, #16
 8006fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc0:	4413      	add	r3, r2
 8006fc2:	3303      	adds	r3, #3
 8006fc4:	f023 0303 	bic.w	r3, r3, #3
 8006fc8:	4618      	mov	r0, r3
 8006fca:	88b9      	ldrh	r1, [r7, #4]
 8006fcc:	88ba      	ldrh	r2, [r7, #4]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	887b      	ldrh	r3, [r7, #2]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4601      	mov	r1, r0
 8006fda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fdc:	f7ff ff0e 	bl	8006dfc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d010      	beq.n	800700e <pbuf_alloc+0x1be>
 8006fec:	4b0b      	ldr	r3, [pc, #44]	; (800701c <pbuf_alloc+0x1cc>)
 8006fee:	f240 1223 	movw	r2, #291	; 0x123
 8006ff2:	490e      	ldr	r1, [pc, #56]	; (800702c <pbuf_alloc+0x1dc>)
 8006ff4:	480b      	ldr	r0, [pc, #44]	; (8007024 <pbuf_alloc+0x1d4>)
 8006ff6:	f009 faf7 	bl	80105e8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006ffa:	e008      	b.n	800700e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006ffc:	4b07      	ldr	r3, [pc, #28]	; (800701c <pbuf_alloc+0x1cc>)
 8006ffe:	f240 1227 	movw	r2, #295	; 0x127
 8007002:	490b      	ldr	r1, [pc, #44]	; (8007030 <pbuf_alloc+0x1e0>)
 8007004:	4807      	ldr	r0, [pc, #28]	; (8007024 <pbuf_alloc+0x1d4>)
 8007006:	f009 faef 	bl	80105e8 <iprintf>
      return NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	e001      	b.n	8007012 <pbuf_alloc+0x1c2>
      break;
 800700e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007012:	4618      	mov	r0, r3
 8007014:	3728      	adds	r7, #40	; 0x28
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	08011c6c 	.word	0x08011c6c
 8007020:	08011c9c 	.word	0x08011c9c
 8007024:	08011ccc 	.word	0x08011ccc
 8007028:	08011cf4 	.word	0x08011cf4
 800702c:	08011d28 	.word	0x08011d28
 8007030:	08011d54 	.word	0x08011d54

08007034 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af02      	add	r7, sp, #8
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	807b      	strh	r3, [r7, #2]
 8007040:	4613      	mov	r3, r2
 8007042:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007044:	883b      	ldrh	r3, [r7, #0]
 8007046:	2b41      	cmp	r3, #65	; 0x41
 8007048:	d009      	beq.n	800705e <pbuf_alloc_reference+0x2a>
 800704a:	883b      	ldrh	r3, [r7, #0]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d006      	beq.n	800705e <pbuf_alloc_reference+0x2a>
 8007050:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <pbuf_alloc_reference+0x5c>)
 8007052:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007056:	490f      	ldr	r1, [pc, #60]	; (8007094 <pbuf_alloc_reference+0x60>)
 8007058:	480f      	ldr	r0, [pc, #60]	; (8007098 <pbuf_alloc_reference+0x64>)
 800705a:	f009 fac5 	bl	80105e8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800705e:	2007      	movs	r0, #7
 8007060:	f7ff fb7c 	bl	800675c <memp_malloc>
 8007064:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800706c:	2300      	movs	r3, #0
 800706e:	e00b      	b.n	8007088 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007070:	8879      	ldrh	r1, [r7, #2]
 8007072:	887a      	ldrh	r2, [r7, #2]
 8007074:	2300      	movs	r3, #0
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	883b      	ldrh	r3, [r7, #0]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	460b      	mov	r3, r1
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff febb 	bl	8006dfc <pbuf_init_alloced_pbuf>
  return p;
 8007086:	68fb      	ldr	r3, [r7, #12]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	08011c6c 	.word	0x08011c6c
 8007094:	08011d70 	.word	0x08011d70
 8007098:	08011ccc 	.word	0x08011ccc

0800709c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]
 80070a8:	460b      	mov	r3, r1
 80070aa:	81bb      	strh	r3, [r7, #12]
 80070ac:	4613      	mov	r3, r2
 80070ae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80070b4:	8a7b      	ldrh	r3, [r7, #18]
 80070b6:	3303      	adds	r3, #3
 80070b8:	f023 0203 	bic.w	r2, r3, #3
 80070bc:	89bb      	ldrh	r3, [r7, #12]
 80070be:	441a      	add	r2, r3
 80070c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d901      	bls.n	80070ca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	e018      	b.n	80070fc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d007      	beq.n	80070e0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80070d0:	8a7b      	ldrh	r3, [r7, #18]
 80070d2:	3303      	adds	r3, #3
 80070d4:	f023 0303 	bic.w	r3, r3, #3
 80070d8:	6a3a      	ldr	r2, [r7, #32]
 80070da:	4413      	add	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	e001      	b.n	80070e4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	89b9      	ldrh	r1, [r7, #12]
 80070e8:	89ba      	ldrh	r2, [r7, #12]
 80070ea:	2302      	movs	r3, #2
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	897b      	ldrh	r3, [r7, #10]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	460b      	mov	r3, r1
 80070f4:	6979      	ldr	r1, [r7, #20]
 80070f6:	f7ff fe81 	bl	8006dfc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80070fa:	687b      	ldr	r3, [r7, #4]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <pbuf_realloc+0x20>
 8007116:	4b3a      	ldr	r3, [pc, #232]	; (8007200 <pbuf_realloc+0xfc>)
 8007118:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800711c:	4939      	ldr	r1, [pc, #228]	; (8007204 <pbuf_realloc+0x100>)
 800711e:	483a      	ldr	r0, [pc, #232]	; (8007208 <pbuf_realloc+0x104>)
 8007120:	f009 fa62 	bl	80105e8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	891b      	ldrh	r3, [r3, #8]
 8007128:	887a      	ldrh	r2, [r7, #2]
 800712a:	429a      	cmp	r2, r3
 800712c:	d264      	bcs.n	80071f8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	891a      	ldrh	r2, [r3, #8]
 8007132:	887b      	ldrh	r3, [r7, #2]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007138:	887b      	ldrh	r3, [r7, #2]
 800713a:	817b      	strh	r3, [r7, #10]
  q = p;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007140:	e018      	b.n	8007174 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	895b      	ldrh	r3, [r3, #10]
 8007146:	897a      	ldrh	r2, [r7, #10]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	891a      	ldrh	r2, [r3, #8]
 8007150:	893b      	ldrh	r3, [r7, #8]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <pbuf_realloc+0x70>
 8007166:	4b26      	ldr	r3, [pc, #152]	; (8007200 <pbuf_realloc+0xfc>)
 8007168:	f240 12af 	movw	r2, #431	; 0x1af
 800716c:	4927      	ldr	r1, [pc, #156]	; (800720c <pbuf_realloc+0x108>)
 800716e:	4826      	ldr	r0, [pc, #152]	; (8007208 <pbuf_realloc+0x104>)
 8007170:	f009 fa3a 	bl	80105e8 <iprintf>
  while (rem_len > q->len) {
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	895b      	ldrh	r3, [r3, #10]
 8007178:	897a      	ldrh	r2, [r7, #10]
 800717a:	429a      	cmp	r2, r3
 800717c:	d8e1      	bhi.n	8007142 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	7b1b      	ldrb	r3, [r3, #12]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	2b00      	cmp	r3, #0
 8007188:	d122      	bne.n	80071d0 <pbuf_realloc+0xcc>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	895b      	ldrh	r3, [r3, #10]
 800718e:	897a      	ldrh	r2, [r7, #10]
 8007190:	429a      	cmp	r2, r3
 8007192:	d01d      	beq.n	80071d0 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	7b5b      	ldrb	r3, [r3, #13]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d117      	bne.n	80071d0 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	461a      	mov	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	897b      	ldrh	r3, [r7, #10]
 80071ae:	4413      	add	r3, r2
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	4619      	mov	r1, r3
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f7ff f867 	bl	8006288 <mem_trim>
 80071ba:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d106      	bne.n	80071d0 <pbuf_realloc+0xcc>
 80071c2:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <pbuf_realloc+0xfc>)
 80071c4:	f240 12bd 	movw	r2, #445	; 0x1bd
 80071c8:	4911      	ldr	r1, [pc, #68]	; (8007210 <pbuf_realloc+0x10c>)
 80071ca:	480f      	ldr	r0, [pc, #60]	; (8007208 <pbuf_realloc+0x104>)
 80071cc:	f009 fa0c 	bl	80105e8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	897a      	ldrh	r2, [r7, #10]
 80071d4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	895a      	ldrh	r2, [r3, #10]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d004      	beq.n	80071f0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f910 	bl	8007410 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	e000      	b.n	80071fa <pbuf_realloc+0xf6>
    return;
 80071f8:	bf00      	nop

}
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	08011c6c 	.word	0x08011c6c
 8007204:	08011d84 	.word	0x08011d84
 8007208:	08011ccc 	.word	0x08011ccc
 800720c:	08011d9c 	.word	0x08011d9c
 8007210:	08011db4 	.word	0x08011db4

08007214 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <pbuf_add_header_impl+0x22>
 8007228:	4b2b      	ldr	r3, [pc, #172]	; (80072d8 <pbuf_add_header_impl+0xc4>)
 800722a:	f240 12df 	movw	r2, #479	; 0x1df
 800722e:	492b      	ldr	r1, [pc, #172]	; (80072dc <pbuf_add_header_impl+0xc8>)
 8007230:	482b      	ldr	r0, [pc, #172]	; (80072e0 <pbuf_add_header_impl+0xcc>)
 8007232:	f009 f9d9 	bl	80105e8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <pbuf_add_header_impl+0x30>
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007242:	d301      	bcc.n	8007248 <pbuf_add_header_impl+0x34>
    return 1;
 8007244:	2301      	movs	r3, #1
 8007246:	e043      	b.n	80072d0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <pbuf_add_header_impl+0x3e>
    return 0;
 800724e:	2300      	movs	r3, #0
 8007250:	e03e      	b.n	80072d0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	891a      	ldrh	r2, [r3, #8]
 800725a:	8a7b      	ldrh	r3, [r7, #18]
 800725c:	4413      	add	r3, r2
 800725e:	b29b      	uxth	r3, r3
 8007260:	8a7a      	ldrh	r2, [r7, #18]
 8007262:	429a      	cmp	r2, r3
 8007264:	d901      	bls.n	800726a <pbuf_add_header_impl+0x56>
    return 1;
 8007266:	2301      	movs	r3, #1
 8007268:	e032      	b.n	80072d0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	7b1b      	ldrb	r3, [r3, #12]
 800726e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007270:	8a3b      	ldrh	r3, [r7, #16]
 8007272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00c      	beq.n	8007294 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	425b      	negs	r3, r3
 8007282:	4413      	add	r3, r2
 8007284:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3310      	adds	r3, #16
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	429a      	cmp	r2, r3
 800728e:	d20d      	bcs.n	80072ac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007290:	2301      	movs	r3, #1
 8007292:	e01d      	b.n	80072d0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d006      	beq.n	80072a8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	425b      	negs	r3, r3
 80072a2:	4413      	add	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	e001      	b.n	80072ac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e011      	b.n	80072d0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	895a      	ldrh	r2, [r3, #10]
 80072b6:	8a7b      	ldrh	r3, [r7, #18]
 80072b8:	4413      	add	r3, r2
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	891a      	ldrh	r2, [r3, #8]
 80072c4:	8a7b      	ldrh	r3, [r7, #18]
 80072c6:	4413      	add	r3, r2
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	811a      	strh	r2, [r3, #8]


  return 0;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	08011c6c 	.word	0x08011c6c
 80072dc:	08011dd0 	.word	0x08011dd0
 80072e0:	08011ccc 	.word	0x08011ccc

080072e4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80072ee:	2200      	movs	r2, #0
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff ff8e 	bl	8007214 <pbuf_add_header_impl>
 80072f8:	4603      	mov	r3, r0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d106      	bne.n	8007322 <pbuf_remove_header+0x1e>
 8007314:	4b20      	ldr	r3, [pc, #128]	; (8007398 <pbuf_remove_header+0x94>)
 8007316:	f240 224b 	movw	r2, #587	; 0x24b
 800731a:	4920      	ldr	r1, [pc, #128]	; (800739c <pbuf_remove_header+0x98>)
 800731c:	4820      	ldr	r0, [pc, #128]	; (80073a0 <pbuf_remove_header+0x9c>)
 800731e:	f009 f963 	bl	80105e8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <pbuf_remove_header+0x2c>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800732e:	d301      	bcc.n	8007334 <pbuf_remove_header+0x30>
    return 1;
 8007330:	2301      	movs	r3, #1
 8007332:	e02c      	b.n	800738e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <pbuf_remove_header+0x3a>
    return 0;
 800733a:	2300      	movs	r3, #0
 800733c:	e027      	b.n	800738e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	895b      	ldrh	r3, [r3, #10]
 8007346:	89fa      	ldrh	r2, [r7, #14]
 8007348:	429a      	cmp	r2, r3
 800734a:	d908      	bls.n	800735e <pbuf_remove_header+0x5a>
 800734c:	4b12      	ldr	r3, [pc, #72]	; (8007398 <pbuf_remove_header+0x94>)
 800734e:	f240 2255 	movw	r2, #597	; 0x255
 8007352:	4914      	ldr	r1, [pc, #80]	; (80073a4 <pbuf_remove_header+0xa0>)
 8007354:	4812      	ldr	r0, [pc, #72]	; (80073a0 <pbuf_remove_header+0x9c>)
 8007356:	f009 f947 	bl	80105e8 <iprintf>
 800735a:	2301      	movs	r3, #1
 800735c:	e017      	b.n	800738e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	441a      	add	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	895a      	ldrh	r2, [r3, #10]
 8007374:	89fb      	ldrh	r3, [r7, #14]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	b29a      	uxth	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	891a      	ldrh	r2, [r3, #8]
 8007382:	89fb      	ldrh	r3, [r7, #14]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	b29a      	uxth	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	08011c6c 	.word	0x08011c6c
 800739c:	08011dd0 	.word	0x08011dd0
 80073a0:	08011ccc 	.word	0x08011ccc
 80073a4:	08011ddc 	.word	0x08011ddc

080073a8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	807b      	strh	r3, [r7, #2]
 80073b4:	4613      	mov	r3, r2
 80073b6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80073b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	da08      	bge.n	80073d2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80073c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073c4:	425b      	negs	r3, r3
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff ff9b 	bl	8007304 <pbuf_remove_header>
 80073ce:	4603      	mov	r3, r0
 80073d0:	e007      	b.n	80073e2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80073d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073d6:	787a      	ldrb	r2, [r7, #1]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff ff1a 	bl	8007214 <pbuf_add_header_impl>
 80073e0:	4603      	mov	r3, r0
  }
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80073f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073fa:	2201      	movs	r2, #1
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff ffd2 	bl	80073a8 <pbuf_header_impl>
 8007404:	4603      	mov	r3, r0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10b      	bne.n	8007436 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d106      	bne.n	8007432 <pbuf_free+0x22>
 8007424:	4b38      	ldr	r3, [pc, #224]	; (8007508 <pbuf_free+0xf8>)
 8007426:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800742a:	4938      	ldr	r1, [pc, #224]	; (800750c <pbuf_free+0xfc>)
 800742c:	4838      	ldr	r0, [pc, #224]	; (8007510 <pbuf_free+0x100>)
 800742e:	f009 f8db 	bl	80105e8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007432:	2300      	movs	r3, #0
 8007434:	e063      	b.n	80074fe <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800743a:	e05c      	b.n	80074f6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	7b9b      	ldrb	r3, [r3, #14]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d106      	bne.n	8007452 <pbuf_free+0x42>
 8007444:	4b30      	ldr	r3, [pc, #192]	; (8007508 <pbuf_free+0xf8>)
 8007446:	f240 22f1 	movw	r2, #753	; 0x2f1
 800744a:	4932      	ldr	r1, [pc, #200]	; (8007514 <pbuf_free+0x104>)
 800744c:	4830      	ldr	r0, [pc, #192]	; (8007510 <pbuf_free+0x100>)
 800744e:	f009 f8cb 	bl	80105e8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	7b9b      	ldrb	r3, [r3, #14]
 8007456:	3b01      	subs	r3, #1
 8007458:	b2da      	uxtb	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	739a      	strb	r2, [r3, #14]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	7b9b      	ldrb	r3, [r3, #14]
 8007462:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007464:	7dbb      	ldrb	r3, [r7, #22]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d143      	bne.n	80074f2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7b1b      	ldrb	r3, [r3, #12]
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	7b5b      	ldrb	r3, [r3, #13]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d011      	beq.n	80074aa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <pbuf_free+0x90>
 8007492:	4b1d      	ldr	r3, [pc, #116]	; (8007508 <pbuf_free+0xf8>)
 8007494:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007498:	491f      	ldr	r1, [pc, #124]	; (8007518 <pbuf_free+0x108>)
 800749a:	481d      	ldr	r0, [pc, #116]	; (8007510 <pbuf_free+0x100>)
 800749c:	f009 f8a4 	bl	80105e8 <iprintf>
        pc->custom_free_function(p);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	4798      	blx	r3
 80074a8:	e01d      	b.n	80074e6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d104      	bne.n	80074ba <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	2008      	movs	r0, #8
 80074b4:	f7ff f99e 	bl	80067f4 <memp_free>
 80074b8:	e015      	b.n	80074e6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d104      	bne.n	80074ca <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	2007      	movs	r0, #7
 80074c4:	f7ff f996 	bl	80067f4 <memp_free>
 80074c8:	e00d      	b.n	80074e6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d103      	bne.n	80074d8 <pbuf_free+0xc8>
          mem_free(p);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7fe fe6f 	bl	80061b4 <mem_free>
 80074d6:	e006      	b.n	80074e6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80074d8:	4b0b      	ldr	r3, [pc, #44]	; (8007508 <pbuf_free+0xf8>)
 80074da:	f240 320f 	movw	r2, #783	; 0x30f
 80074de:	490f      	ldr	r1, [pc, #60]	; (800751c <pbuf_free+0x10c>)
 80074e0:	480b      	ldr	r0, [pc, #44]	; (8007510 <pbuf_free+0x100>)
 80074e2:	f009 f881 	bl	80105e8 <iprintf>
        }
      }
      count++;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	3301      	adds	r3, #1
 80074ea:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	607b      	str	r3, [r7, #4]
 80074f0:	e001      	b.n	80074f6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d19f      	bne.n	800743c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	08011c6c 	.word	0x08011c6c
 800750c:	08011dd0 	.word	0x08011dd0
 8007510:	08011ccc 	.word	0x08011ccc
 8007514:	08011dfc 	.word	0x08011dfc
 8007518:	08011e14 	.word	0x08011e14
 800751c:	08011e38 	.word	0x08011e38

08007520 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800752c:	e005      	b.n	800753a <pbuf_clen+0x1a>
    ++len;
 800752e:	89fb      	ldrh	r3, [r7, #14]
 8007530:	3301      	adds	r3, #1
 8007532:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f6      	bne.n	800752e <pbuf_clen+0xe>
  }
  return len;
 8007540:	89fb      	ldrh	r3, [r7, #14]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d010      	beq.n	8007580 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	7b9b      	ldrb	r3, [r3, #14]
 8007562:	3301      	adds	r3, #1
 8007564:	b2da      	uxtb	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	7b9b      	ldrb	r3, [r3, #14]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <pbuf_ref+0x30>
 8007572:	4b05      	ldr	r3, [pc, #20]	; (8007588 <pbuf_ref+0x38>)
 8007574:	f240 3242 	movw	r2, #834	; 0x342
 8007578:	4904      	ldr	r1, [pc, #16]	; (800758c <pbuf_ref+0x3c>)
 800757a:	4805      	ldr	r0, [pc, #20]	; (8007590 <pbuf_ref+0x40>)
 800757c:	f009 f834 	bl	80105e8 <iprintf>
  }
}
 8007580:	bf00      	nop
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	08011c6c 	.word	0x08011c6c
 800758c:	08011e4c 	.word	0x08011e4c
 8007590:	08011ccc 	.word	0x08011ccc

08007594 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <pbuf_cat+0x16>
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d107      	bne.n	80075ba <pbuf_cat+0x26>
 80075aa:	4b20      	ldr	r3, [pc, #128]	; (800762c <pbuf_cat+0x98>)
 80075ac:	f240 325a 	movw	r2, #858	; 0x35a
 80075b0:	491f      	ldr	r1, [pc, #124]	; (8007630 <pbuf_cat+0x9c>)
 80075b2:	4820      	ldr	r0, [pc, #128]	; (8007634 <pbuf_cat+0xa0>)
 80075b4:	f009 f818 	bl	80105e8 <iprintf>
 80075b8:	e034      	b.n	8007624 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	e00a      	b.n	80075d6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	891a      	ldrh	r2, [r3, #8]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	891b      	ldrh	r3, [r3, #8]
 80075c8:	4413      	add	r3, r2
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f0      	bne.n	80075c0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	891a      	ldrh	r2, [r3, #8]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	895b      	ldrh	r3, [r3, #10]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d006      	beq.n	80075f8 <pbuf_cat+0x64>
 80075ea:	4b10      	ldr	r3, [pc, #64]	; (800762c <pbuf_cat+0x98>)
 80075ec:	f240 3262 	movw	r2, #866	; 0x362
 80075f0:	4911      	ldr	r1, [pc, #68]	; (8007638 <pbuf_cat+0xa4>)
 80075f2:	4810      	ldr	r0, [pc, #64]	; (8007634 <pbuf_cat+0xa0>)
 80075f4:	f008 fff8 	bl	80105e8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d006      	beq.n	800760e <pbuf_cat+0x7a>
 8007600:	4b0a      	ldr	r3, [pc, #40]	; (800762c <pbuf_cat+0x98>)
 8007602:	f240 3263 	movw	r2, #867	; 0x363
 8007606:	490d      	ldr	r1, [pc, #52]	; (800763c <pbuf_cat+0xa8>)
 8007608:	480a      	ldr	r0, [pc, #40]	; (8007634 <pbuf_cat+0xa0>)
 800760a:	f008 ffed 	bl	80105e8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	891a      	ldrh	r2, [r3, #8]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	891b      	ldrh	r3, [r3, #8]
 8007616:	4413      	add	r3, r2
 8007618:	b29a      	uxth	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	08011c6c 	.word	0x08011c6c
 8007630:	08011e60 	.word	0x08011e60
 8007634:	08011ccc 	.word	0x08011ccc
 8007638:	08011e98 	.word	0x08011e98
 800763c:	08011ec8 	.word	0x08011ec8

08007640 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	2300      	movs	r3, #0
 8007650:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d008      	beq.n	800766a <pbuf_copy+0x2a>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d005      	beq.n	800766a <pbuf_copy+0x2a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	891a      	ldrh	r2, [r3, #8]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	891b      	ldrh	r3, [r3, #8]
 8007666:	429a      	cmp	r2, r3
 8007668:	d209      	bcs.n	800767e <pbuf_copy+0x3e>
 800766a:	4b57      	ldr	r3, [pc, #348]	; (80077c8 <pbuf_copy+0x188>)
 800766c:	f240 32ca 	movw	r2, #970	; 0x3ca
 8007670:	4956      	ldr	r1, [pc, #344]	; (80077cc <pbuf_copy+0x18c>)
 8007672:	4857      	ldr	r0, [pc, #348]	; (80077d0 <pbuf_copy+0x190>)
 8007674:	f008 ffb8 	bl	80105e8 <iprintf>
 8007678:	f06f 030f 	mvn.w	r3, #15
 800767c:	e09f      	b.n	80077be <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	895b      	ldrh	r3, [r3, #10]
 8007682:	461a      	mov	r2, r3
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	1ad2      	subs	r2, r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	895b      	ldrh	r3, [r3, #10]
 800768c:	4619      	mov	r1, r3
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1acb      	subs	r3, r1, r3
 8007692:	429a      	cmp	r2, r3
 8007694:	d306      	bcc.n	80076a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	895b      	ldrh	r3, [r3, #10]
 800769a:	461a      	mov	r2, r3
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	e005      	b.n	80076b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	895b      	ldrh	r3, [r3, #10]
 80076a8:	461a      	mov	r2, r3
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	18d0      	adds	r0, r2, r3
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	4413      	add	r3, r2
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4619      	mov	r1, r3
 80076c4:	f008 ff7d 	bl	80105c2 <memcpy>
    offset_to += len;
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4413      	add	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	895b      	ldrh	r3, [r3, #10]
 80076dc:	461a      	mov	r2, r3
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d906      	bls.n	80076f2 <pbuf_copy+0xb2>
 80076e4:	4b38      	ldr	r3, [pc, #224]	; (80077c8 <pbuf_copy+0x188>)
 80076e6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80076ea:	493a      	ldr	r1, [pc, #232]	; (80077d4 <pbuf_copy+0x194>)
 80076ec:	4838      	ldr	r0, [pc, #224]	; (80077d0 <pbuf_copy+0x190>)
 80076ee:	f008 ff7b 	bl	80105e8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	895b      	ldrh	r3, [r3, #10]
 80076f6:	461a      	mov	r2, r3
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d906      	bls.n	800770c <pbuf_copy+0xcc>
 80076fe:	4b32      	ldr	r3, [pc, #200]	; (80077c8 <pbuf_copy+0x188>)
 8007700:	f240 32da 	movw	r2, #986	; 0x3da
 8007704:	4934      	ldr	r1, [pc, #208]	; (80077d8 <pbuf_copy+0x198>)
 8007706:	4832      	ldr	r0, [pc, #200]	; (80077d0 <pbuf_copy+0x190>)
 8007708:	f008 ff6e 	bl	80105e8 <iprintf>
    if (offset_from >= p_from->len) {
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	895b      	ldrh	r3, [r3, #10]
 8007710:	461a      	mov	r2, r3
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	4293      	cmp	r3, r2
 8007716:	d304      	bcc.n	8007722 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	895b      	ldrh	r3, [r3, #10]
 8007726:	461a      	mov	r2, r3
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	4293      	cmp	r3, r2
 800772c:	d114      	bne.n	8007758 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10c      	bne.n	8007758 <pbuf_copy+0x118>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <pbuf_copy+0x118>
 8007744:	4b20      	ldr	r3, [pc, #128]	; (80077c8 <pbuf_copy+0x188>)
 8007746:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800774a:	4924      	ldr	r1, [pc, #144]	; (80077dc <pbuf_copy+0x19c>)
 800774c:	4820      	ldr	r0, [pc, #128]	; (80077d0 <pbuf_copy+0x190>)
 800774e:	f008 ff4b 	bl	80105e8 <iprintf>
 8007752:	f06f 030f 	mvn.w	r3, #15
 8007756:	e032      	b.n	80077be <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d013      	beq.n	8007786 <pbuf_copy+0x146>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	895a      	ldrh	r2, [r3, #10]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	891b      	ldrh	r3, [r3, #8]
 8007766:	429a      	cmp	r2, r3
 8007768:	d10d      	bne.n	8007786 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <pbuf_copy+0x146>
 8007772:	4b15      	ldr	r3, [pc, #84]	; (80077c8 <pbuf_copy+0x188>)
 8007774:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8007778:	4919      	ldr	r1, [pc, #100]	; (80077e0 <pbuf_copy+0x1a0>)
 800777a:	4815      	ldr	r0, [pc, #84]	; (80077d0 <pbuf_copy+0x190>)
 800777c:	f008 ff34 	bl	80105e8 <iprintf>
 8007780:	f06f 0305 	mvn.w	r3, #5
 8007784:	e01b      	b.n	80077be <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d013      	beq.n	80077b4 <pbuf_copy+0x174>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	895a      	ldrh	r2, [r3, #10]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	891b      	ldrh	r3, [r3, #8]
 8007794:	429a      	cmp	r2, r3
 8007796:	d10d      	bne.n	80077b4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d009      	beq.n	80077b4 <pbuf_copy+0x174>
 80077a0:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <pbuf_copy+0x188>)
 80077a2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80077a6:	490e      	ldr	r1, [pc, #56]	; (80077e0 <pbuf_copy+0x1a0>)
 80077a8:	4809      	ldr	r0, [pc, #36]	; (80077d0 <pbuf_copy+0x190>)
 80077aa:	f008 ff1d 	bl	80105e8 <iprintf>
 80077ae:	f06f 0305 	mvn.w	r3, #5
 80077b2:	e004      	b.n	80077be <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f47f af61 	bne.w	800767e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	08011c6c 	.word	0x08011c6c
 80077cc:	08011f14 	.word	0x08011f14
 80077d0:	08011ccc 	.word	0x08011ccc
 80077d4:	08011f44 	.word	0x08011f44
 80077d8:	08011f5c 	.word	0x08011f5c
 80077dc:	08011f78 	.word	0x08011f78
 80077e0:	08011f88 	.word	0x08011f88

080077e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4611      	mov	r1, r2
 80077f0:	461a      	mov	r2, r3
 80077f2:	460b      	mov	r3, r1
 80077f4:	80fb      	strh	r3, [r7, #6]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d108      	bne.n	800781a <pbuf_copy_partial+0x36>
 8007808:	4b2b      	ldr	r3, [pc, #172]	; (80078b8 <pbuf_copy_partial+0xd4>)
 800780a:	f240 420a 	movw	r2, #1034	; 0x40a
 800780e:	492b      	ldr	r1, [pc, #172]	; (80078bc <pbuf_copy_partial+0xd8>)
 8007810:	482b      	ldr	r0, [pc, #172]	; (80078c0 <pbuf_copy_partial+0xdc>)
 8007812:	f008 fee9 	bl	80105e8 <iprintf>
 8007816:	2300      	movs	r3, #0
 8007818:	e04a      	b.n	80078b0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d108      	bne.n	8007832 <pbuf_copy_partial+0x4e>
 8007820:	4b25      	ldr	r3, [pc, #148]	; (80078b8 <pbuf_copy_partial+0xd4>)
 8007822:	f240 420b 	movw	r2, #1035	; 0x40b
 8007826:	4927      	ldr	r1, [pc, #156]	; (80078c4 <pbuf_copy_partial+0xe0>)
 8007828:	4825      	ldr	r0, [pc, #148]	; (80078c0 <pbuf_copy_partial+0xdc>)
 800782a:	f008 fedd 	bl	80105e8 <iprintf>
 800782e:	2300      	movs	r3, #0
 8007830:	e03e      	b.n	80078b0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	61fb      	str	r3, [r7, #28]
 8007836:	e034      	b.n	80078a2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007838:	88bb      	ldrh	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <pbuf_copy_partial+0x70>
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	895b      	ldrh	r3, [r3, #10]
 8007842:	88ba      	ldrh	r2, [r7, #4]
 8007844:	429a      	cmp	r2, r3
 8007846:	d305      	bcc.n	8007854 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	895b      	ldrh	r3, [r3, #10]
 800784c:	88ba      	ldrh	r2, [r7, #4]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	80bb      	strh	r3, [r7, #4]
 8007852:	e023      	b.n	800789c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	895a      	ldrh	r2, [r3, #10]
 8007858:	88bb      	ldrh	r3, [r7, #4]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800785e:	8b3a      	ldrh	r2, [r7, #24]
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	429a      	cmp	r2, r3
 8007864:	d901      	bls.n	800786a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800786a:	8b7b      	ldrh	r3, [r7, #26]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	18d0      	adds	r0, r2, r3
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	88bb      	ldrh	r3, [r7, #4]
 8007876:	4413      	add	r3, r2
 8007878:	8b3a      	ldrh	r2, [r7, #24]
 800787a:	4619      	mov	r1, r3
 800787c:	f008 fea1 	bl	80105c2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007880:	8afa      	ldrh	r2, [r7, #22]
 8007882:	8b3b      	ldrh	r3, [r7, #24]
 8007884:	4413      	add	r3, r2
 8007886:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007888:	8b7a      	ldrh	r2, [r7, #26]
 800788a:	8b3b      	ldrh	r3, [r7, #24]
 800788c:	4413      	add	r3, r2
 800788e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007890:	88fa      	ldrh	r2, [r7, #6]
 8007892:	8b3b      	ldrh	r3, [r7, #24]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	61fb      	str	r3, [r7, #28]
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <pbuf_copy_partial+0xca>
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1c4      	bne.n	8007838 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80078ae:	8afb      	ldrh	r3, [r7, #22]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3720      	adds	r7, #32
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	08011c6c 	.word	0x08011c6c
 80078bc:	08011fb4 	.word	0x08011fb4
 80078c0:	08011ccc 	.word	0x08011ccc
 80078c4:	08011fd4 	.word	0x08011fd4

080078c8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	603a      	str	r2, [r7, #0]
 80078d2:	71fb      	strb	r3, [r7, #7]
 80078d4:	460b      	mov	r3, r1
 80078d6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	8919      	ldrh	r1, [r3, #8]
 80078dc:	88ba      	ldrh	r2, [r7, #4]
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff fab5 	bl	8006e50 <pbuf_alloc>
 80078e6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <pbuf_clone+0x2a>
    return NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	e011      	b.n	8007916 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7ff fea3 	bl	8007640 <pbuf_copy>
 80078fa:	4603      	mov	r3, r0
 80078fc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80078fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d006      	beq.n	8007914 <pbuf_clone+0x4c>
 8007906:	4b06      	ldr	r3, [pc, #24]	; (8007920 <pbuf_clone+0x58>)
 8007908:	f240 5224 	movw	r2, #1316	; 0x524
 800790c:	4905      	ldr	r1, [pc, #20]	; (8007924 <pbuf_clone+0x5c>)
 800790e:	4806      	ldr	r0, [pc, #24]	; (8007928 <pbuf_clone+0x60>)
 8007910:	f008 fe6a 	bl	80105e8 <iprintf>
  return q;
 8007914:	68fb      	ldr	r3, [r7, #12]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	08011c6c 	.word	0x08011c6c
 8007924:	080120e0 	.word	0x080120e0
 8007928:	08011ccc 	.word	0x08011ccc

0800792c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007930:	f008 fe72 	bl	8010618 <rand>
 8007934:	4603      	mov	r3, r0
 8007936:	b29b      	uxth	r3, r3
 8007938:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800793c:	b29b      	uxth	r3, r3
 800793e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007942:	b29a      	uxth	r2, r3
 8007944:	4b01      	ldr	r3, [pc, #4]	; (800794c <tcp_init+0x20>)
 8007946:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007948:	bf00      	nop
 800794a:	bd80      	pop	{r7, pc}
 800794c:	2000000a 	.word	0x2000000a

08007950 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	7d1b      	ldrb	r3, [r3, #20]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d105      	bne.n	800796c <tcp_free+0x1c>
 8007960:	4b06      	ldr	r3, [pc, #24]	; (800797c <tcp_free+0x2c>)
 8007962:	22d4      	movs	r2, #212	; 0xd4
 8007964:	4906      	ldr	r1, [pc, #24]	; (8007980 <tcp_free+0x30>)
 8007966:	4807      	ldr	r0, [pc, #28]	; (8007984 <tcp_free+0x34>)
 8007968:	f008 fe3e 	bl	80105e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800796c:	6879      	ldr	r1, [r7, #4]
 800796e:	2001      	movs	r0, #1
 8007970:	f7fe ff40 	bl	80067f4 <memp_free>
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	0801216c 	.word	0x0801216c
 8007980:	0801219c 	.word	0x0801219c
 8007984:	080121b0 	.word	0x080121b0

08007988 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	7d1b      	ldrb	r3, [r3, #20]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d105      	bne.n	80079a4 <tcp_free_listen+0x1c>
 8007998:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <tcp_free_listen+0x2c>)
 800799a:	22df      	movs	r2, #223	; 0xdf
 800799c:	4906      	ldr	r1, [pc, #24]	; (80079b8 <tcp_free_listen+0x30>)
 800799e:	4807      	ldr	r0, [pc, #28]	; (80079bc <tcp_free_listen+0x34>)
 80079a0:	f008 fe22 	bl	80105e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	2002      	movs	r0, #2
 80079a8:	f7fe ff24 	bl	80067f4 <memp_free>
}
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	0801216c 	.word	0x0801216c
 80079b8:	080121d8 	.word	0x080121d8
 80079bc:	080121b0 	.word	0x080121b0

080079c0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80079c4:	f001 f852 	bl	8008a6c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80079c8:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <tcp_tmr+0x28>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	3301      	adds	r3, #1
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <tcp_tmr+0x28>)
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <tcp_tmr+0x28>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80079e0:	f000 fd06 	bl	80083f0 <tcp_slowtmr>
  }
}
 80079e4:	bf00      	nop
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000509 	.word	0x20000509

080079ec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d105      	bne.n	8007a08 <tcp_remove_listener+0x1c>
 80079fc:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <tcp_remove_listener+0x48>)
 80079fe:	22ff      	movs	r2, #255	; 0xff
 8007a00:	490d      	ldr	r1, [pc, #52]	; (8007a38 <tcp_remove_listener+0x4c>)
 8007a02:	480e      	ldr	r0, [pc, #56]	; (8007a3c <tcp_remove_listener+0x50>)
 8007a04:	f008 fdf0 	bl	80105e8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	e00a      	b.n	8007a24 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d102      	bne.n	8007a1e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1f1      	bne.n	8007a0e <tcp_remove_listener+0x22>
    }
  }
}
 8007a2a:	bf00      	nop
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	0801216c 	.word	0x0801216c
 8007a38:	080121f4 	.word	0x080121f4
 8007a3c:	080121b0 	.word	0x080121b0

08007a40 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d106      	bne.n	8007a5c <tcp_listen_closed+0x1c>
 8007a4e:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <tcp_listen_closed+0x60>)
 8007a50:	f240 1211 	movw	r2, #273	; 0x111
 8007a54:	4913      	ldr	r1, [pc, #76]	; (8007aa4 <tcp_listen_closed+0x64>)
 8007a56:	4814      	ldr	r0, [pc, #80]	; (8007aa8 <tcp_listen_closed+0x68>)
 8007a58:	f008 fdc6 	bl	80105e8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	7d1b      	ldrb	r3, [r3, #20]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d006      	beq.n	8007a72 <tcp_listen_closed+0x32>
 8007a64:	4b0e      	ldr	r3, [pc, #56]	; (8007aa0 <tcp_listen_closed+0x60>)
 8007a66:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007a6a:	4910      	ldr	r1, [pc, #64]	; (8007aac <tcp_listen_closed+0x6c>)
 8007a6c:	480e      	ldr	r0, [pc, #56]	; (8007aa8 <tcp_listen_closed+0x68>)
 8007a6e:	f008 fdbb 	bl	80105e8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007a72:	2301      	movs	r3, #1
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	e00b      	b.n	8007a90 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007a78:	4a0d      	ldr	r2, [pc, #52]	; (8007ab0 <tcp_listen_closed+0x70>)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff ffb1 	bl	80079ec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d9f0      	bls.n	8007a78 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	0801216c 	.word	0x0801216c
 8007aa4:	0801221c 	.word	0x0801221c
 8007aa8:	080121b0 	.word	0x080121b0
 8007aac:	08012228 	.word	0x08012228
 8007ab0:	08014374 	.word	0x08014374

08007ab4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007ab4:	b5b0      	push	{r4, r5, r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af04      	add	r7, sp, #16
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <tcp_close_shutdown+0x20>
 8007ac6:	4b61      	ldr	r3, [pc, #388]	; (8007c4c <tcp_close_shutdown+0x198>)
 8007ac8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007acc:	4960      	ldr	r1, [pc, #384]	; (8007c50 <tcp_close_shutdown+0x19c>)
 8007ace:	4861      	ldr	r0, [pc, #388]	; (8007c54 <tcp_close_shutdown+0x1a0>)
 8007ad0:	f008 fd8a 	bl	80105e8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d066      	beq.n	8007ba8 <tcp_close_shutdown+0xf4>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	7d1b      	ldrb	r3, [r3, #20]
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d003      	beq.n	8007aea <tcp_close_shutdown+0x36>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	7d1b      	ldrb	r3, [r3, #20]
 8007ae6:	2b07      	cmp	r3, #7
 8007ae8:	d15e      	bne.n	8007ba8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d104      	bne.n	8007afc <tcp_close_shutdown+0x48>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007afa:	d055      	beq.n	8007ba8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8b5b      	ldrh	r3, [r3, #26]
 8007b00:	f003 0310 	and.w	r3, r3, #16
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d106      	bne.n	8007b16 <tcp_close_shutdown+0x62>
 8007b08:	4b50      	ldr	r3, [pc, #320]	; (8007c4c <tcp_close_shutdown+0x198>)
 8007b0a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007b0e:	4952      	ldr	r1, [pc, #328]	; (8007c58 <tcp_close_shutdown+0x1a4>)
 8007b10:	4850      	ldr	r0, [pc, #320]	; (8007c54 <tcp_close_shutdown+0x1a0>)
 8007b12:	f008 fd69 	bl	80105e8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007b1e:	687d      	ldr	r5, [r7, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3304      	adds	r3, #4
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	8ad2      	ldrh	r2, [r2, #22]
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	8b09      	ldrh	r1, [r1, #24]
 8007b2c:	9102      	str	r1, [sp, #8]
 8007b2e:	9201      	str	r2, [sp, #4]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	462b      	mov	r3, r5
 8007b34:	4622      	mov	r2, r4
 8007b36:	4601      	mov	r1, r0
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f005 fd91 	bl	800d660 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 fb60 	bl	8009204 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007b44:	4b45      	ldr	r3, [pc, #276]	; (8007c5c <tcp_close_shutdown+0x1a8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d105      	bne.n	8007b5a <tcp_close_shutdown+0xa6>
 8007b4e:	4b43      	ldr	r3, [pc, #268]	; (8007c5c <tcp_close_shutdown+0x1a8>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	4a41      	ldr	r2, [pc, #260]	; (8007c5c <tcp_close_shutdown+0x1a8>)
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	e013      	b.n	8007b82 <tcp_close_shutdown+0xce>
 8007b5a:	4b40      	ldr	r3, [pc, #256]	; (8007c5c <tcp_close_shutdown+0x1a8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	e00c      	b.n	8007b7c <tcp_close_shutdown+0xc8>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d104      	bne.n	8007b76 <tcp_close_shutdown+0xc2>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68da      	ldr	r2, [r3, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	60da      	str	r2, [r3, #12]
 8007b74:	e005      	b.n	8007b82 <tcp_close_shutdown+0xce>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1ef      	bne.n	8007b62 <tcp_close_shutdown+0xae>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	60da      	str	r2, [r3, #12]
 8007b88:	4b35      	ldr	r3, [pc, #212]	; (8007c60 <tcp_close_shutdown+0x1ac>)
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007b8e:	4b35      	ldr	r3, [pc, #212]	; (8007c64 <tcp_close_shutdown+0x1b0>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d102      	bne.n	8007b9e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007b98:	f003 fff2 	bl	800bb80 <tcp_trigger_input_pcb_close>
 8007b9c:	e002      	b.n	8007ba4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff fed6 	bl	8007950 <tcp_free>
      }
      return ERR_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e04d      	b.n	8007c44 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	7d1b      	ldrb	r3, [r3, #20]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d02d      	beq.n	8007c0c <tcp_close_shutdown+0x158>
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d036      	beq.n	8007c22 <tcp_close_shutdown+0x16e>
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d13f      	bne.n	8007c38 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	8adb      	ldrh	r3, [r3, #22]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d021      	beq.n	8007c04 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007bc0:	4b29      	ldr	r3, [pc, #164]	; (8007c68 <tcp_close_shutdown+0x1b4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d105      	bne.n	8007bd6 <tcp_close_shutdown+0x122>
 8007bca:	4b27      	ldr	r3, [pc, #156]	; (8007c68 <tcp_close_shutdown+0x1b4>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	4a25      	ldr	r2, [pc, #148]	; (8007c68 <tcp_close_shutdown+0x1b4>)
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	e013      	b.n	8007bfe <tcp_close_shutdown+0x14a>
 8007bd6:	4b24      	ldr	r3, [pc, #144]	; (8007c68 <tcp_close_shutdown+0x1b4>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60bb      	str	r3, [r7, #8]
 8007bdc:	e00c      	b.n	8007bf8 <tcp_close_shutdown+0x144>
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d104      	bne.n	8007bf2 <tcp_close_shutdown+0x13e>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68da      	ldr	r2, [r3, #12]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	60da      	str	r2, [r3, #12]
 8007bf0:	e005      	b.n	8007bfe <tcp_close_shutdown+0x14a>
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	60bb      	str	r3, [r7, #8]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1ef      	bne.n	8007bde <tcp_close_shutdown+0x12a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7ff fea3 	bl	8007950 <tcp_free>
      break;
 8007c0a:	e01a      	b.n	8007c42 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff ff17 	bl	8007a40 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007c12:	6879      	ldr	r1, [r7, #4]
 8007c14:	4815      	ldr	r0, [pc, #84]	; (8007c6c <tcp_close_shutdown+0x1b8>)
 8007c16:	f001 fb45 	bl	80092a4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff feb4 	bl	8007988 <tcp_free_listen>
      break;
 8007c20:	e00f      	b.n	8007c42 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	480d      	ldr	r0, [pc, #52]	; (8007c5c <tcp_close_shutdown+0x1a8>)
 8007c26:	f001 fb3d 	bl	80092a4 <tcp_pcb_remove>
 8007c2a:	4b0d      	ldr	r3, [pc, #52]	; (8007c60 <tcp_close_shutdown+0x1ac>)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff fe8d 	bl	8007950 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007c36:	e004      	b.n	8007c42 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f819 	bl	8007c70 <tcp_close_shutdown_fin>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	e000      	b.n	8007c44 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8007c4c:	0801216c 	.word	0x0801216c
 8007c50:	08012240 	.word	0x08012240
 8007c54:	080121b0 	.word	0x080121b0
 8007c58:	08012260 	.word	0x08012260
 8007c5c:	20007150 	.word	0x20007150
 8007c60:	2000714c 	.word	0x2000714c
 8007c64:	20007164 	.word	0x20007164
 8007c68:	2000715c 	.word	0x2000715c
 8007c6c:	20007158 	.word	0x20007158

08007c70 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d106      	bne.n	8007c8c <tcp_close_shutdown_fin+0x1c>
 8007c7e:	4b2c      	ldr	r3, [pc, #176]	; (8007d30 <tcp_close_shutdown_fin+0xc0>)
 8007c80:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007c84:	492b      	ldr	r1, [pc, #172]	; (8007d34 <tcp_close_shutdown_fin+0xc4>)
 8007c86:	482c      	ldr	r0, [pc, #176]	; (8007d38 <tcp_close_shutdown_fin+0xc8>)
 8007c88:	f008 fcae 	bl	80105e8 <iprintf>

  switch (pcb->state) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	7d1b      	ldrb	r3, [r3, #20]
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	d010      	beq.n	8007cb6 <tcp_close_shutdown_fin+0x46>
 8007c94:	2b07      	cmp	r3, #7
 8007c96:	d01b      	beq.n	8007cd0 <tcp_close_shutdown_fin+0x60>
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d126      	bne.n	8007cea <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f004 fddb 	bl	800c858 <tcp_send_fin>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d11f      	bne.n	8007cee <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2205      	movs	r2, #5
 8007cb2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007cb4:	e01b      	b.n	8007cee <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f004 fdce 	bl	800c858 <tcp_send_fin>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d114      	bne.n	8007cf2 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2205      	movs	r2, #5
 8007ccc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007cce:	e010      	b.n	8007cf2 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f004 fdc1 	bl	800c858 <tcp_send_fin>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d109      	bne.n	8007cf6 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2209      	movs	r2, #9
 8007ce6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007ce8:	e005      	b.n	8007cf6 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	e01c      	b.n	8007d28 <tcp_close_shutdown_fin+0xb8>
      break;
 8007cee:	bf00      	nop
 8007cf0:	e002      	b.n	8007cf8 <tcp_close_shutdown_fin+0x88>
      break;
 8007cf2:	bf00      	nop
 8007cf4:	e000      	b.n	8007cf8 <tcp_close_shutdown_fin+0x88>
      break;
 8007cf6:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d103      	bne.n	8007d08 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f004 fee7 	bl	800cad4 <tcp_output>
 8007d06:	e00d      	b.n	8007d24 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8007d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d10:	d108      	bne.n	8007d24 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	8b5b      	ldrh	r3, [r3, #26]
 8007d16:	f043 0308 	orr.w	r3, r3, #8
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	e001      	b.n	8007d28 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8007d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	0801216c 	.word	0x0801216c
 8007d34:	0801221c 	.word	0x0801221c
 8007d38:	080121b0 	.word	0x080121b0

08007d3c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <tcp_close+0x22>
 8007d4a:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <tcp_close+0x4c>)
 8007d4c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007d50:	490e      	ldr	r1, [pc, #56]	; (8007d8c <tcp_close+0x50>)
 8007d52:	480f      	ldr	r0, [pc, #60]	; (8007d90 <tcp_close+0x54>)
 8007d54:	f008 fc48 	bl	80105e8 <iprintf>
 8007d58:	f06f 030f 	mvn.w	r3, #15
 8007d5c:	e00f      	b.n	8007d7e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	7d1b      	ldrb	r3, [r3, #20]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d006      	beq.n	8007d74 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	8b5b      	ldrh	r3, [r3, #26]
 8007d6a:	f043 0310 	orr.w	r3, r3, #16
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007d74:	2101      	movs	r1, #1
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff fe9c 	bl	8007ab4 <tcp_close_shutdown>
 8007d7c:	4603      	mov	r3, r0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	0801216c 	.word	0x0801216c
 8007d8c:	0801227c 	.word	0x0801227c
 8007d90:	080121b0 	.word	0x080121b0

08007d94 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08e      	sub	sp, #56	; 0x38
 8007d98:	af04      	add	r7, sp, #16
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d107      	bne.n	8007db4 <tcp_abandon+0x20>
 8007da4:	4b52      	ldr	r3, [pc, #328]	; (8007ef0 <tcp_abandon+0x15c>)
 8007da6:	f240 223d 	movw	r2, #573	; 0x23d
 8007daa:	4952      	ldr	r1, [pc, #328]	; (8007ef4 <tcp_abandon+0x160>)
 8007dac:	4852      	ldr	r0, [pc, #328]	; (8007ef8 <tcp_abandon+0x164>)
 8007dae:	f008 fc1b 	bl	80105e8 <iprintf>
 8007db2:	e099      	b.n	8007ee8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	7d1b      	ldrb	r3, [r3, #20]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d106      	bne.n	8007dca <tcp_abandon+0x36>
 8007dbc:	4b4c      	ldr	r3, [pc, #304]	; (8007ef0 <tcp_abandon+0x15c>)
 8007dbe:	f240 2241 	movw	r2, #577	; 0x241
 8007dc2:	494e      	ldr	r1, [pc, #312]	; (8007efc <tcp_abandon+0x168>)
 8007dc4:	484c      	ldr	r0, [pc, #304]	; (8007ef8 <tcp_abandon+0x164>)
 8007dc6:	f008 fc0f 	bl	80105e8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	7d1b      	ldrb	r3, [r3, #20]
 8007dce:	2b0a      	cmp	r3, #10
 8007dd0:	d107      	bne.n	8007de2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	484a      	ldr	r0, [pc, #296]	; (8007f00 <tcp_abandon+0x16c>)
 8007dd6:	f001 fa65 	bl	80092a4 <tcp_pcb_remove>
    tcp_free(pcb);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff fdb8 	bl	8007950 <tcp_free>
 8007de0:	e082      	b.n	8007ee8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	7d1b      	ldrb	r3, [r3, #20]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d126      	bne.n	8007e5a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	8adb      	ldrh	r3, [r3, #22]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d02e      	beq.n	8007e72 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007e14:	4b3b      	ldr	r3, [pc, #236]	; (8007f04 <tcp_abandon+0x170>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d105      	bne.n	8007e2a <tcp_abandon+0x96>
 8007e1e:	4b39      	ldr	r3, [pc, #228]	; (8007f04 <tcp_abandon+0x170>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	4a37      	ldr	r2, [pc, #220]	; (8007f04 <tcp_abandon+0x170>)
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	e013      	b.n	8007e52 <tcp_abandon+0xbe>
 8007e2a:	4b36      	ldr	r3, [pc, #216]	; (8007f04 <tcp_abandon+0x170>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	e00c      	b.n	8007e4c <tcp_abandon+0xb8>
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d104      	bne.n	8007e46 <tcp_abandon+0xb2>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	60da      	str	r2, [r3, #12]
 8007e44:	e005      	b.n	8007e52 <tcp_abandon+0xbe>
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	61fb      	str	r3, [r7, #28]
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1ef      	bne.n	8007e32 <tcp_abandon+0x9e>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	60da      	str	r2, [r3, #12]
 8007e58:	e00b      	b.n	8007e72 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	8adb      	ldrh	r3, [r3, #22]
 8007e62:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	4828      	ldr	r0, [pc, #160]	; (8007f08 <tcp_abandon+0x174>)
 8007e68:	f001 fa1c 	bl	80092a4 <tcp_pcb_remove>
 8007e6c:	4b27      	ldr	r3, [pc, #156]	; (8007f0c <tcp_abandon+0x178>)
 8007e6e:	2201      	movs	r2, #1
 8007e70:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d004      	beq.n	8007e84 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fed4 	bl	8008c2c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d004      	beq.n	8007e96 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e90:	4618      	mov	r0, r3
 8007e92:	f000 fecb 	bl	8008c2c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fec2 	bl	8008c2c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00e      	beq.n	8007ecc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	8b12      	ldrh	r2, [r2, #24]
 8007eb8:	9202      	str	r2, [sp, #8]
 8007eba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007ebc:	9201      	str	r2, [sp, #4]
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	69b9      	ldr	r1, [r7, #24]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f005 fbca 	bl	800d660 <tcp_rst>
    }
    last_state = pcb->state;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	7d1b      	ldrb	r3, [r3, #20]
 8007ed0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff fd3c 	bl	8007950 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <tcp_abandon+0x154>
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f06f 010c 	mvn.w	r1, #12
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	4798      	blx	r3
  }
}
 8007ee8:	3728      	adds	r7, #40	; 0x28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	0801216c 	.word	0x0801216c
 8007ef4:	080122b0 	.word	0x080122b0
 8007ef8:	080121b0 	.word	0x080121b0
 8007efc:	080122cc 	.word	0x080122cc
 8007f00:	20007160 	.word	0x20007160
 8007f04:	2000715c 	.word	0x2000715c
 8007f08:	20007150 	.word	0x20007150
 8007f0c:	2000714c 	.word	0x2000714c

08007f10 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007f18:	2101      	movs	r1, #1
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff ff3a 	bl	8007d94 <tcp_abandon>
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4613      	mov	r3, r2
 8007f34:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007f36:	2304      	movs	r3, #4
 8007f38:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007f40:	4b3e      	ldr	r3, [pc, #248]	; (800803c <tcp_bind+0x114>)
 8007f42:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <tcp_bind+0x36>
 8007f4a:	4b3d      	ldr	r3, [pc, #244]	; (8008040 <tcp_bind+0x118>)
 8007f4c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007f50:	493c      	ldr	r1, [pc, #240]	; (8008044 <tcp_bind+0x11c>)
 8007f52:	483d      	ldr	r0, [pc, #244]	; (8008048 <tcp_bind+0x120>)
 8007f54:	f008 fb48 	bl	80105e8 <iprintf>
 8007f58:	f06f 030f 	mvn.w	r3, #15
 8007f5c:	e06a      	b.n	8008034 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	7d1b      	ldrb	r3, [r3, #20]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d009      	beq.n	8007f7a <tcp_bind+0x52>
 8007f66:	4b36      	ldr	r3, [pc, #216]	; (8008040 <tcp_bind+0x118>)
 8007f68:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007f6c:	4937      	ldr	r1, [pc, #220]	; (800804c <tcp_bind+0x124>)
 8007f6e:	4836      	ldr	r0, [pc, #216]	; (8008048 <tcp_bind+0x120>)
 8007f70:	f008 fb3a 	bl	80105e8 <iprintf>
 8007f74:	f06f 0305 	mvn.w	r3, #5
 8007f78:	e05c      	b.n	8008034 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007f7a:	88fb      	ldrh	r3, [r7, #6]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d109      	bne.n	8007f94 <tcp_bind+0x6c>
    port = tcp_new_port();
 8007f80:	f000 f9f0 	bl	8008364 <tcp_new_port>
 8007f84:	4603      	mov	r3, r0
 8007f86:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007f88:	88fb      	ldrh	r3, [r7, #6]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d135      	bne.n	8007ffa <tcp_bind+0xd2>
      return ERR_BUF;
 8007f8e:	f06f 0301 	mvn.w	r3, #1
 8007f92:	e04f      	b.n	8008034 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007f94:	2300      	movs	r3, #0
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e02b      	b.n	8007ff2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007f9a:	4a2d      	ldr	r2, [pc, #180]	; (8008050 <tcp_bind+0x128>)
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	61bb      	str	r3, [r7, #24]
 8007fa6:	e01e      	b.n	8007fe6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	8adb      	ldrh	r3, [r3, #22]
 8007fac:	88fa      	ldrh	r2, [r7, #6]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d116      	bne.n	8007fe0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007fb2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d010      	beq.n	8007fda <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00c      	beq.n	8007fda <tcp_bind+0xb2>
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d009      	beq.n	8007fda <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d102      	bne.n	8007fe0 <tcp_bind+0xb8>
              return ERR_USE;
 8007fda:	f06f 0307 	mvn.w	r3, #7
 8007fde:	e029      	b.n	8008034 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	61bb      	str	r3, [r7, #24]
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1dd      	bne.n	8007fa8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	61fb      	str	r3, [r7, #28]
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	dbcf      	blt.n	8007f9a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00c      	beq.n	800801a <tcp_bind+0xf2>
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d008      	beq.n	800801a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <tcp_bind+0xec>
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	e000      	b.n	8008016 <tcp_bind+0xee>
 8008014:	2300      	movs	r3, #0
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	88fa      	ldrh	r2, [r7, #6]
 800801e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008020:	4b0c      	ldr	r3, [pc, #48]	; (8008054 <tcp_bind+0x12c>)
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	60da      	str	r2, [r3, #12]
 8008028:	4a0a      	ldr	r2, [pc, #40]	; (8008054 <tcp_bind+0x12c>)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	f005 fcd9 	bl	800d9e4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3720      	adds	r7, #32
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	0801439c 	.word	0x0801439c
 8008040:	0801216c 	.word	0x0801216c
 8008044:	08012300 	.word	0x08012300
 8008048:	080121b0 	.word	0x080121b0
 800804c:	08012318 	.word	0x08012318
 8008050:	08014374 	.word	0x08014374
 8008054:	2000715c 	.word	0x2000715c

08008058 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4613      	mov	r3, r2
 8008064:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d106      	bne.n	800807a <tcp_accept_null+0x22>
 800806c:	4b07      	ldr	r3, [pc, #28]	; (800808c <tcp_accept_null+0x34>)
 800806e:	f240 320f 	movw	r2, #783	; 0x30f
 8008072:	4907      	ldr	r1, [pc, #28]	; (8008090 <tcp_accept_null+0x38>)
 8008074:	4807      	ldr	r0, [pc, #28]	; (8008094 <tcp_accept_null+0x3c>)
 8008076:	f008 fab7 	bl	80105e8 <iprintf>

  tcp_abort(pcb);
 800807a:	68b8      	ldr	r0, [r7, #8]
 800807c:	f7ff ff48 	bl	8007f10 <tcp_abort>

  return ERR_ABRT;
 8008080:	f06f 030c 	mvn.w	r3, #12
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	0801216c 	.word	0x0801216c
 8008090:	08012340 	.word	0x08012340
 8008094:	080121b0 	.word	0x080121b0

08008098 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80080a4:	78fb      	ldrb	r3, [r7, #3]
 80080a6:	2200      	movs	r2, #0
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f806 	bl	80080bc <tcp_listen_with_backlog_and_err>
 80080b0:	4603      	mov	r3, r0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b088      	sub	sp, #32
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	460b      	mov	r3, r1
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d109      	bne.n	80080e8 <tcp_listen_with_backlog_and_err+0x2c>
 80080d4:	4b47      	ldr	r3, [pc, #284]	; (80081f4 <tcp_listen_with_backlog_and_err+0x138>)
 80080d6:	f240 3259 	movw	r2, #857	; 0x359
 80080da:	4947      	ldr	r1, [pc, #284]	; (80081f8 <tcp_listen_with_backlog_and_err+0x13c>)
 80080dc:	4847      	ldr	r0, [pc, #284]	; (80081fc <tcp_listen_with_backlog_and_err+0x140>)
 80080de:	f008 fa83 	bl	80105e8 <iprintf>
 80080e2:	23f0      	movs	r3, #240	; 0xf0
 80080e4:	76fb      	strb	r3, [r7, #27]
 80080e6:	e079      	b.n	80081dc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	7d1b      	ldrb	r3, [r3, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d009      	beq.n	8008104 <tcp_listen_with_backlog_and_err+0x48>
 80080f0:	4b40      	ldr	r3, [pc, #256]	; (80081f4 <tcp_listen_with_backlog_and_err+0x138>)
 80080f2:	f240 325a 	movw	r2, #858	; 0x35a
 80080f6:	4942      	ldr	r1, [pc, #264]	; (8008200 <tcp_listen_with_backlog_and_err+0x144>)
 80080f8:	4840      	ldr	r0, [pc, #256]	; (80081fc <tcp_listen_with_backlog_and_err+0x140>)
 80080fa:	f008 fa75 	bl	80105e8 <iprintf>
 80080fe:	23f1      	movs	r3, #241	; 0xf1
 8008100:	76fb      	strb	r3, [r7, #27]
 8008102:	e06b      	b.n	80081dc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	7d1b      	ldrb	r3, [r3, #20]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d104      	bne.n	8008116 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008110:	23f7      	movs	r3, #247	; 0xf7
 8008112:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008114:	e062      	b.n	80081dc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008116:	2002      	movs	r0, #2
 8008118:	f7fe fb20 	bl	800675c <memp_malloc>
 800811c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8008124:	23ff      	movs	r3, #255	; 0xff
 8008126:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008128:	e058      	b.n	80081dc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	691a      	ldr	r2, [r3, #16]
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8ada      	ldrh	r2, [r3, #22]
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	2201      	movs	r2, #1
 800813e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	7d5a      	ldrb	r2, [r3, #21]
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	7a5a      	ldrb	r2, [r3, #9]
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	2200      	movs	r2, #0
 8008154:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	7ada      	ldrb	r2, [r3, #11]
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	7a9a      	ldrb	r2, [r3, #10]
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8adb      	ldrh	r3, [r3, #22]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d021      	beq.n	80081ba <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008176:	4b23      	ldr	r3, [pc, #140]	; (8008204 <tcp_listen_with_backlog_and_err+0x148>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	429a      	cmp	r2, r3
 800817e:	d105      	bne.n	800818c <tcp_listen_with_backlog_and_err+0xd0>
 8008180:	4b20      	ldr	r3, [pc, #128]	; (8008204 <tcp_listen_with_backlog_and_err+0x148>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	4a1f      	ldr	r2, [pc, #124]	; (8008204 <tcp_listen_with_backlog_and_err+0x148>)
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	e013      	b.n	80081b4 <tcp_listen_with_backlog_and_err+0xf8>
 800818c:	4b1d      	ldr	r3, [pc, #116]	; (8008204 <tcp_listen_with_backlog_and_err+0x148>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	e00c      	b.n	80081ae <tcp_listen_with_backlog_and_err+0xf2>
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	429a      	cmp	r2, r3
 800819c:	d104      	bne.n	80081a8 <tcp_listen_with_backlog_and_err+0xec>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	60da      	str	r2, [r3, #12]
 80081a6:	e005      	b.n	80081b4 <tcp_listen_with_backlog_and_err+0xf8>
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1ef      	bne.n	8008194 <tcp_listen_with_backlog_and_err+0xd8>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f7ff fbc8 	bl	8007950 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	4a11      	ldr	r2, [pc, #68]	; (8008208 <tcp_listen_with_backlog_and_err+0x14c>)
 80081c4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80081c6:	4b11      	ldr	r3, [pc, #68]	; (800820c <tcp_listen_with_backlog_and_err+0x150>)
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	60da      	str	r2, [r3, #12]
 80081ce:	4a0f      	ldr	r2, [pc, #60]	; (800820c <tcp_listen_with_backlog_and_err+0x150>)
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	f005 fc06 	bl	800d9e4 <tcp_timer_needed>
  res = ERR_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	7efa      	ldrb	r2, [r7, #27]
 80081e6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80081e8:	69fb      	ldr	r3, [r7, #28]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3720      	adds	r7, #32
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	0801216c 	.word	0x0801216c
 80081f8:	08012360 	.word	0x08012360
 80081fc:	080121b0 	.word	0x080121b0
 8008200:	08012390 	.word	0x08012390
 8008204:	2000715c 	.word	0x2000715c
 8008208:	08008059 	.word	0x08008059
 800820c:	20007158 	.word	0x20007158

08008210 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <tcp_update_rcv_ann_wnd+0x1c>
 800821e:	4b25      	ldr	r3, [pc, #148]	; (80082b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8008220:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008224:	4924      	ldr	r1, [pc, #144]	; (80082b8 <tcp_update_rcv_ann_wnd+0xa8>)
 8008226:	4825      	ldr	r0, [pc, #148]	; (80082bc <tcp_update_rcv_ann_wnd+0xac>)
 8008228:	f008 f9de 	bl	80105e8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008234:	4413      	add	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008240:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008244:	bf28      	it	cs
 8008246:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800824a:	b292      	uxth	r2, r2
 800824c:	4413      	add	r3, r2
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	db08      	blt.n	8008268 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	e020      	b.n	80082aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	dd03      	ble.n	800827e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800827c:	e014      	b.n	80082a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008290:	d306      	bcc.n	80082a0 <tcp_update_rcv_ann_wnd+0x90>
 8008292:	4b08      	ldr	r3, [pc, #32]	; (80082b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8008294:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008298:	4909      	ldr	r1, [pc, #36]	; (80082c0 <tcp_update_rcv_ann_wnd+0xb0>)
 800829a:	4808      	ldr	r0, [pc, #32]	; (80082bc <tcp_update_rcv_ann_wnd+0xac>)
 800829c:	f008 f9a4 	bl	80105e8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80082a8:	2300      	movs	r3, #0
  }
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	0801216c 	.word	0x0801216c
 80082b8:	080123c8 	.word	0x080123c8
 80082bc:	080121b0 	.word	0x080121b0
 80082c0:	080123ec 	.word	0x080123ec

080082c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d107      	bne.n	80082e6 <tcp_recved+0x22>
 80082d6:	4b1f      	ldr	r3, [pc, #124]	; (8008354 <tcp_recved+0x90>)
 80082d8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80082dc:	491e      	ldr	r1, [pc, #120]	; (8008358 <tcp_recved+0x94>)
 80082de:	481f      	ldr	r0, [pc, #124]	; (800835c <tcp_recved+0x98>)
 80082e0:	f008 f982 	bl	80105e8 <iprintf>
 80082e4:	e032      	b.n	800834c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	7d1b      	ldrb	r3, [r3, #20]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d106      	bne.n	80082fc <tcp_recved+0x38>
 80082ee:	4b19      	ldr	r3, [pc, #100]	; (8008354 <tcp_recved+0x90>)
 80082f0:	f240 32d3 	movw	r2, #979	; 0x3d3
 80082f4:	491a      	ldr	r1, [pc, #104]	; (8008360 <tcp_recved+0x9c>)
 80082f6:	4819      	ldr	r0, [pc, #100]	; (800835c <tcp_recved+0x98>)
 80082f8:	f008 f976 	bl	80105e8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008300:	887b      	ldrh	r3, [r7, #2]
 8008302:	4413      	add	r3, r2
 8008304:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008306:	89fb      	ldrh	r3, [r7, #14]
 8008308:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800830c:	d804      	bhi.n	8008318 <tcp_recved+0x54>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008312:	89fa      	ldrh	r2, [r7, #14]
 8008314:	429a      	cmp	r2, r3
 8008316:	d204      	bcs.n	8008322 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800831e:	851a      	strh	r2, [r3, #40]	; 0x28
 8008320:	e002      	b.n	8008328 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	89fa      	ldrh	r2, [r7, #14]
 8008326:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7ff ff71 	bl	8008210 <tcp_update_rcv_ann_wnd>
 800832e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008336:	d309      	bcc.n	800834c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	8b5b      	ldrh	r3, [r3, #26]
 800833c:	f043 0302 	orr.w	r3, r3, #2
 8008340:	b29a      	uxth	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f004 fbc4 	bl	800cad4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	0801216c 	.word	0x0801216c
 8008358:	08012408 	.word	0x08012408
 800835c:	080121b0 	.word	0x080121b0
 8008360:	08012420 	.word	0x08012420

08008364 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800836e:	4b1e      	ldr	r3, [pc, #120]	; (80083e8 <tcp_new_port+0x84>)
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	b29a      	uxth	r2, r3
 8008376:	4b1c      	ldr	r3, [pc, #112]	; (80083e8 <tcp_new_port+0x84>)
 8008378:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800837a:	4b1b      	ldr	r3, [pc, #108]	; (80083e8 <tcp_new_port+0x84>)
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008382:	4293      	cmp	r3, r2
 8008384:	d103      	bne.n	800838e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008386:	4b18      	ldr	r3, [pc, #96]	; (80083e8 <tcp_new_port+0x84>)
 8008388:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800838c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800838e:	2300      	movs	r3, #0
 8008390:	71fb      	strb	r3, [r7, #7]
 8008392:	e01e      	b.n	80083d2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008394:	79fb      	ldrb	r3, [r7, #7]
 8008396:	4a15      	ldr	r2, [pc, #84]	; (80083ec <tcp_new_port+0x88>)
 8008398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	e011      	b.n	80083c6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	8ada      	ldrh	r2, [r3, #22]
 80083a6:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <tcp_new_port+0x84>)
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d108      	bne.n	80083c0 <tcp_new_port+0x5c>
        n++;
 80083ae:	88bb      	ldrh	r3, [r7, #4]
 80083b0:	3301      	adds	r3, #1
 80083b2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80083b4:	88bb      	ldrh	r3, [r7, #4]
 80083b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083ba:	d3d8      	bcc.n	800836e <tcp_new_port+0xa>
          return 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	e00d      	b.n	80083dc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	603b      	str	r3, [r7, #0]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1ea      	bne.n	80083a2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	3301      	adds	r3, #1
 80083d0:	71fb      	strb	r3, [r7, #7]
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d9dd      	bls.n	8008394 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80083d8:	4b03      	ldr	r3, [pc, #12]	; (80083e8 <tcp_new_port+0x84>)
 80083da:	881b      	ldrh	r3, [r3, #0]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	2000000a 	.word	0x2000000a
 80083ec:	08014374 	.word	0x08014374

080083f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80083f0:	b5b0      	push	{r4, r5, r7, lr}
 80083f2:	b090      	sub	sp, #64	; 0x40
 80083f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80083fc:	4b94      	ldr	r3, [pc, #592]	; (8008650 <tcp_slowtmr+0x260>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3301      	adds	r3, #1
 8008402:	4a93      	ldr	r2, [pc, #588]	; (8008650 <tcp_slowtmr+0x260>)
 8008404:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008406:	4b93      	ldr	r3, [pc, #588]	; (8008654 <tcp_slowtmr+0x264>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	3301      	adds	r3, #1
 800840c:	b2da      	uxtb	r2, r3
 800840e:	4b91      	ldr	r3, [pc, #580]	; (8008654 <tcp_slowtmr+0x264>)
 8008410:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008412:	2300      	movs	r3, #0
 8008414:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008416:	4b90      	ldr	r3, [pc, #576]	; (8008658 <tcp_slowtmr+0x268>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800841c:	e29d      	b.n	800895a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	7d1b      	ldrb	r3, [r3, #20]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d106      	bne.n	8008434 <tcp_slowtmr+0x44>
 8008426:	4b8d      	ldr	r3, [pc, #564]	; (800865c <tcp_slowtmr+0x26c>)
 8008428:	f240 42be 	movw	r2, #1214	; 0x4be
 800842c:	498c      	ldr	r1, [pc, #560]	; (8008660 <tcp_slowtmr+0x270>)
 800842e:	488d      	ldr	r0, [pc, #564]	; (8008664 <tcp_slowtmr+0x274>)
 8008430:	f008 f8da 	bl	80105e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	7d1b      	ldrb	r3, [r3, #20]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d106      	bne.n	800844a <tcp_slowtmr+0x5a>
 800843c:	4b87      	ldr	r3, [pc, #540]	; (800865c <tcp_slowtmr+0x26c>)
 800843e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008442:	4989      	ldr	r1, [pc, #548]	; (8008668 <tcp_slowtmr+0x278>)
 8008444:	4887      	ldr	r0, [pc, #540]	; (8008664 <tcp_slowtmr+0x274>)
 8008446:	f008 f8cf 	bl	80105e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	7d1b      	ldrb	r3, [r3, #20]
 800844e:	2b0a      	cmp	r3, #10
 8008450:	d106      	bne.n	8008460 <tcp_slowtmr+0x70>
 8008452:	4b82      	ldr	r3, [pc, #520]	; (800865c <tcp_slowtmr+0x26c>)
 8008454:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008458:	4984      	ldr	r1, [pc, #528]	; (800866c <tcp_slowtmr+0x27c>)
 800845a:	4882      	ldr	r0, [pc, #520]	; (8008664 <tcp_slowtmr+0x274>)
 800845c:	f008 f8c4 	bl	80105e8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008462:	7f9a      	ldrb	r2, [r3, #30]
 8008464:	4b7b      	ldr	r3, [pc, #492]	; (8008654 <tcp_slowtmr+0x264>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d105      	bne.n	8008478 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800846c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008476:	e270      	b.n	800895a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008478:	4b76      	ldr	r3, [pc, #472]	; (8008654 <tcp_slowtmr+0x264>)
 800847a:	781a      	ldrb	r2, [r3, #0]
 800847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	7d1b      	ldrb	r3, [r3, #20]
 8008490:	2b02      	cmp	r3, #2
 8008492:	d10a      	bne.n	80084aa <tcp_slowtmr+0xba>
 8008494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008496:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800849a:	2b05      	cmp	r3, #5
 800849c:	d905      	bls.n	80084aa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800849e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084a2:	3301      	adds	r3, #1
 80084a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084a8:	e11e      	b.n	80086e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80084aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084b0:	2b0b      	cmp	r3, #11
 80084b2:	d905      	bls.n	80084c0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80084b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084b8:	3301      	adds	r3, #1
 80084ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084be:	e113      	b.n	80086e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80084c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d075      	beq.n	80085b6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80084ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d006      	beq.n	80084e0 <tcp_slowtmr+0xf0>
 80084d2:	4b62      	ldr	r3, [pc, #392]	; (800865c <tcp_slowtmr+0x26c>)
 80084d4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80084d8:	4965      	ldr	r1, [pc, #404]	; (8008670 <tcp_slowtmr+0x280>)
 80084da:	4862      	ldr	r0, [pc, #392]	; (8008664 <tcp_slowtmr+0x274>)
 80084dc:	f008 f884 	bl	80105e8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d106      	bne.n	80084f6 <tcp_slowtmr+0x106>
 80084e8:	4b5c      	ldr	r3, [pc, #368]	; (800865c <tcp_slowtmr+0x26c>)
 80084ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80084ee:	4961      	ldr	r1, [pc, #388]	; (8008674 <tcp_slowtmr+0x284>)
 80084f0:	485c      	ldr	r0, [pc, #368]	; (8008664 <tcp_slowtmr+0x274>)
 80084f2:	f008 f879 	bl	80105e8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80084fc:	2b0b      	cmp	r3, #11
 80084fe:	d905      	bls.n	800850c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008504:	3301      	adds	r3, #1
 8008506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800850a:	e0ed      	b.n	80086e8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008512:	3b01      	subs	r3, #1
 8008514:	4a58      	ldr	r2, [pc, #352]	; (8008678 <tcp_slowtmr+0x288>)
 8008516:	5cd3      	ldrb	r3, [r2, r3]
 8008518:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008520:	7c7a      	ldrb	r2, [r7, #17]
 8008522:	429a      	cmp	r2, r3
 8008524:	d907      	bls.n	8008536 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800852c:	3301      	adds	r3, #1
 800852e:	b2da      	uxtb	r2, r3
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008538:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800853c:	7c7a      	ldrb	r2, [r7, #17]
 800853e:	429a      	cmp	r2, r3
 8008540:	f200 80d2 	bhi.w	80086e8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008544:	2301      	movs	r3, #1
 8008546:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800854e:	2b00      	cmp	r3, #0
 8008550:	d108      	bne.n	8008564 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008554:	f005 f978 	bl	800d848 <tcp_zero_window_probe>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d014      	beq.n	8008588 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800855e:	2300      	movs	r3, #0
 8008560:	623b      	str	r3, [r7, #32]
 8008562:	e011      	b.n	8008588 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800856a:	4619      	mov	r1, r3
 800856c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800856e:	f004 f82b 	bl	800c5c8 <tcp_split_unsent_seg>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d107      	bne.n	8008588 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800857a:	f004 faab 	bl	800cad4 <tcp_output>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 80ac 	beq.w	80086e8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	2200      	movs	r2, #0
 8008594:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800859e:	2b06      	cmp	r3, #6
 80085a0:	f200 80a2 	bhi.w	80086e8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80085a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80085aa:	3301      	adds	r3, #1
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80085b4:	e098      	b.n	80086e8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80085bc:	2b00      	cmp	r3, #0
 80085be:	db0f      	blt.n	80085e0 <tcp_slowtmr+0x1f0>
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80085c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d008      	beq.n	80085e0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80085ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	3301      	adds	r3, #1
 80085d8:	b29b      	uxth	r3, r3
 80085da:	b21a      	sxth	r2, r3
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085de:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80085e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80085ec:	429a      	cmp	r2, r3
 80085ee:	db7b      	blt.n	80086e8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80085f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085f2:	f004 fd67 	bl	800d0c4 <tcp_rexmit_rto_prepare>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d007      	beq.n	800860c <tcp_slowtmr+0x21c>
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008600:	2b00      	cmp	r3, #0
 8008602:	d171      	bne.n	80086e8 <tcp_slowtmr+0x2f8>
 8008604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008608:	2b00      	cmp	r3, #0
 800860a:	d06d      	beq.n	80086e8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	7d1b      	ldrb	r3, [r3, #20]
 8008610:	2b02      	cmp	r3, #2
 8008612:	d03a      	beq.n	800868a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800861a:	2b0c      	cmp	r3, #12
 800861c:	bf28      	it	cs
 800861e:	230c      	movcs	r3, #12
 8008620:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008624:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008628:	10db      	asrs	r3, r3, #3
 800862a:	b21b      	sxth	r3, r3
 800862c:	461a      	mov	r2, r3
 800862e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008630:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008634:	4413      	add	r3, r2
 8008636:	7efa      	ldrb	r2, [r7, #27]
 8008638:	4910      	ldr	r1, [pc, #64]	; (800867c <tcp_slowtmr+0x28c>)
 800863a:	5c8a      	ldrb	r2, [r1, r2]
 800863c:	4093      	lsls	r3, r2
 800863e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008646:	4293      	cmp	r3, r2
 8008648:	dc1a      	bgt.n	8008680 <tcp_slowtmr+0x290>
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	b21a      	sxth	r2, r3
 800864e:	e019      	b.n	8008684 <tcp_slowtmr+0x294>
 8008650:	20007154 	.word	0x20007154
 8008654:	2000050a 	.word	0x2000050a
 8008658:	20007150 	.word	0x20007150
 800865c:	0801216c 	.word	0x0801216c
 8008660:	080124b0 	.word	0x080124b0
 8008664:	080121b0 	.word	0x080121b0
 8008668:	080124dc 	.word	0x080124dc
 800866c:	08012508 	.word	0x08012508
 8008670:	08012538 	.word	0x08012538
 8008674:	0801256c 	.word	0x0801256c
 8008678:	0801436c 	.word	0x0801436c
 800867c:	0801435c 	.word	0x0801435c
 8008680:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	2200      	movs	r2, #0
 800868e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008692:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008698:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800869c:	4293      	cmp	r3, r2
 800869e:	bf28      	it	cs
 80086a0:	4613      	movcs	r3, r2
 80086a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80086a4:	8a7b      	ldrh	r3, [r7, #18]
 80086a6:	085b      	lsrs	r3, r3, #1
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086ba:	005b      	lsls	r3, r3, #1
 80086bc:	b29b      	uxth	r3, r3
 80086be:	429a      	cmp	r2, r3
 80086c0:	d206      	bcs.n	80086d0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80086d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	2200      	movs	r2, #0
 80086de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80086e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086e4:	f004 fd5e 	bl	800d1a4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	7d1b      	ldrb	r3, [r3, #20]
 80086ec:	2b06      	cmp	r3, #6
 80086ee:	d111      	bne.n	8008714 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80086f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f2:	8b5b      	ldrh	r3, [r3, #26]
 80086f4:	f003 0310 	and.w	r3, r3, #16
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00b      	beq.n	8008714 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80086fc:	4b9c      	ldr	r3, [pc, #624]	; (8008970 <tcp_slowtmr+0x580>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	2b28      	cmp	r3, #40	; 0x28
 8008708:	d904      	bls.n	8008714 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800870a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800870e:	3301      	adds	r3, #1
 8008710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	7a5b      	ldrb	r3, [r3, #9]
 8008718:	f003 0308 	and.w	r3, r3, #8
 800871c:	2b00      	cmp	r3, #0
 800871e:	d04a      	beq.n	80087b6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008722:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008724:	2b04      	cmp	r3, #4
 8008726:	d003      	beq.n	8008730 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800872c:	2b07      	cmp	r3, #7
 800872e:	d142      	bne.n	80087b6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008730:	4b8f      	ldr	r3, [pc, #572]	; (8008970 <tcp_slowtmr+0x580>)
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008740:	4b8c      	ldr	r3, [pc, #560]	; (8008974 <tcp_slowtmr+0x584>)
 8008742:	440b      	add	r3, r1
 8008744:	498c      	ldr	r1, [pc, #560]	; (8008978 <tcp_slowtmr+0x588>)
 8008746:	fba1 1303 	umull	r1, r3, r1, r3
 800874a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800874c:	429a      	cmp	r2, r3
 800874e:	d90a      	bls.n	8008766 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008754:	3301      	adds	r3, #1
 8008756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800875a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800875e:	3301      	adds	r3, #1
 8008760:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008764:	e027      	b.n	80087b6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008766:	4b82      	ldr	r3, [pc, #520]	; (8008970 <tcp_slowtmr+0x580>)
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800877c:	4618      	mov	r0, r3
 800877e:	4b7f      	ldr	r3, [pc, #508]	; (800897c <tcp_slowtmr+0x58c>)
 8008780:	fb03 f300 	mul.w	r3, r3, r0
 8008784:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008786:	497c      	ldr	r1, [pc, #496]	; (8008978 <tcp_slowtmr+0x588>)
 8008788:	fba1 1303 	umull	r1, r3, r1, r3
 800878c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800878e:	429a      	cmp	r2, r3
 8008790:	d911      	bls.n	80087b6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008794:	f005 f818 	bl	800d7c8 <tcp_keepalive>
 8008798:	4603      	mov	r3, r0
 800879a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800879e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d107      	bne.n	80087b6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80087a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80087ac:	3301      	adds	r3, #1
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80087b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d011      	beq.n	80087e2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80087be:	4b6c      	ldr	r3, [pc, #432]	; (8008970 <tcp_slowtmr+0x580>)
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	1ad2      	subs	r2, r2, r3
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80087ce:	4619      	mov	r1, r3
 80087d0:	460b      	mov	r3, r1
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	440b      	add	r3, r1
 80087d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80087d8:	429a      	cmp	r2, r3
 80087da:	d302      	bcc.n	80087e2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80087dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087de:	f000 fec5 	bl	800956c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	7d1b      	ldrb	r3, [r3, #20]
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d10b      	bne.n	8008802 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80087ea:	4b61      	ldr	r3, [pc, #388]	; (8008970 <tcp_slowtmr+0x580>)
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	2b28      	cmp	r3, #40	; 0x28
 80087f6:	d904      	bls.n	8008802 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80087f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087fc:	3301      	adds	r3, #1
 80087fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008804:	7d1b      	ldrb	r3, [r3, #20]
 8008806:	2b09      	cmp	r3, #9
 8008808:	d10b      	bne.n	8008822 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800880a:	4b59      	ldr	r3, [pc, #356]	; (8008970 <tcp_slowtmr+0x580>)
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2bf0      	cmp	r3, #240	; 0xf0
 8008816:	d904      	bls.n	8008822 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800881c:	3301      	adds	r3, #1
 800881e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008826:	2b00      	cmp	r3, #0
 8008828:	d060      	beq.n	80088ec <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008830:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008834:	f000 fce6 	bl	8009204 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883a:	2b00      	cmp	r3, #0
 800883c:	d010      	beq.n	8008860 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800883e:	4b50      	ldr	r3, [pc, #320]	; (8008980 <tcp_slowtmr+0x590>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008844:	429a      	cmp	r2, r3
 8008846:	d106      	bne.n	8008856 <tcp_slowtmr+0x466>
 8008848:	4b4e      	ldr	r3, [pc, #312]	; (8008984 <tcp_slowtmr+0x594>)
 800884a:	f240 526d 	movw	r2, #1389	; 0x56d
 800884e:	494e      	ldr	r1, [pc, #312]	; (8008988 <tcp_slowtmr+0x598>)
 8008850:	484e      	ldr	r0, [pc, #312]	; (800898c <tcp_slowtmr+0x59c>)
 8008852:	f007 fec9 	bl	80105e8 <iprintf>
        prev->next = pcb->next;
 8008856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008858:	68da      	ldr	r2, [r3, #12]
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	60da      	str	r2, [r3, #12]
 800885e:	e00f      	b.n	8008880 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008860:	4b47      	ldr	r3, [pc, #284]	; (8008980 <tcp_slowtmr+0x590>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008866:	429a      	cmp	r2, r3
 8008868:	d006      	beq.n	8008878 <tcp_slowtmr+0x488>
 800886a:	4b46      	ldr	r3, [pc, #280]	; (8008984 <tcp_slowtmr+0x594>)
 800886c:	f240 5271 	movw	r2, #1393	; 0x571
 8008870:	4947      	ldr	r1, [pc, #284]	; (8008990 <tcp_slowtmr+0x5a0>)
 8008872:	4846      	ldr	r0, [pc, #280]	; (800898c <tcp_slowtmr+0x59c>)
 8008874:	f007 feb8 	bl	80105e8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	4a40      	ldr	r2, [pc, #256]	; (8008980 <tcp_slowtmr+0x590>)
 800887e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008884:	2b00      	cmp	r3, #0
 8008886:	d013      	beq.n	80088b0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008890:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	3304      	adds	r3, #4
 8008896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008898:	8ad2      	ldrh	r2, [r2, #22]
 800889a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800889c:	8b09      	ldrh	r1, [r1, #24]
 800889e:	9102      	str	r1, [sp, #8]
 80088a0:	9201      	str	r2, [sp, #4]
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	462b      	mov	r3, r5
 80088a6:	4622      	mov	r2, r4
 80088a8:	4601      	mov	r1, r0
 80088aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088ac:	f004 fed8 	bl	800d660 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	7d1b      	ldrb	r3, [r3, #20]
 80088ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80088bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80088c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80088c6:	6838      	ldr	r0, [r7, #0]
 80088c8:	f7ff f842 	bl	8007950 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80088cc:	4b31      	ldr	r3, [pc, #196]	; (8008994 <tcp_slowtmr+0x5a4>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d004      	beq.n	80088e2 <tcp_slowtmr+0x4f2>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f06f 010c 	mvn.w	r1, #12
 80088de:	68b8      	ldr	r0, [r7, #8]
 80088e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80088e2:	4b2c      	ldr	r3, [pc, #176]	; (8008994 <tcp_slowtmr+0x5a4>)
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d037      	beq.n	800895a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80088ea:	e592      	b.n	8008412 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	7f1b      	ldrb	r3, [r3, #28]
 80088fa:	3301      	adds	r3, #1
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	7f1a      	ldrb	r2, [r3, #28]
 8008906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008908:	7f5b      	ldrb	r3, [r3, #29]
 800890a:	429a      	cmp	r2, r3
 800890c:	d325      	bcc.n	800895a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	2200      	movs	r2, #0
 8008912:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008914:	4b1f      	ldr	r3, [pc, #124]	; (8008994 <tcp_slowtmr+0x5a4>)
 8008916:	2200      	movs	r2, #0
 8008918:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <tcp_slowtmr+0x54c>
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800892a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800892c:	6912      	ldr	r2, [r2, #16]
 800892e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008930:	4610      	mov	r0, r2
 8008932:	4798      	blx	r3
 8008934:	4603      	mov	r3, r0
 8008936:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800893a:	e002      	b.n	8008942 <tcp_slowtmr+0x552>
 800893c:	2300      	movs	r3, #0
 800893e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008942:	4b14      	ldr	r3, [pc, #80]	; (8008994 <tcp_slowtmr+0x5a4>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d000      	beq.n	800894c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800894a:	e562      	b.n	8008412 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800894c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008950:	2b00      	cmp	r3, #0
 8008952:	d102      	bne.n	800895a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008956:	f004 f8bd 	bl	800cad4 <tcp_output>
  while (pcb != NULL) {
 800895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895c:	2b00      	cmp	r3, #0
 800895e:	f47f ad5e 	bne.w	800841e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008962:	2300      	movs	r3, #0
 8008964:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008966:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <tcp_slowtmr+0x5a8>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800896c:	e069      	b.n	8008a42 <tcp_slowtmr+0x652>
 800896e:	bf00      	nop
 8008970:	20007154 	.word	0x20007154
 8008974:	000a4cb8 	.word	0x000a4cb8
 8008978:	10624dd3 	.word	0x10624dd3
 800897c:	000124f8 	.word	0x000124f8
 8008980:	20007150 	.word	0x20007150
 8008984:	0801216c 	.word	0x0801216c
 8008988:	080125a4 	.word	0x080125a4
 800898c:	080121b0 	.word	0x080121b0
 8008990:	080125d0 	.word	0x080125d0
 8008994:	2000714c 	.word	0x2000714c
 8008998:	20007160 	.word	0x20007160
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800899c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899e:	7d1b      	ldrb	r3, [r3, #20]
 80089a0:	2b0a      	cmp	r3, #10
 80089a2:	d006      	beq.n	80089b2 <tcp_slowtmr+0x5c2>
 80089a4:	4b2a      	ldr	r3, [pc, #168]	; (8008a50 <tcp_slowtmr+0x660>)
 80089a6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80089aa:	492a      	ldr	r1, [pc, #168]	; (8008a54 <tcp_slowtmr+0x664>)
 80089ac:	482a      	ldr	r0, [pc, #168]	; (8008a58 <tcp_slowtmr+0x668>)
 80089ae:	f007 fe1b 	bl	80105e8 <iprintf>
    pcb_remove = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80089b8:	4b28      	ldr	r3, [pc, #160]	; (8008a5c <tcp_slowtmr+0x66c>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2bf0      	cmp	r3, #240	; 0xf0
 80089c4:	d904      	bls.n	80089d0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80089c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089ca:	3301      	adds	r3, #1
 80089cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80089d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d02f      	beq.n	8008a38 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80089d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089da:	f000 fc13 	bl	8009204 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d010      	beq.n	8008a06 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80089e4:	4b1e      	ldr	r3, [pc, #120]	; (8008a60 <tcp_slowtmr+0x670>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d106      	bne.n	80089fc <tcp_slowtmr+0x60c>
 80089ee:	4b18      	ldr	r3, [pc, #96]	; (8008a50 <tcp_slowtmr+0x660>)
 80089f0:	f240 52af 	movw	r2, #1455	; 0x5af
 80089f4:	491b      	ldr	r1, [pc, #108]	; (8008a64 <tcp_slowtmr+0x674>)
 80089f6:	4818      	ldr	r0, [pc, #96]	; (8008a58 <tcp_slowtmr+0x668>)
 80089f8:	f007 fdf6 	bl	80105e8 <iprintf>
        prev->next = pcb->next;
 80089fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	60da      	str	r2, [r3, #12]
 8008a04:	e00f      	b.n	8008a26 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008a06:	4b16      	ldr	r3, [pc, #88]	; (8008a60 <tcp_slowtmr+0x670>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d006      	beq.n	8008a1e <tcp_slowtmr+0x62e>
 8008a10:	4b0f      	ldr	r3, [pc, #60]	; (8008a50 <tcp_slowtmr+0x660>)
 8008a12:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008a16:	4914      	ldr	r1, [pc, #80]	; (8008a68 <tcp_slowtmr+0x678>)
 8008a18:	480f      	ldr	r0, [pc, #60]	; (8008a58 <tcp_slowtmr+0x668>)
 8008a1a:	f007 fde5 	bl	80105e8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	4a0f      	ldr	r2, [pc, #60]	; (8008a60 <tcp_slowtmr+0x670>)
 8008a24:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008a30:	69f8      	ldr	r0, [r7, #28]
 8008a32:	f7fe ff8d 	bl	8007950 <tcp_free>
 8008a36:	e004      	b.n	8008a42 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1a9      	bne.n	800899c <tcp_slowtmr+0x5ac>
    }
  }
}
 8008a48:	bf00      	nop
 8008a4a:	3730      	adds	r7, #48	; 0x30
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8008a50:	0801216c 	.word	0x0801216c
 8008a54:	080125fc 	.word	0x080125fc
 8008a58:	080121b0 	.word	0x080121b0
 8008a5c:	20007154 	.word	0x20007154
 8008a60:	20007160 	.word	0x20007160
 8008a64:	0801262c 	.word	0x0801262c
 8008a68:	08012654 	.word	0x08012654

08008a6c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008a72:	4b2d      	ldr	r3, [pc, #180]	; (8008b28 <tcp_fasttmr+0xbc>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	3301      	adds	r3, #1
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	4b2b      	ldr	r3, [pc, #172]	; (8008b28 <tcp_fasttmr+0xbc>)
 8008a7c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008a7e:	4b2b      	ldr	r3, [pc, #172]	; (8008b2c <tcp_fasttmr+0xc0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008a84:	e048      	b.n	8008b18 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	7f9a      	ldrb	r2, [r3, #30]
 8008a8a:	4b27      	ldr	r3, [pc, #156]	; (8008b28 <tcp_fasttmr+0xbc>)
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d03f      	beq.n	8008b12 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008a92:	4b25      	ldr	r3, [pc, #148]	; (8008b28 <tcp_fasttmr+0xbc>)
 8008a94:	781a      	ldrb	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	8b5b      	ldrh	r3, [r3, #26]
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d010      	beq.n	8008ac8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	8b5b      	ldrh	r3, [r3, #26]
 8008aaa:	f043 0302 	orr.w	r3, r3, #2
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f004 f80d 	bl	800cad4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	8b5b      	ldrh	r3, [r3, #26]
 8008abe:	f023 0303 	bic.w	r3, r3, #3
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	8b5b      	ldrh	r3, [r3, #26]
 8008acc:	f003 0308 	and.w	r3, r3, #8
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d009      	beq.n	8008ae8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8b5b      	ldrh	r3, [r3, #26]
 8008ad8:	f023 0308 	bic.w	r3, r3, #8
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7ff f8c4 	bl	8007c70 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008af6:	4b0e      	ldr	r3, [pc, #56]	; (8008b30 <tcp_fasttmr+0xc4>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f819 	bl	8008b34 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008b02:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <tcp_fasttmr+0xc4>)
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d000      	beq.n	8008b0c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008b0a:	e7b8      	b.n	8008a7e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	607b      	str	r3, [r7, #4]
 8008b10:	e002      	b.n	8008b18 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1b3      	bne.n	8008a86 <tcp_fasttmr+0x1a>
    }
  }
}
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	2000050a 	.word	0x2000050a
 8008b2c:	20007150 	.word	0x20007150
 8008b30:	2000714c 	.word	0x2000714c

08008b34 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008b34:	b590      	push	{r4, r7, lr}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d109      	bne.n	8008b56 <tcp_process_refused_data+0x22>
 8008b42:	4b37      	ldr	r3, [pc, #220]	; (8008c20 <tcp_process_refused_data+0xec>)
 8008b44:	f240 6209 	movw	r2, #1545	; 0x609
 8008b48:	4936      	ldr	r1, [pc, #216]	; (8008c24 <tcp_process_refused_data+0xf0>)
 8008b4a:	4837      	ldr	r0, [pc, #220]	; (8008c28 <tcp_process_refused_data+0xf4>)
 8008b4c:	f007 fd4c 	bl	80105e8 <iprintf>
 8008b50:	f06f 030f 	mvn.w	r3, #15
 8008b54:	e060      	b.n	8008c18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b5a:	7b5b      	ldrb	r3, [r3, #13]
 8008b5c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b62:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00b      	beq.n	8008b8c <tcp_process_refused_data+0x58>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6918      	ldr	r0, [r3, #16]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	47a0      	blx	r4
 8008b86:	4603      	mov	r3, r0
 8008b88:	73fb      	strb	r3, [r7, #15]
 8008b8a:	e007      	b.n	8008b9c <tcp_process_refused_data+0x68>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	6879      	ldr	r1, [r7, #4]
 8008b92:	2000      	movs	r0, #0
 8008b94:	f000 f8c0 	bl	8008d18 <tcp_recv_null>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d12a      	bne.n	8008bfa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
 8008ba6:	f003 0320 	and.w	r3, r3, #32
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d033      	beq.n	8008c16 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bb2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008bb6:	d005      	beq.n	8008bc4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00b      	beq.n	8008be6 <tcp_process_refused_data+0xb2>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6918      	ldr	r0, [r3, #16]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	2200      	movs	r2, #0
 8008bdc:	6879      	ldr	r1, [r7, #4]
 8008bde:	47a0      	blx	r4
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]
 8008be4:	e001      	b.n	8008bea <tcp_process_refused_data+0xb6>
 8008be6:	2300      	movs	r3, #0
 8008be8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bee:	f113 0f0d 	cmn.w	r3, #13
 8008bf2:	d110      	bne.n	8008c16 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008bf4:	f06f 030c 	mvn.w	r3, #12
 8008bf8:	e00e      	b.n	8008c18 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bfe:	f113 0f0d 	cmn.w	r3, #13
 8008c02:	d102      	bne.n	8008c0a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008c04:	f06f 030c 	mvn.w	r3, #12
 8008c08:	e006      	b.n	8008c18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008c10:	f06f 0304 	mvn.w	r3, #4
 8008c14:	e000      	b.n	8008c18 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd90      	pop	{r4, r7, pc}
 8008c20:	0801216c 	.word	0x0801216c
 8008c24:	0801267c 	.word	0x0801267c
 8008c28:	080121b0 	.word	0x080121b0

08008c2c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008c34:	e007      	b.n	8008c46 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f809 	bl	8008c54 <tcp_seg_free>
    seg = next;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1f4      	bne.n	8008c36 <tcp_segs_free+0xa>
  }
}
 8008c4c:	bf00      	nop
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00c      	beq.n	8008c7c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d004      	beq.n	8008c74 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fbce 	bl	8007410 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	2003      	movs	r0, #3
 8008c78:	f7fd fdbc 	bl	80067f4 <memp_free>
  }
}
 8008c7c:	bf00      	nop
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d107      	bne.n	8008ca6 <tcp_setprio+0x22>
 8008c96:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <tcp_setprio+0x30>)
 8008c98:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8008c9c:	4906      	ldr	r1, [pc, #24]	; (8008cb8 <tcp_setprio+0x34>)
 8008c9e:	4807      	ldr	r0, [pc, #28]	; (8008cbc <tcp_setprio+0x38>)
 8008ca0:	f007 fca2 	bl	80105e8 <iprintf>
 8008ca4:	e002      	b.n	8008cac <tcp_setprio+0x28>

  pcb->prio = prio;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	78fa      	ldrb	r2, [r7, #3]
 8008caa:	755a      	strb	r2, [r3, #21]
}
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	0801216c 	.word	0x0801216c
 8008cb8:	080126a4 	.word	0x080126a4
 8008cbc:	080121b0 	.word	0x080121b0

08008cc0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d106      	bne.n	8008cdc <tcp_seg_copy+0x1c>
 8008cce:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <tcp_seg_copy+0x4c>)
 8008cd0:	f240 6282 	movw	r2, #1666	; 0x682
 8008cd4:	490e      	ldr	r1, [pc, #56]	; (8008d10 <tcp_seg_copy+0x50>)
 8008cd6:	480f      	ldr	r0, [pc, #60]	; (8008d14 <tcp_seg_copy+0x54>)
 8008cd8:	f007 fc86 	bl	80105e8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008cdc:	2003      	movs	r0, #3
 8008cde:	f7fd fd3d 	bl	800675c <memp_malloc>
 8008ce2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <tcp_seg_copy+0x2e>
    return NULL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	e00a      	b.n	8008d04 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008cee:	2210      	movs	r2, #16
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f007 fc65 	bl	80105c2 <memcpy>
  pbuf_ref(cseg->p);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fe fc27 	bl	8007550 <pbuf_ref>
  return cseg;
 8008d02:	68fb      	ldr	r3, [r7, #12]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	0801216c 	.word	0x0801216c
 8008d10:	080126c0 	.word	0x080126c0
 8008d14:	080121b0 	.word	0x080121b0

08008d18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
 8008d24:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d109      	bne.n	8008d40 <tcp_recv_null+0x28>
 8008d2c:	4b12      	ldr	r3, [pc, #72]	; (8008d78 <tcp_recv_null+0x60>)
 8008d2e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008d32:	4912      	ldr	r1, [pc, #72]	; (8008d7c <tcp_recv_null+0x64>)
 8008d34:	4812      	ldr	r0, [pc, #72]	; (8008d80 <tcp_recv_null+0x68>)
 8008d36:	f007 fc57 	bl	80105e8 <iprintf>
 8008d3a:	f06f 030f 	mvn.w	r3, #15
 8008d3e:	e016      	b.n	8008d6e <tcp_recv_null+0x56>

  if (p != NULL) {
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d009      	beq.n	8008d5a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	891b      	ldrh	r3, [r3, #8]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68b8      	ldr	r0, [r7, #8]
 8008d4e:	f7ff fab9 	bl	80082c4 <tcp_recved>
    pbuf_free(p);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7fe fb5c 	bl	8007410 <pbuf_free>
 8008d58:	e008      	b.n	8008d6c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d104      	bne.n	8008d6c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008d62:	68b8      	ldr	r0, [r7, #8]
 8008d64:	f7fe ffea 	bl	8007d3c <tcp_close>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	e000      	b.n	8008d6e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	0801216c 	.word	0x0801216c
 8008d7c:	080126dc 	.word	0x080126dc
 8008d80:	080121b0 	.word	0x080121b0

08008d84 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	db01      	blt.n	8008d9a <tcp_kill_prio+0x16>
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	e000      	b.n	8008d9c <tcp_kill_prio+0x18>
 8008d9a:	237f      	movs	r3, #127	; 0x7f
 8008d9c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008d9e:	7afb      	ldrb	r3, [r7, #11]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d034      	beq.n	8008e0e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008da4:	7afb      	ldrb	r3, [r7, #11]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008db2:	4b19      	ldr	r3, [pc, #100]	; (8008e18 <tcp_kill_prio+0x94>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	617b      	str	r3, [r7, #20]
 8008db8:	e01f      	b.n	8008dfa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	7d5b      	ldrb	r3, [r3, #21]
 8008dbe:	7afa      	ldrb	r2, [r7, #11]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d80c      	bhi.n	8008dde <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008dc8:	7afa      	ldrb	r2, [r7, #11]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d112      	bne.n	8008df4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008dce:	4b13      	ldr	r3, [pc, #76]	; (8008e1c <tcp_kill_prio+0x98>)
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d80a      	bhi.n	8008df4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008dde:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <tcp_kill_prio+0x98>)
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	7d5b      	ldrb	r3, [r3, #21]
 8008df2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	617b      	str	r3, [r7, #20]
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1dc      	bne.n	8008dba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d004      	beq.n	8008e10 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008e06:	6938      	ldr	r0, [r7, #16]
 8008e08:	f7ff f882 	bl	8007f10 <tcp_abort>
 8008e0c:	e000      	b.n	8008e10 <tcp_kill_prio+0x8c>
    return;
 8008e0e:	bf00      	nop
  }
}
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	20007150 	.word	0x20007150
 8008e1c:	20007154 	.word	0x20007154

08008e20 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008e2a:	79fb      	ldrb	r3, [r7, #7]
 8008e2c:	2b08      	cmp	r3, #8
 8008e2e:	d009      	beq.n	8008e44 <tcp_kill_state+0x24>
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	2b09      	cmp	r3, #9
 8008e34:	d006      	beq.n	8008e44 <tcp_kill_state+0x24>
 8008e36:	4b1a      	ldr	r3, [pc, #104]	; (8008ea0 <tcp_kill_state+0x80>)
 8008e38:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008e3c:	4919      	ldr	r1, [pc, #100]	; (8008ea4 <tcp_kill_state+0x84>)
 8008e3e:	481a      	ldr	r0, [pc, #104]	; (8008ea8 <tcp_kill_state+0x88>)
 8008e40:	f007 fbd2 	bl	80105e8 <iprintf>

  inactivity = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e4c:	4b17      	ldr	r3, [pc, #92]	; (8008eac <tcp_kill_state+0x8c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	617b      	str	r3, [r7, #20]
 8008e52:	e017      	b.n	8008e84 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	7d1b      	ldrb	r3, [r3, #20]
 8008e58:	79fa      	ldrb	r2, [r7, #7]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d10f      	bne.n	8008e7e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e5e:	4b14      	ldr	r3, [pc, #80]	; (8008eb0 <tcp_kill_state+0x90>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d807      	bhi.n	8008e7e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008e6e:	4b10      	ldr	r3, [pc, #64]	; (8008eb0 <tcp_kill_state+0x90>)
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	617b      	str	r3, [r7, #20]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e4      	bne.n	8008e54 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008e90:	2100      	movs	r1, #0
 8008e92:	6938      	ldr	r0, [r7, #16]
 8008e94:	f7fe ff7e 	bl	8007d94 <tcp_abandon>
  }
}
 8008e98:	bf00      	nop
 8008e9a:	3718      	adds	r7, #24
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	0801216c 	.word	0x0801216c
 8008ea4:	080126f8 	.word	0x080126f8
 8008ea8:	080121b0 	.word	0x080121b0
 8008eac:	20007150 	.word	0x20007150
 8008eb0:	20007154 	.word	0x20007154

08008eb4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ec2:	4b12      	ldr	r3, [pc, #72]	; (8008f0c <tcp_kill_timewait+0x58>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	e012      	b.n	8008ef0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008eca:	4b11      	ldr	r3, [pc, #68]	; (8008f10 <tcp_kill_timewait+0x5c>)
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d807      	bhi.n	8008eea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008eda:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <tcp_kill_timewait+0x5c>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	60fb      	str	r3, [r7, #12]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1e9      	bne.n	8008eca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008efc:	68b8      	ldr	r0, [r7, #8]
 8008efe:	f7ff f807 	bl	8007f10 <tcp_abort>
  }
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20007160 	.word	0x20007160
 8008f10:	20007154 	.word	0x20007154

08008f14 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008f1a:	4b10      	ldr	r3, [pc, #64]	; (8008f5c <tcp_handle_closepend+0x48>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008f20:	e014      	b.n	8008f4c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	8b5b      	ldrh	r3, [r3, #26]
 8008f2c:	f003 0308 	and.w	r3, r3, #8
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d009      	beq.n	8008f48 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	8b5b      	ldrh	r3, [r3, #26]
 8008f38:	f023 0308 	bic.w	r3, r3, #8
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7fe fe94 	bl	8007c70 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1e7      	bne.n	8008f22 <tcp_handle_closepend+0xe>
  }
}
 8008f52:	bf00      	nop
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20007150 	.word	0x20007150

08008f60 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	f7fd fbf6 	bl	800675c <memp_malloc>
 8008f70:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d126      	bne.n	8008fc6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008f78:	f7ff ffcc 	bl	8008f14 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008f7c:	f7ff ff9a 	bl	8008eb4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f80:	2001      	movs	r0, #1
 8008f82:	f7fd fbeb 	bl	800675c <memp_malloc>
 8008f86:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d11b      	bne.n	8008fc6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008f8e:	2009      	movs	r0, #9
 8008f90:	f7ff ff46 	bl	8008e20 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f94:	2001      	movs	r0, #1
 8008f96:	f7fd fbe1 	bl	800675c <memp_malloc>
 8008f9a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d111      	bne.n	8008fc6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008fa2:	2008      	movs	r0, #8
 8008fa4:	f7ff ff3c 	bl	8008e20 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008fa8:	2001      	movs	r0, #1
 8008faa:	f7fd fbd7 	bl	800675c <memp_malloc>
 8008fae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d107      	bne.n	8008fc6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff fee3 	bl	8008d84 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008fbe:	2001      	movs	r0, #1
 8008fc0:	f7fd fbcc 	bl	800675c <memp_malloc>
 8008fc4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d03f      	beq.n	800904c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008fcc:	229c      	movs	r2, #156	; 0x9c
 8008fce:	2100      	movs	r1, #0
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f007 fb01 	bl	80105d8 <memset>
    pcb->prio = prio;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	79fa      	ldrb	r2, [r7, #7]
 8008fda:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008fe2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008fec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	22ff      	movs	r2, #255	; 0xff
 8008ffa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009002:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2206      	movs	r2, #6
 8009008:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2206      	movs	r2, #6
 8009010:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009018:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2201      	movs	r2, #1
 800901e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009022:	4b0d      	ldr	r3, [pc, #52]	; (8009058 <tcp_alloc+0xf8>)
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800902a:	4b0c      	ldr	r3, [pc, #48]	; (800905c <tcp_alloc+0xfc>)
 800902c:	781a      	ldrb	r2, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009038:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	4a08      	ldr	r2, [pc, #32]	; (8009060 <tcp_alloc+0x100>)
 8009040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4a07      	ldr	r2, [pc, #28]	; (8009064 <tcp_alloc+0x104>)
 8009048:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800904c:	68fb      	ldr	r3, [r7, #12]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20007154 	.word	0x20007154
 800905c:	2000050a 	.word	0x2000050a
 8009060:	08008d19 	.word	0x08008d19
 8009064:	006ddd00 	.word	0x006ddd00

08009068 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009072:	2040      	movs	r0, #64	; 0x40
 8009074:	f7ff ff74 	bl	8008f60 <tcp_alloc>
 8009078:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800907a:	68fb      	ldr	r3, [r7, #12]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	611a      	str	r2, [r3, #16]
  }
}
 800909a:	bf00      	nop
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
	...

080090a8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00e      	beq.n	80090d6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	7d1b      	ldrb	r3, [r3, #20]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d106      	bne.n	80090ce <tcp_recv+0x26>
 80090c0:	4b07      	ldr	r3, [pc, #28]	; (80090e0 <tcp_recv+0x38>)
 80090c2:	f240 72df 	movw	r2, #2015	; 0x7df
 80090c6:	4907      	ldr	r1, [pc, #28]	; (80090e4 <tcp_recv+0x3c>)
 80090c8:	4807      	ldr	r0, [pc, #28]	; (80090e8 <tcp_recv+0x40>)
 80090ca:	f007 fa8d 	bl	80105e8 <iprintf>
    pcb->recv = recv;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	0801216c 	.word	0x0801216c
 80090e4:	08012708 	.word	0x08012708
 80090e8:	080121b0 	.word	0x080121b0

080090ec <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00e      	beq.n	800911a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	7d1b      	ldrb	r3, [r3, #20]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d106      	bne.n	8009112 <tcp_sent+0x26>
 8009104:	4b07      	ldr	r3, [pc, #28]	; (8009124 <tcp_sent+0x38>)
 8009106:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800910a:	4907      	ldr	r1, [pc, #28]	; (8009128 <tcp_sent+0x3c>)
 800910c:	4807      	ldr	r0, [pc, #28]	; (800912c <tcp_sent+0x40>)
 800910e:	f007 fa6b 	bl	80105e8 <iprintf>
    pcb->sent = sent;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800911a:	bf00      	nop
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	0801216c 	.word	0x0801216c
 8009128:	08012730 	.word	0x08012730
 800912c:	080121b0 	.word	0x080121b0

08009130 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00e      	beq.n	800915e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	7d1b      	ldrb	r3, [r3, #20]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d106      	bne.n	8009156 <tcp_err+0x26>
 8009148:	4b07      	ldr	r3, [pc, #28]	; (8009168 <tcp_err+0x38>)
 800914a:	f640 020d 	movw	r2, #2061	; 0x80d
 800914e:	4907      	ldr	r1, [pc, #28]	; (800916c <tcp_err+0x3c>)
 8009150:	4807      	ldr	r0, [pc, #28]	; (8009170 <tcp_err+0x40>)
 8009152:	f007 fa49 	bl	80105e8 <iprintf>
    pcb->errf = err;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800915e:	bf00      	nop
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	0801216c 	.word	0x0801216c
 800916c:	08012758 	.word	0x08012758
 8009170:	080121b0 	.word	0x080121b0

08009174 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d008      	beq.n	8009196 <tcp_accept+0x22>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	7d1b      	ldrb	r3, [r3, #20]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d104      	bne.n	8009196 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	619a      	str	r2, [r3, #24]
  }
}
 8009196:	bf00      	nop
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
	...

080091a4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d107      	bne.n	80091c8 <tcp_poll+0x24>
 80091b8:	4b0e      	ldr	r3, [pc, #56]	; (80091f4 <tcp_poll+0x50>)
 80091ba:	f640 023d 	movw	r2, #2109	; 0x83d
 80091be:	490e      	ldr	r1, [pc, #56]	; (80091f8 <tcp_poll+0x54>)
 80091c0:	480e      	ldr	r0, [pc, #56]	; (80091fc <tcp_poll+0x58>)
 80091c2:	f007 fa11 	bl	80105e8 <iprintf>
 80091c6:	e011      	b.n	80091ec <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	7d1b      	ldrb	r3, [r3, #20]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d106      	bne.n	80091de <tcp_poll+0x3a>
 80091d0:	4b08      	ldr	r3, [pc, #32]	; (80091f4 <tcp_poll+0x50>)
 80091d2:	f640 023e 	movw	r2, #2110	; 0x83e
 80091d6:	490a      	ldr	r1, [pc, #40]	; (8009200 <tcp_poll+0x5c>)
 80091d8:	4808      	ldr	r0, [pc, #32]	; (80091fc <tcp_poll+0x58>)
 80091da:	f007 fa05 	bl	80105e8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	79fa      	ldrb	r2, [r7, #7]
 80091ea:	775a      	strb	r2, [r3, #29]
}
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	0801216c 	.word	0x0801216c
 80091f8:	08012780 	.word	0x08012780
 80091fc:	080121b0 	.word	0x080121b0
 8009200:	08012798 	.word	0x08012798

08009204 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d107      	bne.n	8009222 <tcp_pcb_purge+0x1e>
 8009212:	4b21      	ldr	r3, [pc, #132]	; (8009298 <tcp_pcb_purge+0x94>)
 8009214:	f640 0251 	movw	r2, #2129	; 0x851
 8009218:	4920      	ldr	r1, [pc, #128]	; (800929c <tcp_pcb_purge+0x98>)
 800921a:	4821      	ldr	r0, [pc, #132]	; (80092a0 <tcp_pcb_purge+0x9c>)
 800921c:	f007 f9e4 	bl	80105e8 <iprintf>
 8009220:	e037      	b.n	8009292 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	7d1b      	ldrb	r3, [r3, #20]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d033      	beq.n	8009292 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800922e:	2b0a      	cmp	r3, #10
 8009230:	d02f      	beq.n	8009292 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009236:	2b01      	cmp	r3, #1
 8009238:	d02b      	beq.n	8009292 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe f8e2 	bl	8007410 <pbuf_free>
      pcb->refused_data = NULL;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f986 	bl	800956c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009266:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff fcdd 	bl	8008c2c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009276:	4618      	mov	r0, r3
 8009278:	f7ff fcd8 	bl	8008c2c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	66da      	str	r2, [r3, #108]	; 0x6c
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	0801216c 	.word	0x0801216c
 800929c:	080127b8 	.word	0x080127b8
 80092a0:	080121b0 	.word	0x080121b0

080092a4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d106      	bne.n	80092c2 <tcp_pcb_remove+0x1e>
 80092b4:	4b3e      	ldr	r3, [pc, #248]	; (80093b0 <tcp_pcb_remove+0x10c>)
 80092b6:	f640 0283 	movw	r2, #2179	; 0x883
 80092ba:	493e      	ldr	r1, [pc, #248]	; (80093b4 <tcp_pcb_remove+0x110>)
 80092bc:	483e      	ldr	r0, [pc, #248]	; (80093b8 <tcp_pcb_remove+0x114>)
 80092be:	f007 f993 	bl	80105e8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d106      	bne.n	80092d6 <tcp_pcb_remove+0x32>
 80092c8:	4b39      	ldr	r3, [pc, #228]	; (80093b0 <tcp_pcb_remove+0x10c>)
 80092ca:	f640 0284 	movw	r2, #2180	; 0x884
 80092ce:	493b      	ldr	r1, [pc, #236]	; (80093bc <tcp_pcb_remove+0x118>)
 80092d0:	4839      	ldr	r0, [pc, #228]	; (80093b8 <tcp_pcb_remove+0x114>)
 80092d2:	f007 f989 	bl	80105e8 <iprintf>

  TCP_RMV(pcblist, pcb);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d105      	bne.n	80092ec <tcp_pcb_remove+0x48>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68da      	ldr	r2, [r3, #12]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	e013      	b.n	8009314 <tcp_pcb_remove+0x70>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	e00c      	b.n	800930e <tcp_pcb_remove+0x6a>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d104      	bne.n	8009308 <tcp_pcb_remove+0x64>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	60da      	str	r2, [r3, #12]
 8009306:	e005      	b.n	8009314 <tcp_pcb_remove+0x70>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1ef      	bne.n	80092f4 <tcp_pcb_remove+0x50>
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2200      	movs	r2, #0
 8009318:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800931a:	6838      	ldr	r0, [r7, #0]
 800931c:	f7ff ff72 	bl	8009204 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	7d1b      	ldrb	r3, [r3, #20]
 8009324:	2b0a      	cmp	r3, #10
 8009326:	d013      	beq.n	8009350 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800932c:	2b01      	cmp	r3, #1
 800932e:	d00f      	beq.n	8009350 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	8b5b      	ldrh	r3, [r3, #26]
 8009334:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009338:	2b00      	cmp	r3, #0
 800933a:	d009      	beq.n	8009350 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	8b5b      	ldrh	r3, [r3, #26]
 8009340:	f043 0302 	orr.w	r3, r3, #2
 8009344:	b29a      	uxth	r2, r3
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800934a:	6838      	ldr	r0, [r7, #0]
 800934c:	f003 fbc2 	bl	800cad4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	7d1b      	ldrb	r3, [r3, #20]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d020      	beq.n	800939a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800935c:	2b00      	cmp	r3, #0
 800935e:	d006      	beq.n	800936e <tcp_pcb_remove+0xca>
 8009360:	4b13      	ldr	r3, [pc, #76]	; (80093b0 <tcp_pcb_remove+0x10c>)
 8009362:	f640 0293 	movw	r2, #2195	; 0x893
 8009366:	4916      	ldr	r1, [pc, #88]	; (80093c0 <tcp_pcb_remove+0x11c>)
 8009368:	4813      	ldr	r0, [pc, #76]	; (80093b8 <tcp_pcb_remove+0x114>)
 800936a:	f007 f93d 	bl	80105e8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009372:	2b00      	cmp	r3, #0
 8009374:	d006      	beq.n	8009384 <tcp_pcb_remove+0xe0>
 8009376:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <tcp_pcb_remove+0x10c>)
 8009378:	f640 0294 	movw	r2, #2196	; 0x894
 800937c:	4911      	ldr	r1, [pc, #68]	; (80093c4 <tcp_pcb_remove+0x120>)
 800937e:	480e      	ldr	r0, [pc, #56]	; (80093b8 <tcp_pcb_remove+0x114>)
 8009380:	f007 f932 	bl	80105e8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009388:	2b00      	cmp	r3, #0
 800938a:	d006      	beq.n	800939a <tcp_pcb_remove+0xf6>
 800938c:	4b08      	ldr	r3, [pc, #32]	; (80093b0 <tcp_pcb_remove+0x10c>)
 800938e:	f640 0296 	movw	r2, #2198	; 0x896
 8009392:	490d      	ldr	r1, [pc, #52]	; (80093c8 <tcp_pcb_remove+0x124>)
 8009394:	4808      	ldr	r0, [pc, #32]	; (80093b8 <tcp_pcb_remove+0x114>)
 8009396:	f007 f927 	bl	80105e8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2200      	movs	r2, #0
 800939e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	2200      	movs	r2, #0
 80093a4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	0801216c 	.word	0x0801216c
 80093b4:	080127d4 	.word	0x080127d4
 80093b8:	080121b0 	.word	0x080121b0
 80093bc:	080127f0 	.word	0x080127f0
 80093c0:	08012810 	.word	0x08012810
 80093c4:	08012828 	.word	0x08012828
 80093c8:	08012844 	.word	0x08012844

080093cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <tcp_next_iss+0x1c>
 80093da:	4b0a      	ldr	r3, [pc, #40]	; (8009404 <tcp_next_iss+0x38>)
 80093dc:	f640 02af 	movw	r2, #2223	; 0x8af
 80093e0:	4909      	ldr	r1, [pc, #36]	; (8009408 <tcp_next_iss+0x3c>)
 80093e2:	480a      	ldr	r0, [pc, #40]	; (800940c <tcp_next_iss+0x40>)
 80093e4:	f007 f900 	bl	80105e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80093e8:	4b09      	ldr	r3, [pc, #36]	; (8009410 <tcp_next_iss+0x44>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	4b09      	ldr	r3, [pc, #36]	; (8009414 <tcp_next_iss+0x48>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4413      	add	r3, r2
 80093f2:	4a07      	ldr	r2, [pc, #28]	; (8009410 <tcp_next_iss+0x44>)
 80093f4:	6013      	str	r3, [r2, #0]
  return iss;
 80093f6:	4b06      	ldr	r3, [pc, #24]	; (8009410 <tcp_next_iss+0x44>)
 80093f8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	0801216c 	.word	0x0801216c
 8009408:	0801285c 	.word	0x0801285c
 800940c:	080121b0 	.word	0x080121b0
 8009410:	2000000c 	.word	0x2000000c
 8009414:	20007154 	.word	0x20007154

08009418 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d106      	bne.n	800943a <tcp_eff_send_mss_netif+0x22>
 800942c:	4b14      	ldr	r3, [pc, #80]	; (8009480 <tcp_eff_send_mss_netif+0x68>)
 800942e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009432:	4914      	ldr	r1, [pc, #80]	; (8009484 <tcp_eff_send_mss_netif+0x6c>)
 8009434:	4814      	ldr	r0, [pc, #80]	; (8009488 <tcp_eff_send_mss_netif+0x70>)
 8009436:	f007 f8d7 	bl	80105e8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009440:	89fb      	ldrh	r3, [r7, #14]
 8009442:	e019      	b.n	8009478 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009448:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800944a:	8afb      	ldrh	r3, [r7, #22]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d012      	beq.n	8009476 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009450:	2328      	movs	r3, #40	; 0x28
 8009452:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009454:	8afa      	ldrh	r2, [r7, #22]
 8009456:	8abb      	ldrh	r3, [r7, #20]
 8009458:	429a      	cmp	r2, r3
 800945a:	d904      	bls.n	8009466 <tcp_eff_send_mss_netif+0x4e>
 800945c:	8afa      	ldrh	r2, [r7, #22]
 800945e:	8abb      	ldrh	r3, [r7, #20]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	b29b      	uxth	r3, r3
 8009464:	e000      	b.n	8009468 <tcp_eff_send_mss_netif+0x50>
 8009466:	2300      	movs	r3, #0
 8009468:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800946a:	8a7a      	ldrh	r2, [r7, #18]
 800946c:	89fb      	ldrh	r3, [r7, #14]
 800946e:	4293      	cmp	r3, r2
 8009470:	bf28      	it	cs
 8009472:	4613      	movcs	r3, r2
 8009474:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009476:	89fb      	ldrh	r3, [r7, #14]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3718      	adds	r7, #24
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	0801216c 	.word	0x0801216c
 8009484:	08012878 	.word	0x08012878
 8009488:	080121b0 	.word	0x080121b0

0800948c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d119      	bne.n	80094d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80094a0:	4b10      	ldr	r3, [pc, #64]	; (80094e4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80094a2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80094a6:	4910      	ldr	r1, [pc, #64]	; (80094e8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80094a8:	4810      	ldr	r0, [pc, #64]	; (80094ec <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80094aa:	f007 f89d 	bl	80105e8 <iprintf>

  while (pcb != NULL) {
 80094ae:	e011      	b.n	80094d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d108      	bne.n	80094ce <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f7fe fd24 	bl	8007f10 <tcp_abort>
      pcb = next;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	e002      	b.n	80094d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1ea      	bne.n	80094b0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80094da:	bf00      	nop
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	0801216c 	.word	0x0801216c
 80094e8:	080128a0 	.word	0x080128a0
 80094ec:	080121b0 	.word	0x080121b0

080094f0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d02a      	beq.n	8009556 <tcp_netif_ip_addr_changed+0x66>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d026      	beq.n	8009556 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009508:	4b15      	ldr	r3, [pc, #84]	; (8009560 <tcp_netif_ip_addr_changed+0x70>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7ff ffbc 	bl	800948c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009514:	4b13      	ldr	r3, [pc, #76]	; (8009564 <tcp_netif_ip_addr_changed+0x74>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff ffb6 	bl	800948c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d017      	beq.n	8009556 <tcp_netif_ip_addr_changed+0x66>
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d013      	beq.n	8009556 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800952e:	4b0e      	ldr	r3, [pc, #56]	; (8009568 <tcp_netif_ip_addr_changed+0x78>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	e00c      	b.n	8009550 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	429a      	cmp	r2, r3
 8009540:	d103      	bne.n	800954a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1ef      	bne.n	8009536 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20007150 	.word	0x20007150
 8009564:	2000715c 	.word	0x2000715c
 8009568:	20007158 	.word	0x20007158

0800956c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009578:	2b00      	cmp	r3, #0
 800957a:	d007      	beq.n	800958c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009580:	4618      	mov	r0, r3
 8009582:	f7ff fb53 	bl	8008c2c <tcp_segs_free>
    pcb->ooseq = NULL;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800958c:	bf00      	nop
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009594:	b590      	push	{r4, r7, lr}
 8009596:	b08d      	sub	sp, #52	; 0x34
 8009598:	af04      	add	r7, sp, #16
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d105      	bne.n	80095b0 <tcp_input+0x1c>
 80095a4:	4b9b      	ldr	r3, [pc, #620]	; (8009814 <tcp_input+0x280>)
 80095a6:	2283      	movs	r2, #131	; 0x83
 80095a8:	499b      	ldr	r1, [pc, #620]	; (8009818 <tcp_input+0x284>)
 80095aa:	489c      	ldr	r0, [pc, #624]	; (800981c <tcp_input+0x288>)
 80095ac:	f007 f81c 	bl	80105e8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	4a9a      	ldr	r2, [pc, #616]	; (8009820 <tcp_input+0x28c>)
 80095b6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	895b      	ldrh	r3, [r3, #10]
 80095bc:	2b13      	cmp	r3, #19
 80095be:	f240 83c4 	bls.w	8009d4a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80095c2:	4b98      	ldr	r3, [pc, #608]	; (8009824 <tcp_input+0x290>)
 80095c4:	695a      	ldr	r2, [r3, #20]
 80095c6:	4b97      	ldr	r3, [pc, #604]	; (8009824 <tcp_input+0x290>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4619      	mov	r1, r3
 80095cc:	4610      	mov	r0, r2
 80095ce:	f006 f879 	bl	800f6c4 <ip4_addr_isbroadcast_u32>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f040 83ba 	bne.w	8009d4e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80095da:	4b92      	ldr	r3, [pc, #584]	; (8009824 <tcp_input+0x290>)
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80095e2:	2be0      	cmp	r3, #224	; 0xe0
 80095e4:	f000 83b3 	beq.w	8009d4e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80095e8:	4b8d      	ldr	r3, [pc, #564]	; (8009820 <tcp_input+0x28c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	899b      	ldrh	r3, [r3, #12]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fc fc27 	bl	8005e44 <lwip_htons>
 80095f6:	4603      	mov	r3, r0
 80095f8:	0b1b      	lsrs	r3, r3, #12
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009602:	7cbb      	ldrb	r3, [r7, #18]
 8009604:	2b13      	cmp	r3, #19
 8009606:	f240 83a2 	bls.w	8009d4e <tcp_input+0x7ba>
 800960a:	7cbb      	ldrb	r3, [r7, #18]
 800960c:	b29a      	uxth	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	891b      	ldrh	r3, [r3, #8]
 8009612:	429a      	cmp	r2, r3
 8009614:	f200 839b 	bhi.w	8009d4e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009618:	7cbb      	ldrb	r3, [r7, #18]
 800961a:	b29b      	uxth	r3, r3
 800961c:	3b14      	subs	r3, #20
 800961e:	b29a      	uxth	r2, r3
 8009620:	4b81      	ldr	r3, [pc, #516]	; (8009828 <tcp_input+0x294>)
 8009622:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009624:	4b81      	ldr	r3, [pc, #516]	; (800982c <tcp_input+0x298>)
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	895a      	ldrh	r2, [r3, #10]
 800962e:	7cbb      	ldrb	r3, [r7, #18]
 8009630:	b29b      	uxth	r3, r3
 8009632:	429a      	cmp	r2, r3
 8009634:	d309      	bcc.n	800964a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009636:	4b7c      	ldr	r3, [pc, #496]	; (8009828 <tcp_input+0x294>)
 8009638:	881a      	ldrh	r2, [r3, #0]
 800963a:	4b7d      	ldr	r3, [pc, #500]	; (8009830 <tcp_input+0x29c>)
 800963c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800963e:	7cbb      	ldrb	r3, [r7, #18]
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fd fe5e 	bl	8007304 <pbuf_remove_header>
 8009648:	e04e      	b.n	80096e8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d105      	bne.n	800965e <tcp_input+0xca>
 8009652:	4b70      	ldr	r3, [pc, #448]	; (8009814 <tcp_input+0x280>)
 8009654:	22c2      	movs	r2, #194	; 0xc2
 8009656:	4977      	ldr	r1, [pc, #476]	; (8009834 <tcp_input+0x2a0>)
 8009658:	4870      	ldr	r0, [pc, #448]	; (800981c <tcp_input+0x288>)
 800965a:	f006 ffc5 	bl	80105e8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800965e:	2114      	movs	r1, #20
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7fd fe4f 	bl	8007304 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	895a      	ldrh	r2, [r3, #10]
 800966a:	4b71      	ldr	r3, [pc, #452]	; (8009830 <tcp_input+0x29c>)
 800966c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800966e:	4b6e      	ldr	r3, [pc, #440]	; (8009828 <tcp_input+0x294>)
 8009670:	881a      	ldrh	r2, [r3, #0]
 8009672:	4b6f      	ldr	r3, [pc, #444]	; (8009830 <tcp_input+0x29c>)
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800967a:	4b6d      	ldr	r3, [pc, #436]	; (8009830 <tcp_input+0x29c>)
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7fd fe3f 	bl	8007304 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	895b      	ldrh	r3, [r3, #10]
 800968c:	8a3a      	ldrh	r2, [r7, #16]
 800968e:	429a      	cmp	r2, r3
 8009690:	f200 835f 	bhi.w	8009d52 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	4a64      	ldr	r2, [pc, #400]	; (800982c <tcp_input+0x298>)
 800969c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	8a3a      	ldrh	r2, [r7, #16]
 80096a4:	4611      	mov	r1, r2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fd fe2c 	bl	8007304 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	891a      	ldrh	r2, [r3, #8]
 80096b0:	8a3b      	ldrh	r3, [r7, #16]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	895b      	ldrh	r3, [r3, #10]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d005      	beq.n	80096ce <tcp_input+0x13a>
 80096c2:	4b54      	ldr	r3, [pc, #336]	; (8009814 <tcp_input+0x280>)
 80096c4:	22df      	movs	r2, #223	; 0xdf
 80096c6:	495c      	ldr	r1, [pc, #368]	; (8009838 <tcp_input+0x2a4>)
 80096c8:	4854      	ldr	r0, [pc, #336]	; (800981c <tcp_input+0x288>)
 80096ca:	f006 ff8d 	bl	80105e8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	891a      	ldrh	r2, [r3, #8]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	891b      	ldrh	r3, [r3, #8]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d005      	beq.n	80096e8 <tcp_input+0x154>
 80096dc:	4b4d      	ldr	r3, [pc, #308]	; (8009814 <tcp_input+0x280>)
 80096de:	22e0      	movs	r2, #224	; 0xe0
 80096e0:	4956      	ldr	r1, [pc, #344]	; (800983c <tcp_input+0x2a8>)
 80096e2:	484e      	ldr	r0, [pc, #312]	; (800981c <tcp_input+0x288>)
 80096e4:	f006 ff80 	bl	80105e8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80096e8:	4b4d      	ldr	r3, [pc, #308]	; (8009820 <tcp_input+0x28c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	4b4b      	ldr	r3, [pc, #300]	; (8009820 <tcp_input+0x28c>)
 80096f2:	681c      	ldr	r4, [r3, #0]
 80096f4:	4610      	mov	r0, r2
 80096f6:	f7fc fba5 	bl	8005e44 <lwip_htons>
 80096fa:	4603      	mov	r3, r0
 80096fc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80096fe:	4b48      	ldr	r3, [pc, #288]	; (8009820 <tcp_input+0x28c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	885b      	ldrh	r3, [r3, #2]
 8009704:	b29a      	uxth	r2, r3
 8009706:	4b46      	ldr	r3, [pc, #280]	; (8009820 <tcp_input+0x28c>)
 8009708:	681c      	ldr	r4, [r3, #0]
 800970a:	4610      	mov	r0, r2
 800970c:	f7fc fb9a 	bl	8005e44 <lwip_htons>
 8009710:	4603      	mov	r3, r0
 8009712:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009714:	4b42      	ldr	r3, [pc, #264]	; (8009820 <tcp_input+0x28c>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	4b41      	ldr	r3, [pc, #260]	; (8009820 <tcp_input+0x28c>)
 800971c:	681c      	ldr	r4, [r3, #0]
 800971e:	4610      	mov	r0, r2
 8009720:	f7fc fba5 	bl	8005e6e <lwip_htonl>
 8009724:	4603      	mov	r3, r0
 8009726:	6063      	str	r3, [r4, #4]
 8009728:	6863      	ldr	r3, [r4, #4]
 800972a:	4a45      	ldr	r2, [pc, #276]	; (8009840 <tcp_input+0x2ac>)
 800972c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800972e:	4b3c      	ldr	r3, [pc, #240]	; (8009820 <tcp_input+0x28c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689a      	ldr	r2, [r3, #8]
 8009734:	4b3a      	ldr	r3, [pc, #232]	; (8009820 <tcp_input+0x28c>)
 8009736:	681c      	ldr	r4, [r3, #0]
 8009738:	4610      	mov	r0, r2
 800973a:	f7fc fb98 	bl	8005e6e <lwip_htonl>
 800973e:	4603      	mov	r3, r0
 8009740:	60a3      	str	r3, [r4, #8]
 8009742:	68a3      	ldr	r3, [r4, #8]
 8009744:	4a3f      	ldr	r2, [pc, #252]	; (8009844 <tcp_input+0x2b0>)
 8009746:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009748:	4b35      	ldr	r3, [pc, #212]	; (8009820 <tcp_input+0x28c>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	89db      	ldrh	r3, [r3, #14]
 800974e:	b29a      	uxth	r2, r3
 8009750:	4b33      	ldr	r3, [pc, #204]	; (8009820 <tcp_input+0x28c>)
 8009752:	681c      	ldr	r4, [r3, #0]
 8009754:	4610      	mov	r0, r2
 8009756:	f7fc fb75 	bl	8005e44 <lwip_htons>
 800975a:	4603      	mov	r3, r0
 800975c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800975e:	4b30      	ldr	r3, [pc, #192]	; (8009820 <tcp_input+0x28c>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	899b      	ldrh	r3, [r3, #12]
 8009764:	b29b      	uxth	r3, r3
 8009766:	4618      	mov	r0, r3
 8009768:	f7fc fb6c 	bl	8005e44 <lwip_htons>
 800976c:	4603      	mov	r3, r0
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009774:	b2da      	uxtb	r2, r3
 8009776:	4b34      	ldr	r3, [pc, #208]	; (8009848 <tcp_input+0x2b4>)
 8009778:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	891a      	ldrh	r2, [r3, #8]
 800977e:	4b33      	ldr	r3, [pc, #204]	; (800984c <tcp_input+0x2b8>)
 8009780:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009782:	4b31      	ldr	r3, [pc, #196]	; (8009848 <tcp_input+0x2b4>)
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	f003 0303 	and.w	r3, r3, #3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00c      	beq.n	80097a8 <tcp_input+0x214>
    tcplen++;
 800978e:	4b2f      	ldr	r3, [pc, #188]	; (800984c <tcp_input+0x2b8>)
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	3301      	adds	r3, #1
 8009794:	b29a      	uxth	r2, r3
 8009796:	4b2d      	ldr	r3, [pc, #180]	; (800984c <tcp_input+0x2b8>)
 8009798:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	891a      	ldrh	r2, [r3, #8]
 800979e:	4b2b      	ldr	r3, [pc, #172]	; (800984c <tcp_input+0x2b8>)
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	f200 82d7 	bhi.w	8009d56 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80097a8:	2300      	movs	r3, #0
 80097aa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80097ac:	4b28      	ldr	r3, [pc, #160]	; (8009850 <tcp_input+0x2bc>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	61fb      	str	r3, [r7, #28]
 80097b2:	e09d      	b.n	80098f0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	7d1b      	ldrb	r3, [r3, #20]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d105      	bne.n	80097c8 <tcp_input+0x234>
 80097bc:	4b15      	ldr	r3, [pc, #84]	; (8009814 <tcp_input+0x280>)
 80097be:	22fb      	movs	r2, #251	; 0xfb
 80097c0:	4924      	ldr	r1, [pc, #144]	; (8009854 <tcp_input+0x2c0>)
 80097c2:	4816      	ldr	r0, [pc, #88]	; (800981c <tcp_input+0x288>)
 80097c4:	f006 ff10 	bl	80105e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	7d1b      	ldrb	r3, [r3, #20]
 80097cc:	2b0a      	cmp	r3, #10
 80097ce:	d105      	bne.n	80097dc <tcp_input+0x248>
 80097d0:	4b10      	ldr	r3, [pc, #64]	; (8009814 <tcp_input+0x280>)
 80097d2:	22fc      	movs	r2, #252	; 0xfc
 80097d4:	4920      	ldr	r1, [pc, #128]	; (8009858 <tcp_input+0x2c4>)
 80097d6:	4811      	ldr	r0, [pc, #68]	; (800981c <tcp_input+0x288>)
 80097d8:	f006 ff06 	bl	80105e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	7d1b      	ldrb	r3, [r3, #20]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d105      	bne.n	80097f0 <tcp_input+0x25c>
 80097e4:	4b0b      	ldr	r3, [pc, #44]	; (8009814 <tcp_input+0x280>)
 80097e6:	22fd      	movs	r2, #253	; 0xfd
 80097e8:	491c      	ldr	r1, [pc, #112]	; (800985c <tcp_input+0x2c8>)
 80097ea:	480c      	ldr	r0, [pc, #48]	; (800981c <tcp_input+0x288>)
 80097ec:	f006 fefc 	bl	80105e8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	7a1b      	ldrb	r3, [r3, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d033      	beq.n	8009860 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	7a1a      	ldrb	r2, [r3, #8]
 80097fc:	4b09      	ldr	r3, [pc, #36]	; (8009824 <tcp_input+0x290>)
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009804:	3301      	adds	r3, #1
 8009806:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009808:	429a      	cmp	r2, r3
 800980a:	d029      	beq.n	8009860 <tcp_input+0x2cc>
      prev = pcb;
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	61bb      	str	r3, [r7, #24]
      continue;
 8009810:	e06b      	b.n	80098ea <tcp_input+0x356>
 8009812:	bf00      	nop
 8009814:	080128d4 	.word	0x080128d4
 8009818:	08012908 	.word	0x08012908
 800981c:	08012920 	.word	0x08012920
 8009820:	2000051c 	.word	0x2000051c
 8009824:	20003c0c 	.word	0x20003c0c
 8009828:	20000520 	.word	0x20000520
 800982c:	20000524 	.word	0x20000524
 8009830:	20000522 	.word	0x20000522
 8009834:	08012948 	.word	0x08012948
 8009838:	08012958 	.word	0x08012958
 800983c:	08012964 	.word	0x08012964
 8009840:	2000052c 	.word	0x2000052c
 8009844:	20000530 	.word	0x20000530
 8009848:	20000538 	.word	0x20000538
 800984c:	20000536 	.word	0x20000536
 8009850:	20007150 	.word	0x20007150
 8009854:	08012984 	.word	0x08012984
 8009858:	080129ac 	.word	0x080129ac
 800985c:	080129d8 	.word	0x080129d8
    }

    if (pcb->remote_port == tcphdr->src &&
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	8b1a      	ldrh	r2, [r3, #24]
 8009864:	4b94      	ldr	r3, [pc, #592]	; (8009ab8 <tcp_input+0x524>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	b29b      	uxth	r3, r3
 800986c:	429a      	cmp	r2, r3
 800986e:	d13a      	bne.n	80098e6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	8ada      	ldrh	r2, [r3, #22]
 8009874:	4b90      	ldr	r3, [pc, #576]	; (8009ab8 <tcp_input+0x524>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	885b      	ldrh	r3, [r3, #2]
 800987a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800987c:	429a      	cmp	r2, r3
 800987e:	d132      	bne.n	80098e6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	685a      	ldr	r2, [r3, #4]
 8009884:	4b8d      	ldr	r3, [pc, #564]	; (8009abc <tcp_input+0x528>)
 8009886:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009888:	429a      	cmp	r2, r3
 800988a:	d12c      	bne.n	80098e6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	4b8a      	ldr	r3, [pc, #552]	; (8009abc <tcp_input+0x528>)
 8009892:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009894:	429a      	cmp	r2, r3
 8009896:	d126      	bne.n	80098e6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	69fa      	ldr	r2, [r7, #28]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d106      	bne.n	80098b0 <tcp_input+0x31c>
 80098a2:	4b87      	ldr	r3, [pc, #540]	; (8009ac0 <tcp_input+0x52c>)
 80098a4:	f240 120d 	movw	r2, #269	; 0x10d
 80098a8:	4986      	ldr	r1, [pc, #536]	; (8009ac4 <tcp_input+0x530>)
 80098aa:	4887      	ldr	r0, [pc, #540]	; (8009ac8 <tcp_input+0x534>)
 80098ac:	f006 fe9c 	bl	80105e8 <iprintf>
      if (prev != NULL) {
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <tcp_input+0x338>
        prev->next = pcb->next;
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	68da      	ldr	r2, [r3, #12]
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80098be:	4b83      	ldr	r3, [pc, #524]	; (8009acc <tcp_input+0x538>)
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80098c6:	4a81      	ldr	r2, [pc, #516]	; (8009acc <tcp_input+0x538>)
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	69fa      	ldr	r2, [r7, #28]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d111      	bne.n	80098fa <tcp_input+0x366>
 80098d6:	4b7a      	ldr	r3, [pc, #488]	; (8009ac0 <tcp_input+0x52c>)
 80098d8:	f240 1215 	movw	r2, #277	; 0x115
 80098dc:	497c      	ldr	r1, [pc, #496]	; (8009ad0 <tcp_input+0x53c>)
 80098de:	487a      	ldr	r0, [pc, #488]	; (8009ac8 <tcp_input+0x534>)
 80098e0:	f006 fe82 	bl	80105e8 <iprintf>
      break;
 80098e4:	e009      	b.n	80098fa <tcp_input+0x366>
    }
    prev = pcb;
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	61fb      	str	r3, [r7, #28]
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f47f af5e 	bne.w	80097b4 <tcp_input+0x220>
 80098f8:	e000      	b.n	80098fc <tcp_input+0x368>
      break;
 80098fa:	bf00      	nop
  }

  if (pcb == NULL) {
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f040 8095 	bne.w	8009a2e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009904:	4b73      	ldr	r3, [pc, #460]	; (8009ad4 <tcp_input+0x540>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	61fb      	str	r3, [r7, #28]
 800990a:	e03f      	b.n	800998c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	7d1b      	ldrb	r3, [r3, #20]
 8009910:	2b0a      	cmp	r3, #10
 8009912:	d006      	beq.n	8009922 <tcp_input+0x38e>
 8009914:	4b6a      	ldr	r3, [pc, #424]	; (8009ac0 <tcp_input+0x52c>)
 8009916:	f240 121f 	movw	r2, #287	; 0x11f
 800991a:	496f      	ldr	r1, [pc, #444]	; (8009ad8 <tcp_input+0x544>)
 800991c:	486a      	ldr	r0, [pc, #424]	; (8009ac8 <tcp_input+0x534>)
 800991e:	f006 fe63 	bl	80105e8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	7a1b      	ldrb	r3, [r3, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d009      	beq.n	800993e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	7a1a      	ldrb	r2, [r3, #8]
 800992e:	4b63      	ldr	r3, [pc, #396]	; (8009abc <tcp_input+0x528>)
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009936:	3301      	adds	r3, #1
 8009938:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800993a:	429a      	cmp	r2, r3
 800993c:	d122      	bne.n	8009984 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	8b1a      	ldrh	r2, [r3, #24]
 8009942:	4b5d      	ldr	r3, [pc, #372]	; (8009ab8 <tcp_input+0x524>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	b29b      	uxth	r3, r3
 800994a:	429a      	cmp	r2, r3
 800994c:	d11b      	bne.n	8009986 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	8ada      	ldrh	r2, [r3, #22]
 8009952:	4b59      	ldr	r3, [pc, #356]	; (8009ab8 <tcp_input+0x524>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	885b      	ldrh	r3, [r3, #2]
 8009958:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800995a:	429a      	cmp	r2, r3
 800995c:	d113      	bne.n	8009986 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	4b56      	ldr	r3, [pc, #344]	; (8009abc <tcp_input+0x528>)
 8009964:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009966:	429a      	cmp	r2, r3
 8009968:	d10d      	bne.n	8009986 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	4b53      	ldr	r3, [pc, #332]	; (8009abc <tcp_input+0x528>)
 8009970:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009972:	429a      	cmp	r2, r3
 8009974:	d107      	bne.n	8009986 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009976:	69f8      	ldr	r0, [r7, #28]
 8009978:	f000 fb52 	bl	800a020 <tcp_timewait_input>
        }
        pbuf_free(p);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7fd fd47 	bl	8007410 <pbuf_free>
        return;
 8009982:	e1ee      	b.n	8009d62 <tcp_input+0x7ce>
        continue;
 8009984:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	61fb      	str	r3, [r7, #28]
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1bc      	bne.n	800990c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009996:	4b51      	ldr	r3, [pc, #324]	; (8009adc <tcp_input+0x548>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	e02a      	b.n	80099f4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	7a1b      	ldrb	r3, [r3, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00c      	beq.n	80099c0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	7a1a      	ldrb	r2, [r3, #8]
 80099aa:	4b44      	ldr	r3, [pc, #272]	; (8009abc <tcp_input+0x528>)
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80099b2:	3301      	adds	r3, #1
 80099b4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d002      	beq.n	80099c0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	61bb      	str	r3, [r7, #24]
        continue;
 80099be:	e016      	b.n	80099ee <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	8ada      	ldrh	r2, [r3, #22]
 80099c4:	4b3c      	ldr	r3, [pc, #240]	; (8009ab8 <tcp_input+0x524>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	885b      	ldrh	r3, [r3, #2]
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d10c      	bne.n	80099ea <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	4b39      	ldr	r3, [pc, #228]	; (8009abc <tcp_input+0x528>)
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d00f      	beq.n	80099fc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00d      	beq.n	80099fe <tcp_input+0x46a>
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d009      	beq.n	80099fe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1d1      	bne.n	800999e <tcp_input+0x40a>
 80099fa:	e000      	b.n	80099fe <tcp_input+0x46a>
            break;
 80099fc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d014      	beq.n	8009a2e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	68da      	ldr	r2, [r3, #12]
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009a12:	4b32      	ldr	r3, [pc, #200]	; (8009adc <tcp_input+0x548>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009a1a:	4a30      	ldr	r2, [pc, #192]	; (8009adc <tcp_input+0x548>)
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009a20:	6978      	ldr	r0, [r7, #20]
 8009a22:	f000 f9ff 	bl	8009e24 <tcp_listen_input>
      }
      pbuf_free(p);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7fd fcf2 	bl	8007410 <pbuf_free>
      return;
 8009a2c:	e199      	b.n	8009d62 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 8160 	beq.w	8009cf6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009a36:	4b2a      	ldr	r3, [pc, #168]	; (8009ae0 <tcp_input+0x54c>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	891a      	ldrh	r2, [r3, #8]
 8009a40:	4b27      	ldr	r3, [pc, #156]	; (8009ae0 <tcp_input+0x54c>)
 8009a42:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009a44:	4a26      	ldr	r2, [pc, #152]	; (8009ae0 <tcp_input+0x54c>)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009a4a:	4b1b      	ldr	r3, [pc, #108]	; (8009ab8 <tcp_input+0x524>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a24      	ldr	r2, [pc, #144]	; (8009ae0 <tcp_input+0x54c>)
 8009a50:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009a52:	4b24      	ldr	r3, [pc, #144]	; (8009ae4 <tcp_input+0x550>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009a58:	4b23      	ldr	r3, [pc, #140]	; (8009ae8 <tcp_input+0x554>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009a5e:	4b23      	ldr	r3, [pc, #140]	; (8009aec <tcp_input+0x558>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009a64:	4b22      	ldr	r3, [pc, #136]	; (8009af0 <tcp_input+0x55c>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	f003 0308 	and.w	r3, r3, #8
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d006      	beq.n	8009a7e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	7b5b      	ldrb	r3, [r3, #13]
 8009a74:	f043 0301 	orr.w	r3, r3, #1
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d038      	beq.n	8009af8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009a86:	69f8      	ldr	r0, [r7, #28]
 8009a88:	f7ff f854 	bl	8008b34 <tcp_process_refused_data>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	f113 0f0d 	cmn.w	r3, #13
 8009a92:	d007      	beq.n	8009aa4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d02d      	beq.n	8009af8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009a9c:	4b15      	ldr	r3, [pc, #84]	; (8009af4 <tcp_input+0x560>)
 8009a9e:	881b      	ldrh	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d029      	beq.n	8009af8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f040 8104 	bne.w	8009cb6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009aae:	69f8      	ldr	r0, [r7, #28]
 8009ab0:	f003 fe28 	bl	800d704 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009ab4:	e0ff      	b.n	8009cb6 <tcp_input+0x722>
 8009ab6:	bf00      	nop
 8009ab8:	2000051c 	.word	0x2000051c
 8009abc:	20003c0c 	.word	0x20003c0c
 8009ac0:	080128d4 	.word	0x080128d4
 8009ac4:	08012a00 	.word	0x08012a00
 8009ac8:	08012920 	.word	0x08012920
 8009acc:	20007150 	.word	0x20007150
 8009ad0:	08012a2c 	.word	0x08012a2c
 8009ad4:	20007160 	.word	0x20007160
 8009ad8:	08012a58 	.word	0x08012a58
 8009adc:	20007158 	.word	0x20007158
 8009ae0:	2000050c 	.word	0x2000050c
 8009ae4:	2000053c 	.word	0x2000053c
 8009ae8:	20000539 	.word	0x20000539
 8009aec:	20000534 	.word	0x20000534
 8009af0:	20000538 	.word	0x20000538
 8009af4:	20000536 	.word	0x20000536
      }
    }
    tcp_input_pcb = pcb;
 8009af8:	4a9b      	ldr	r2, [pc, #620]	; (8009d68 <tcp_input+0x7d4>)
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009afe:	69f8      	ldr	r0, [r7, #28]
 8009b00:	f000 fb0a 	bl	800a118 <tcp_process>
 8009b04:	4603      	mov	r3, r0
 8009b06:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009b08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b0c:	f113 0f0d 	cmn.w	r3, #13
 8009b10:	f000 80d3 	beq.w	8009cba <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8009b14:	4b95      	ldr	r3, [pc, #596]	; (8009d6c <tcp_input+0x7d8>)
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	f003 0308 	and.w	r3, r3, #8
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d015      	beq.n	8009b4c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d008      	beq.n	8009b3c <tcp_input+0x5a8>
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b30:	69fa      	ldr	r2, [r7, #28]
 8009b32:	6912      	ldr	r2, [r2, #16]
 8009b34:	f06f 010d 	mvn.w	r1, #13
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009b3c:	69f9      	ldr	r1, [r7, #28]
 8009b3e:	488c      	ldr	r0, [pc, #560]	; (8009d70 <tcp_input+0x7dc>)
 8009b40:	f7ff fbb0 	bl	80092a4 <tcp_pcb_remove>
        tcp_free(pcb);
 8009b44:	69f8      	ldr	r0, [r7, #28]
 8009b46:	f7fd ff03 	bl	8007950 <tcp_free>
 8009b4a:	e0c1      	b.n	8009cd0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009b50:	4b88      	ldr	r3, [pc, #544]	; (8009d74 <tcp_input+0x7e0>)
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d01d      	beq.n	8009b94 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009b58:	4b86      	ldr	r3, [pc, #536]	; (8009d74 <tcp_input+0x7e0>)
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00a      	beq.n	8009b7e <tcp_input+0x5ea>
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	6910      	ldr	r0, [r2, #16]
 8009b72:	89fa      	ldrh	r2, [r7, #14]
 8009b74:	69f9      	ldr	r1, [r7, #28]
 8009b76:	4798      	blx	r3
 8009b78:	4603      	mov	r3, r0
 8009b7a:	74fb      	strb	r3, [r7, #19]
 8009b7c:	e001      	b.n	8009b82 <tcp_input+0x5ee>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009b82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b86:	f113 0f0d 	cmn.w	r3, #13
 8009b8a:	f000 8098 	beq.w	8009cbe <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009b8e:	4b79      	ldr	r3, [pc, #484]	; (8009d74 <tcp_input+0x7e0>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009b94:	69f8      	ldr	r0, [r7, #28]
 8009b96:	f000 f905 	bl	8009da4 <tcp_input_delayed_close>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f040 8090 	bne.w	8009cc2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009ba2:	4b75      	ldr	r3, [pc, #468]	; (8009d78 <tcp_input+0x7e4>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d041      	beq.n	8009c2e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d006      	beq.n	8009bc0 <tcp_input+0x62c>
 8009bb2:	4b72      	ldr	r3, [pc, #456]	; (8009d7c <tcp_input+0x7e8>)
 8009bb4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009bb8:	4971      	ldr	r1, [pc, #452]	; (8009d80 <tcp_input+0x7ec>)
 8009bba:	4872      	ldr	r0, [pc, #456]	; (8009d84 <tcp_input+0x7f0>)
 8009bbc:	f006 fd14 	bl	80105e8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	8b5b      	ldrh	r3, [r3, #26]
 8009bc4:	f003 0310 	and.w	r3, r3, #16
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d008      	beq.n	8009bde <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009bcc:	4b6a      	ldr	r3, [pc, #424]	; (8009d78 <tcp_input+0x7e4>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fd fc1d 	bl	8007410 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009bd6:	69f8      	ldr	r0, [r7, #28]
 8009bd8:	f7fe f99a 	bl	8007f10 <tcp_abort>
            goto aborted;
 8009bdc:	e078      	b.n	8009cd0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00c      	beq.n	8009c02 <tcp_input+0x66e>
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	6918      	ldr	r0, [r3, #16]
 8009bf2:	4b61      	ldr	r3, [pc, #388]	; (8009d78 <tcp_input+0x7e4>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	69f9      	ldr	r1, [r7, #28]
 8009bfa:	47a0      	blx	r4
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	74fb      	strb	r3, [r7, #19]
 8009c00:	e008      	b.n	8009c14 <tcp_input+0x680>
 8009c02:	4b5d      	ldr	r3, [pc, #372]	; (8009d78 <tcp_input+0x7e4>)
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	2300      	movs	r3, #0
 8009c08:	69f9      	ldr	r1, [r7, #28]
 8009c0a:	2000      	movs	r0, #0
 8009c0c:	f7ff f884 	bl	8008d18 <tcp_recv_null>
 8009c10:	4603      	mov	r3, r0
 8009c12:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009c14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c18:	f113 0f0d 	cmn.w	r3, #13
 8009c1c:	d053      	beq.n	8009cc6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009c1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009c26:	4b54      	ldr	r3, [pc, #336]	; (8009d78 <tcp_input+0x7e4>)
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009c2e:	4b4f      	ldr	r3, [pc, #316]	; (8009d6c <tcp_input+0x7d8>)
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d030      	beq.n	8009c9c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d009      	beq.n	8009c56 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c46:	7b5a      	ldrb	r2, [r3, #13]
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c4c:	f042 0220 	orr.w	r2, r2, #32
 8009c50:	b2d2      	uxtb	r2, r2
 8009c52:	735a      	strb	r2, [r3, #13]
 8009c54:	e022      	b.n	8009c9c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009c5e:	d005      	beq.n	8009c6c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c64:	3301      	adds	r3, #1
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00b      	beq.n	8009c8e <tcp_input+0x6fa>
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	6918      	ldr	r0, [r3, #16]
 8009c80:	2300      	movs	r3, #0
 8009c82:	2200      	movs	r2, #0
 8009c84:	69f9      	ldr	r1, [r7, #28]
 8009c86:	47a0      	blx	r4
 8009c88:	4603      	mov	r3, r0
 8009c8a:	74fb      	strb	r3, [r7, #19]
 8009c8c:	e001      	b.n	8009c92 <tcp_input+0x6fe>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009c92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c96:	f113 0f0d 	cmn.w	r3, #13
 8009c9a:	d016      	beq.n	8009cca <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009c9c:	4b32      	ldr	r3, [pc, #200]	; (8009d68 <tcp_input+0x7d4>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009ca2:	69f8      	ldr	r0, [r7, #28]
 8009ca4:	f000 f87e 	bl	8009da4 <tcp_input_delayed_close>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10f      	bne.n	8009cce <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009cae:	69f8      	ldr	r0, [r7, #28]
 8009cb0:	f002 ff10 	bl	800cad4 <tcp_output>
 8009cb4:	e00c      	b.n	8009cd0 <tcp_input+0x73c>
        goto aborted;
 8009cb6:	bf00      	nop
 8009cb8:	e00a      	b.n	8009cd0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009cba:	bf00      	nop
 8009cbc:	e008      	b.n	8009cd0 <tcp_input+0x73c>
              goto aborted;
 8009cbe:	bf00      	nop
 8009cc0:	e006      	b.n	8009cd0 <tcp_input+0x73c>
          goto aborted;
 8009cc2:	bf00      	nop
 8009cc4:	e004      	b.n	8009cd0 <tcp_input+0x73c>
            goto aborted;
 8009cc6:	bf00      	nop
 8009cc8:	e002      	b.n	8009cd0 <tcp_input+0x73c>
              goto aborted;
 8009cca:	bf00      	nop
 8009ccc:	e000      	b.n	8009cd0 <tcp_input+0x73c>
          goto aborted;
 8009cce:	bf00      	nop
    tcp_input_pcb = NULL;
 8009cd0:	4b25      	ldr	r3, [pc, #148]	; (8009d68 <tcp_input+0x7d4>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009cd6:	4b28      	ldr	r3, [pc, #160]	; (8009d78 <tcp_input+0x7e4>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009cdc:	4b2a      	ldr	r3, [pc, #168]	; (8009d88 <tcp_input+0x7f4>)
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d03d      	beq.n	8009d60 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8009ce4:	4b28      	ldr	r3, [pc, #160]	; (8009d88 <tcp_input+0x7f4>)
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fd fb91 	bl	8007410 <pbuf_free>
      inseg.p = NULL;
 8009cee:	4b26      	ldr	r3, [pc, #152]	; (8009d88 <tcp_input+0x7f4>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009cf4:	e034      	b.n	8009d60 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009cf6:	4b25      	ldr	r3, [pc, #148]	; (8009d8c <tcp_input+0x7f8>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	899b      	ldrh	r3, [r3, #12]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fc f8a0 	bl	8005e44 <lwip_htons>
 8009d04:	4603      	mov	r3, r0
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d118      	bne.n	8009d42 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d10:	4b1f      	ldr	r3, [pc, #124]	; (8009d90 <tcp_input+0x7fc>)
 8009d12:	6819      	ldr	r1, [r3, #0]
 8009d14:	4b1f      	ldr	r3, [pc, #124]	; (8009d94 <tcp_input+0x800>)
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	4b1f      	ldr	r3, [pc, #124]	; (8009d98 <tcp_input+0x804>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d20:	4b1a      	ldr	r3, [pc, #104]	; (8009d8c <tcp_input+0x7f8>)
 8009d22:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d24:	885b      	ldrh	r3, [r3, #2]
 8009d26:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d28:	4a18      	ldr	r2, [pc, #96]	; (8009d8c <tcp_input+0x7f8>)
 8009d2a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d2c:	8812      	ldrh	r2, [r2, #0]
 8009d2e:	b292      	uxth	r2, r2
 8009d30:	9202      	str	r2, [sp, #8]
 8009d32:	9301      	str	r3, [sp, #4]
 8009d34:	4b19      	ldr	r3, [pc, #100]	; (8009d9c <tcp_input+0x808>)
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	4b19      	ldr	r3, [pc, #100]	; (8009da0 <tcp_input+0x80c>)
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	f003 fc8f 	bl	800d660 <tcp_rst>
    pbuf_free(p);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7fd fb64 	bl	8007410 <pbuf_free>
  return;
 8009d48:	e00a      	b.n	8009d60 <tcp_input+0x7cc>
    goto dropped;
 8009d4a:	bf00      	nop
 8009d4c:	e004      	b.n	8009d58 <tcp_input+0x7c4>
dropped:
 8009d4e:	bf00      	nop
 8009d50:	e002      	b.n	8009d58 <tcp_input+0x7c4>
      goto dropped;
 8009d52:	bf00      	nop
 8009d54:	e000      	b.n	8009d58 <tcp_input+0x7c4>
      goto dropped;
 8009d56:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7fd fb59 	bl	8007410 <pbuf_free>
 8009d5e:	e000      	b.n	8009d62 <tcp_input+0x7ce>
  return;
 8009d60:	bf00      	nop
}
 8009d62:	3724      	adds	r7, #36	; 0x24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd90      	pop	{r4, r7, pc}
 8009d68:	20007164 	.word	0x20007164
 8009d6c:	20000539 	.word	0x20000539
 8009d70:	20007150 	.word	0x20007150
 8009d74:	20000534 	.word	0x20000534
 8009d78:	2000053c 	.word	0x2000053c
 8009d7c:	080128d4 	.word	0x080128d4
 8009d80:	08012a88 	.word	0x08012a88
 8009d84:	08012920 	.word	0x08012920
 8009d88:	2000050c 	.word	0x2000050c
 8009d8c:	2000051c 	.word	0x2000051c
 8009d90:	20000530 	.word	0x20000530
 8009d94:	20000536 	.word	0x20000536
 8009d98:	2000052c 	.word	0x2000052c
 8009d9c:	20003c1c 	.word	0x20003c1c
 8009da0:	20003c20 	.word	0x20003c20

08009da4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d106      	bne.n	8009dc0 <tcp_input_delayed_close+0x1c>
 8009db2:	4b17      	ldr	r3, [pc, #92]	; (8009e10 <tcp_input_delayed_close+0x6c>)
 8009db4:	f240 225a 	movw	r2, #602	; 0x25a
 8009db8:	4916      	ldr	r1, [pc, #88]	; (8009e14 <tcp_input_delayed_close+0x70>)
 8009dba:	4817      	ldr	r0, [pc, #92]	; (8009e18 <tcp_input_delayed_close+0x74>)
 8009dbc:	f006 fc14 	bl	80105e8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009dc0:	4b16      	ldr	r3, [pc, #88]	; (8009e1c <tcp_input_delayed_close+0x78>)
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	f003 0310 	and.w	r3, r3, #16
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d01c      	beq.n	8009e06 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	8b5b      	ldrh	r3, [r3, #26]
 8009dd0:	f003 0310 	and.w	r3, r3, #16
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10d      	bne.n	8009df4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d008      	beq.n	8009df4 <tcp_input_delayed_close+0x50>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	6912      	ldr	r2, [r2, #16]
 8009dec:	f06f 010e 	mvn.w	r1, #14
 8009df0:	4610      	mov	r0, r2
 8009df2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009df4:	6879      	ldr	r1, [r7, #4]
 8009df6:	480a      	ldr	r0, [pc, #40]	; (8009e20 <tcp_input_delayed_close+0x7c>)
 8009df8:	f7ff fa54 	bl	80092a4 <tcp_pcb_remove>
    tcp_free(pcb);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7fd fda7 	bl	8007950 <tcp_free>
    return 1;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e000      	b.n	8009e08 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	080128d4 	.word	0x080128d4
 8009e14:	08012aa4 	.word	0x08012aa4
 8009e18:	08012920 	.word	0x08012920
 8009e1c:	20000539 	.word	0x20000539
 8009e20:	20007150 	.word	0x20007150

08009e24 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009e24:	b590      	push	{r4, r7, lr}
 8009e26:	b08b      	sub	sp, #44	; 0x2c
 8009e28:	af04      	add	r7, sp, #16
 8009e2a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009e2c:	4b6f      	ldr	r3, [pc, #444]	; (8009fec <tcp_listen_input+0x1c8>)
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	f003 0304 	and.w	r3, r3, #4
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f040 80d3 	bne.w	8009fe0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d106      	bne.n	8009e4e <tcp_listen_input+0x2a>
 8009e40:	4b6b      	ldr	r3, [pc, #428]	; (8009ff0 <tcp_listen_input+0x1cc>)
 8009e42:	f240 2281 	movw	r2, #641	; 0x281
 8009e46:	496b      	ldr	r1, [pc, #428]	; (8009ff4 <tcp_listen_input+0x1d0>)
 8009e48:	486b      	ldr	r0, [pc, #428]	; (8009ff8 <tcp_listen_input+0x1d4>)
 8009e4a:	f006 fbcd 	bl	80105e8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009e4e:	4b67      	ldr	r3, [pc, #412]	; (8009fec <tcp_listen_input+0x1c8>)
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	f003 0310 	and.w	r3, r3, #16
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d019      	beq.n	8009e8e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e5a:	4b68      	ldr	r3, [pc, #416]	; (8009ffc <tcp_listen_input+0x1d8>)
 8009e5c:	6819      	ldr	r1, [r3, #0]
 8009e5e:	4b68      	ldr	r3, [pc, #416]	; (800a000 <tcp_listen_input+0x1dc>)
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	461a      	mov	r2, r3
 8009e64:	4b67      	ldr	r3, [pc, #412]	; (800a004 <tcp_listen_input+0x1e0>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e6a:	4b67      	ldr	r3, [pc, #412]	; (800a008 <tcp_listen_input+0x1e4>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e6e:	885b      	ldrh	r3, [r3, #2]
 8009e70:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e72:	4a65      	ldr	r2, [pc, #404]	; (800a008 <tcp_listen_input+0x1e4>)
 8009e74:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e76:	8812      	ldrh	r2, [r2, #0]
 8009e78:	b292      	uxth	r2, r2
 8009e7a:	9202      	str	r2, [sp, #8]
 8009e7c:	9301      	str	r3, [sp, #4]
 8009e7e:	4b63      	ldr	r3, [pc, #396]	; (800a00c <tcp_listen_input+0x1e8>)
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	4b63      	ldr	r3, [pc, #396]	; (800a010 <tcp_listen_input+0x1ec>)
 8009e84:	4602      	mov	r2, r0
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f003 fbea 	bl	800d660 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009e8c:	e0aa      	b.n	8009fe4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8009e8e:	4b57      	ldr	r3, [pc, #348]	; (8009fec <tcp_listen_input+0x1c8>)
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	f003 0302 	and.w	r3, r3, #2
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f000 80a4 	beq.w	8009fe4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	7d5b      	ldrb	r3, [r3, #21]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff f85d 	bl	8008f60 <tcp_alloc>
 8009ea6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d111      	bne.n	8009ed2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00a      	beq.n	8009ecc <tcp_listen_input+0xa8>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	6910      	ldr	r0, [r2, #16]
 8009ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	4798      	blx	r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73bb      	strb	r3, [r7, #14]
      return;
 8009eca:	e08c      	b.n	8009fe6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009ecc:	23f0      	movs	r3, #240	; 0xf0
 8009ece:	73bb      	strb	r3, [r7, #14]
      return;
 8009ed0:	e089      	b.n	8009fe6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009ed2:	4b50      	ldr	r3, [pc, #320]	; (800a014 <tcp_listen_input+0x1f0>)
 8009ed4:	695a      	ldr	r2, [r3, #20]
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009eda:	4b4e      	ldr	r3, [pc, #312]	; (800a014 <tcp_listen_input+0x1f0>)
 8009edc:	691a      	ldr	r2, [r3, #16]
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	8ada      	ldrh	r2, [r3, #22]
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009eea:	4b47      	ldr	r3, [pc, #284]	; (800a008 <tcp_listen_input+0x1e4>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	2203      	movs	r2, #3
 8009efa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009efc:	4b41      	ldr	r3, [pc, #260]	; (800a004 <tcp_listen_input+0x1e0>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009f0e:	6978      	ldr	r0, [r7, #20]
 8009f10:	f7ff fa5c 	bl	80093cc <tcp_next_iss>
 8009f14:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009f2e:	4b35      	ldr	r3, [pc, #212]	; (800a004 <tcp_listen_input+0x1e0>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	1e5a      	subs	r2, r3, #1
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	691a      	ldr	r2, [r3, #16]
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	7a5b      	ldrb	r3, [r3, #9]
 8009f4a:	f003 030c 	and.w	r3, r3, #12
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	7a1a      	ldrb	r2, [r3, #8]
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009f5c:	4b2e      	ldr	r3, [pc, #184]	; (800a018 <tcp_listen_input+0x1f4>)
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	60da      	str	r2, [r3, #12]
 8009f64:	4a2c      	ldr	r2, [pc, #176]	; (800a018 <tcp_listen_input+0x1f4>)
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	f003 fd3b 	bl	800d9e4 <tcp_timer_needed>
 8009f6e:	4b2b      	ldr	r3, [pc, #172]	; (800a01c <tcp_listen_input+0x1f8>)
 8009f70:	2201      	movs	r2, #1
 8009f72:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009f74:	6978      	ldr	r0, [r7, #20]
 8009f76:	f001 fd8f 	bl	800ba98 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009f7a:	4b23      	ldr	r3, [pc, #140]	; (800a008 <tcp_listen_input+0x1e4>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	89db      	ldrh	r3, [r3, #14]
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	3304      	adds	r3, #4
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f005 f8fd 	bl	800f19c <ip4_route>
 8009fa2:	4601      	mov	r1, r0
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	461a      	mov	r2, r3
 8009faa:	4620      	mov	r0, r4
 8009fac:	f7ff fa34 	bl	8009418 <tcp_eff_send_mss_netif>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009fb8:	2112      	movs	r1, #18
 8009fba:	6978      	ldr	r0, [r7, #20]
 8009fbc:	f002 fc9c 	bl	800c8f8 <tcp_enqueue_flags>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d004      	beq.n	8009fd6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009fcc:	2100      	movs	r1, #0
 8009fce:	6978      	ldr	r0, [r7, #20]
 8009fd0:	f7fd fee0 	bl	8007d94 <tcp_abandon>
      return;
 8009fd4:	e007      	b.n	8009fe6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8009fd6:	6978      	ldr	r0, [r7, #20]
 8009fd8:	f002 fd7c 	bl	800cad4 <tcp_output>
  return;
 8009fdc:	bf00      	nop
 8009fde:	e001      	b.n	8009fe4 <tcp_listen_input+0x1c0>
    return;
 8009fe0:	bf00      	nop
 8009fe2:	e000      	b.n	8009fe6 <tcp_listen_input+0x1c2>
  return;
 8009fe4:	bf00      	nop
}
 8009fe6:	371c      	adds	r7, #28
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd90      	pop	{r4, r7, pc}
 8009fec:	20000538 	.word	0x20000538
 8009ff0:	080128d4 	.word	0x080128d4
 8009ff4:	08012acc 	.word	0x08012acc
 8009ff8:	08012920 	.word	0x08012920
 8009ffc:	20000530 	.word	0x20000530
 800a000:	20000536 	.word	0x20000536
 800a004:	2000052c 	.word	0x2000052c
 800a008:	2000051c 	.word	0x2000051c
 800a00c:	20003c1c 	.word	0x20003c1c
 800a010:	20003c20 	.word	0x20003c20
 800a014:	20003c0c 	.word	0x20003c0c
 800a018:	20007150 	.word	0x20007150
 800a01c:	2000714c 	.word	0x2000714c

0800a020 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af04      	add	r7, sp, #16
 800a026:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a028:	4b30      	ldr	r3, [pc, #192]	; (800a0ec <tcp_timewait_input+0xcc>)
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	f003 0304 	and.w	r3, r3, #4
 800a030:	2b00      	cmp	r3, #0
 800a032:	d154      	bne.n	800a0de <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d106      	bne.n	800a048 <tcp_timewait_input+0x28>
 800a03a:	4b2d      	ldr	r3, [pc, #180]	; (800a0f0 <tcp_timewait_input+0xd0>)
 800a03c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a040:	492c      	ldr	r1, [pc, #176]	; (800a0f4 <tcp_timewait_input+0xd4>)
 800a042:	482d      	ldr	r0, [pc, #180]	; (800a0f8 <tcp_timewait_input+0xd8>)
 800a044:	f006 fad0 	bl	80105e8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a048:	4b28      	ldr	r3, [pc, #160]	; (800a0ec <tcp_timewait_input+0xcc>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	f003 0302 	and.w	r3, r3, #2
 800a050:	2b00      	cmp	r3, #0
 800a052:	d02a      	beq.n	800a0aa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a054:	4b29      	ldr	r3, [pc, #164]	; (800a0fc <tcp_timewait_input+0xdc>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	db2d      	blt.n	800a0be <tcp_timewait_input+0x9e>
 800a062:	4b26      	ldr	r3, [pc, #152]	; (800a0fc <tcp_timewait_input+0xdc>)
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06a:	6879      	ldr	r1, [r7, #4]
 800a06c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a06e:	440b      	add	r3, r1
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	dc23      	bgt.n	800a0be <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a076:	4b22      	ldr	r3, [pc, #136]	; (800a100 <tcp_timewait_input+0xe0>)
 800a078:	6819      	ldr	r1, [r3, #0]
 800a07a:	4b22      	ldr	r3, [pc, #136]	; (800a104 <tcp_timewait_input+0xe4>)
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	4b1e      	ldr	r3, [pc, #120]	; (800a0fc <tcp_timewait_input+0xdc>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a086:	4b20      	ldr	r3, [pc, #128]	; (800a108 <tcp_timewait_input+0xe8>)
 800a088:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a08a:	885b      	ldrh	r3, [r3, #2]
 800a08c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a08e:	4a1e      	ldr	r2, [pc, #120]	; (800a108 <tcp_timewait_input+0xe8>)
 800a090:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a092:	8812      	ldrh	r2, [r2, #0]
 800a094:	b292      	uxth	r2, r2
 800a096:	9202      	str	r2, [sp, #8]
 800a098:	9301      	str	r3, [sp, #4]
 800a09a:	4b1c      	ldr	r3, [pc, #112]	; (800a10c <tcp_timewait_input+0xec>)
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	4b1c      	ldr	r3, [pc, #112]	; (800a110 <tcp_timewait_input+0xf0>)
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f003 fadc 	bl	800d660 <tcp_rst>
      return;
 800a0a8:	e01c      	b.n	800a0e4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800a0aa:	4b10      	ldr	r3, [pc, #64]	; (800a0ec <tcp_timewait_input+0xcc>)
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a0b6:	4b17      	ldr	r3, [pc, #92]	; (800a114 <tcp_timewait_input+0xf4>)
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a0be:	4b11      	ldr	r3, [pc, #68]	; (800a104 <tcp_timewait_input+0xe4>)
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00d      	beq.n	800a0e2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	8b5b      	ldrh	r3, [r3, #26]
 800a0ca:	f043 0302 	orr.w	r3, r3, #2
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f002 fcfd 	bl	800cad4 <tcp_output>
  }
  return;
 800a0da:	bf00      	nop
 800a0dc:	e001      	b.n	800a0e2 <tcp_timewait_input+0xc2>
    return;
 800a0de:	bf00      	nop
 800a0e0:	e000      	b.n	800a0e4 <tcp_timewait_input+0xc4>
  return;
 800a0e2:	bf00      	nop
}
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20000538 	.word	0x20000538
 800a0f0:	080128d4 	.word	0x080128d4
 800a0f4:	08012aec 	.word	0x08012aec
 800a0f8:	08012920 	.word	0x08012920
 800a0fc:	2000052c 	.word	0x2000052c
 800a100:	20000530 	.word	0x20000530
 800a104:	20000536 	.word	0x20000536
 800a108:	2000051c 	.word	0x2000051c
 800a10c:	20003c1c 	.word	0x20003c1c
 800a110:	20003c20 	.word	0x20003c20
 800a114:	20007154 	.word	0x20007154

0800a118 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a118:	b590      	push	{r4, r7, lr}
 800a11a:	b08d      	sub	sp, #52	; 0x34
 800a11c:	af04      	add	r7, sp, #16
 800a11e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a120:	2300      	movs	r3, #0
 800a122:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d106      	bne.n	800a13c <tcp_process+0x24>
 800a12e:	4ba5      	ldr	r3, [pc, #660]	; (800a3c4 <tcp_process+0x2ac>)
 800a130:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a134:	49a4      	ldr	r1, [pc, #656]	; (800a3c8 <tcp_process+0x2b0>)
 800a136:	48a5      	ldr	r0, [pc, #660]	; (800a3cc <tcp_process+0x2b4>)
 800a138:	f006 fa56 	bl	80105e8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a13c:	4ba4      	ldr	r3, [pc, #656]	; (800a3d0 <tcp_process+0x2b8>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	f003 0304 	and.w	r3, r3, #4
 800a144:	2b00      	cmp	r3, #0
 800a146:	d04e      	beq.n	800a1e6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	7d1b      	ldrb	r3, [r3, #20]
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d108      	bne.n	800a162 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a154:	4b9f      	ldr	r3, [pc, #636]	; (800a3d4 <tcp_process+0x2bc>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d123      	bne.n	800a1a4 <tcp_process+0x8c>
        acceptable = 1;
 800a15c:	2301      	movs	r3, #1
 800a15e:	76fb      	strb	r3, [r7, #27]
 800a160:	e020      	b.n	800a1a4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a166:	4b9c      	ldr	r3, [pc, #624]	; (800a3d8 <tcp_process+0x2c0>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d102      	bne.n	800a174 <tcp_process+0x5c>
        acceptable = 1;
 800a16e:	2301      	movs	r3, #1
 800a170:	76fb      	strb	r3, [r7, #27]
 800a172:	e017      	b.n	800a1a4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a174:	4b98      	ldr	r3, [pc, #608]	; (800a3d8 <tcp_process+0x2c0>)
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	db10      	blt.n	800a1a4 <tcp_process+0x8c>
 800a182:	4b95      	ldr	r3, [pc, #596]	; (800a3d8 <tcp_process+0x2c0>)
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a18e:	440b      	add	r3, r1
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	dc06      	bgt.n	800a1a4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	8b5b      	ldrh	r3, [r3, #26]
 800a19a:	f043 0302 	orr.w	r3, r3, #2
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a1a4:	7efb      	ldrb	r3, [r7, #27]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d01b      	beq.n	800a1e2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	7d1b      	ldrb	r3, [r3, #20]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d106      	bne.n	800a1c0 <tcp_process+0xa8>
 800a1b2:	4b84      	ldr	r3, [pc, #528]	; (800a3c4 <tcp_process+0x2ac>)
 800a1b4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a1b8:	4988      	ldr	r1, [pc, #544]	; (800a3dc <tcp_process+0x2c4>)
 800a1ba:	4884      	ldr	r0, [pc, #528]	; (800a3cc <tcp_process+0x2b4>)
 800a1bc:	f006 fa14 	bl	80105e8 <iprintf>
      recv_flags |= TF_RESET;
 800a1c0:	4b87      	ldr	r3, [pc, #540]	; (800a3e0 <tcp_process+0x2c8>)
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	f043 0308 	orr.w	r3, r3, #8
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	4b85      	ldr	r3, [pc, #532]	; (800a3e0 <tcp_process+0x2c8>)
 800a1cc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	8b5b      	ldrh	r3, [r3, #26]
 800a1d2:	f023 0301 	bic.w	r3, r3, #1
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a1dc:	f06f 030d 	mvn.w	r3, #13
 800a1e0:	e37a      	b.n	800a8d8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	e378      	b.n	800a8d8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a1e6:	4b7a      	ldr	r3, [pc, #488]	; (800a3d0 <tcp_process+0x2b8>)
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	f003 0302 	and.w	r3, r3, #2
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d010      	beq.n	800a214 <tcp_process+0xfc>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	7d1b      	ldrb	r3, [r3, #20]
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d00c      	beq.n	800a214 <tcp_process+0xfc>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	7d1b      	ldrb	r3, [r3, #20]
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d008      	beq.n	800a214 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	8b5b      	ldrh	r3, [r3, #26]
 800a206:	f043 0302 	orr.w	r3, r3, #2
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	e361      	b.n	800a8d8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	8b5b      	ldrh	r3, [r3, #26]
 800a218:	f003 0310 	and.w	r3, r3, #16
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d103      	bne.n	800a228 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a220:	4b70      	ldr	r3, [pc, #448]	; (800a3e4 <tcp_process+0x2cc>)
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f001 fc2d 	bl	800ba98 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	7d1b      	ldrb	r3, [r3, #20]
 800a242:	3b02      	subs	r3, #2
 800a244:	2b07      	cmp	r3, #7
 800a246:	f200 8337 	bhi.w	800a8b8 <tcp_process+0x7a0>
 800a24a:	a201      	add	r2, pc, #4	; (adr r2, 800a250 <tcp_process+0x138>)
 800a24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a250:	0800a271 	.word	0x0800a271
 800a254:	0800a4a1 	.word	0x0800a4a1
 800a258:	0800a619 	.word	0x0800a619
 800a25c:	0800a643 	.word	0x0800a643
 800a260:	0800a767 	.word	0x0800a767
 800a264:	0800a619 	.word	0x0800a619
 800a268:	0800a7f3 	.word	0x0800a7f3
 800a26c:	0800a883 	.word	0x0800a883
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a270:	4b57      	ldr	r3, [pc, #348]	; (800a3d0 <tcp_process+0x2b8>)
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	f003 0310 	and.w	r3, r3, #16
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 80e4 	beq.w	800a446 <tcp_process+0x32e>
 800a27e:	4b54      	ldr	r3, [pc, #336]	; (800a3d0 <tcp_process+0x2b8>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	f003 0302 	and.w	r3, r3, #2
 800a286:	2b00      	cmp	r3, #0
 800a288:	f000 80dd 	beq.w	800a446 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a290:	1c5a      	adds	r2, r3, #1
 800a292:	4b50      	ldr	r3, [pc, #320]	; (800a3d4 <tcp_process+0x2bc>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	429a      	cmp	r2, r3
 800a298:	f040 80d5 	bne.w	800a446 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a29c:	4b4e      	ldr	r3, [pc, #312]	; (800a3d8 <tcp_process+0x2c0>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	1c5a      	adds	r2, r3, #1
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a2ae:	4b49      	ldr	r3, [pc, #292]	; (800a3d4 <tcp_process+0x2bc>)
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a2b6:	4b4c      	ldr	r3, [pc, #304]	; (800a3e8 <tcp_process+0x2d0>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	89db      	ldrh	r3, [r3, #14]
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a2d0:	4b41      	ldr	r3, [pc, #260]	; (800a3d8 <tcp_process+0x2c0>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	1e5a      	subs	r2, r3, #1
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2204      	movs	r2, #4
 800a2de:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f004 ff57 	bl	800f19c <ip4_route>
 800a2ee:	4601      	mov	r1, r0
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f7ff f88e 	bl	8009418 <tcp_eff_send_mss_netif>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	461a      	mov	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a308:	009a      	lsls	r2, r3, #2
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	f241 111c 	movw	r1, #4380	; 0x111c
 800a314:	428b      	cmp	r3, r1
 800a316:	bf38      	it	cc
 800a318:	460b      	movcc	r3, r1
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d204      	bcs.n	800a328 <tcp_process+0x210>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	b29b      	uxth	r3, r3
 800a326:	e00d      	b.n	800a344 <tcp_process+0x22c>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a32c:	005b      	lsls	r3, r3, #1
 800a32e:	f241 121c 	movw	r2, #4380	; 0x111c
 800a332:	4293      	cmp	r3, r2
 800a334:	d904      	bls.n	800a340 <tcp_process+0x228>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a33a:	005b      	lsls	r3, r3, #1
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	e001      	b.n	800a344 <tcp_process+0x22c>
 800a340:	f241 131c 	movw	r3, #4380	; 0x111c
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a350:	2b00      	cmp	r3, #0
 800a352:	d106      	bne.n	800a362 <tcp_process+0x24a>
 800a354:	4b1b      	ldr	r3, [pc, #108]	; (800a3c4 <tcp_process+0x2ac>)
 800a356:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a35a:	4924      	ldr	r1, [pc, #144]	; (800a3ec <tcp_process+0x2d4>)
 800a35c:	481b      	ldr	r0, [pc, #108]	; (800a3cc <tcp_process+0x2b4>)
 800a35e:	f006 f943 	bl	80105e8 <iprintf>
        --pcb->snd_queuelen;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a368:	3b01      	subs	r3, #1
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a376:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d111      	bne.n	800a3a2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a382:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d106      	bne.n	800a398 <tcp_process+0x280>
 800a38a:	4b0e      	ldr	r3, [pc, #56]	; (800a3c4 <tcp_process+0x2ac>)
 800a38c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a390:	4917      	ldr	r1, [pc, #92]	; (800a3f0 <tcp_process+0x2d8>)
 800a392:	480e      	ldr	r0, [pc, #56]	; (800a3cc <tcp_process+0x2b4>)
 800a394:	f006 f928 	bl	80105e8 <iprintf>
          pcb->unsent = rseg->next;
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	66da      	str	r2, [r3, #108]	; 0x6c
 800a3a0:	e003      	b.n	800a3aa <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a3aa:	69f8      	ldr	r0, [r7, #28]
 800a3ac:	f7fe fc52 	bl	8008c54 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d11d      	bne.n	800a3f4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3be:	861a      	strh	r2, [r3, #48]	; 0x30
 800a3c0:	e01f      	b.n	800a402 <tcp_process+0x2ea>
 800a3c2:	bf00      	nop
 800a3c4:	080128d4 	.word	0x080128d4
 800a3c8:	08012b0c 	.word	0x08012b0c
 800a3cc:	08012920 	.word	0x08012920
 800a3d0:	20000538 	.word	0x20000538
 800a3d4:	20000530 	.word	0x20000530
 800a3d8:	2000052c 	.word	0x2000052c
 800a3dc:	08012b28 	.word	0x08012b28
 800a3e0:	20000539 	.word	0x20000539
 800a3e4:	20007154 	.word	0x20007154
 800a3e8:	2000051c 	.word	0x2000051c
 800a3ec:	08012b48 	.word	0x08012b48
 800a3f0:	08012b60 	.word	0x08012b60
        } else {
          pcb->rtime = 0;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00a      	beq.n	800a422 <tcp_process+0x30a>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	6910      	ldr	r0, [r2, #16]
 800a416:	2200      	movs	r2, #0
 800a418:	6879      	ldr	r1, [r7, #4]
 800a41a:	4798      	blx	r3
 800a41c:	4603      	mov	r3, r0
 800a41e:	76bb      	strb	r3, [r7, #26]
 800a420:	e001      	b.n	800a426 <tcp_process+0x30e>
 800a422:	2300      	movs	r3, #0
 800a424:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a426:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a42a:	f113 0f0d 	cmn.w	r3, #13
 800a42e:	d102      	bne.n	800a436 <tcp_process+0x31e>
          return ERR_ABRT;
 800a430:	f06f 030c 	mvn.w	r3, #12
 800a434:	e250      	b.n	800a8d8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	8b5b      	ldrh	r3, [r3, #26]
 800a43a:	f043 0302 	orr.w	r3, r3, #2
 800a43e:	b29a      	uxth	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a444:	e23a      	b.n	800a8bc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a446:	4b9d      	ldr	r3, [pc, #628]	; (800a6bc <tcp_process+0x5a4>)
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	f003 0310 	and.w	r3, r3, #16
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 8234 	beq.w	800a8bc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a454:	4b9a      	ldr	r3, [pc, #616]	; (800a6c0 <tcp_process+0x5a8>)
 800a456:	6819      	ldr	r1, [r3, #0]
 800a458:	4b9a      	ldr	r3, [pc, #616]	; (800a6c4 <tcp_process+0x5ac>)
 800a45a:	881b      	ldrh	r3, [r3, #0]
 800a45c:	461a      	mov	r2, r3
 800a45e:	4b9a      	ldr	r3, [pc, #616]	; (800a6c8 <tcp_process+0x5b0>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a464:	4b99      	ldr	r3, [pc, #612]	; (800a6cc <tcp_process+0x5b4>)
 800a466:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a468:	885b      	ldrh	r3, [r3, #2]
 800a46a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a46c:	4a97      	ldr	r2, [pc, #604]	; (800a6cc <tcp_process+0x5b4>)
 800a46e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a470:	8812      	ldrh	r2, [r2, #0]
 800a472:	b292      	uxth	r2, r2
 800a474:	9202      	str	r2, [sp, #8]
 800a476:	9301      	str	r3, [sp, #4]
 800a478:	4b95      	ldr	r3, [pc, #596]	; (800a6d0 <tcp_process+0x5b8>)
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	4b95      	ldr	r3, [pc, #596]	; (800a6d4 <tcp_process+0x5bc>)
 800a47e:	4602      	mov	r2, r0
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f003 f8ed 	bl	800d660 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a48c:	2b05      	cmp	r3, #5
 800a48e:	f200 8215 	bhi.w	800a8bc <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f002 feab 	bl	800d1f4 <tcp_rexmit_rto>
      break;
 800a49e:	e20d      	b.n	800a8bc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a4a0:	4b86      	ldr	r3, [pc, #536]	; (800a6bc <tcp_process+0x5a4>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	f003 0310 	and.w	r3, r3, #16
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 80a1 	beq.w	800a5f0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a4ae:	4b84      	ldr	r3, [pc, #528]	; (800a6c0 <tcp_process+0x5a8>)
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	db7e      	blt.n	800a5bc <tcp_process+0x4a4>
 800a4be:	4b80      	ldr	r3, [pc, #512]	; (800a6c0 <tcp_process+0x5a8>)
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dc77      	bgt.n	800a5bc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2204      	movs	r2, #4
 800a4d0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d102      	bne.n	800a4e0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a4da:	23fa      	movs	r3, #250	; 0xfa
 800a4dc:	76bb      	strb	r3, [r7, #26]
 800a4de:	e01d      	b.n	800a51c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d106      	bne.n	800a4f8 <tcp_process+0x3e0>
 800a4ea:	4b7b      	ldr	r3, [pc, #492]	; (800a6d8 <tcp_process+0x5c0>)
 800a4ec:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a4f0:	497a      	ldr	r1, [pc, #488]	; (800a6dc <tcp_process+0x5c4>)
 800a4f2:	487b      	ldr	r0, [pc, #492]	; (800a6e0 <tcp_process+0x5c8>)
 800a4f4:	f006 f878 	bl	80105e8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00a      	beq.n	800a518 <tcp_process+0x400>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	6910      	ldr	r0, [r2, #16]
 800a50c:	2200      	movs	r2, #0
 800a50e:	6879      	ldr	r1, [r7, #4]
 800a510:	4798      	blx	r3
 800a512:	4603      	mov	r3, r0
 800a514:	76bb      	strb	r3, [r7, #26]
 800a516:	e001      	b.n	800a51c <tcp_process+0x404>
 800a518:	23f0      	movs	r3, #240	; 0xf0
 800a51a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a51c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00a      	beq.n	800a53a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a524:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a528:	f113 0f0d 	cmn.w	r3, #13
 800a52c:	d002      	beq.n	800a534 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7fd fcee 	bl	8007f10 <tcp_abort>
            }
            return ERR_ABRT;
 800a534:	f06f 030c 	mvn.w	r3, #12
 800a538:	e1ce      	b.n	800a8d8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fae0 	bl	800ab00 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a540:	4b68      	ldr	r3, [pc, #416]	; (800a6e4 <tcp_process+0x5cc>)
 800a542:	881b      	ldrh	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d005      	beq.n	800a554 <tcp_process+0x43c>
            recv_acked--;
 800a548:	4b66      	ldr	r3, [pc, #408]	; (800a6e4 <tcp_process+0x5cc>)
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	b29a      	uxth	r2, r3
 800a550:	4b64      	ldr	r3, [pc, #400]	; (800a6e4 <tcp_process+0x5cc>)
 800a552:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a558:	009a      	lsls	r2, r3, #2
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a55e:	005b      	lsls	r3, r3, #1
 800a560:	f241 111c 	movw	r1, #4380	; 0x111c
 800a564:	428b      	cmp	r3, r1
 800a566:	bf38      	it	cc
 800a568:	460b      	movcc	r3, r1
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d204      	bcs.n	800a578 <tcp_process+0x460>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	b29b      	uxth	r3, r3
 800a576:	e00d      	b.n	800a594 <tcp_process+0x47c>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	f241 121c 	movw	r2, #4380	; 0x111c
 800a582:	4293      	cmp	r3, r2
 800a584:	d904      	bls.n	800a590 <tcp_process+0x478>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a58a:	005b      	lsls	r3, r3, #1
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	e001      	b.n	800a594 <tcp_process+0x47c>
 800a590:	f241 131c 	movw	r3, #4380	; 0x111c
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a59a:	4b53      	ldr	r3, [pc, #332]	; (800a6e8 <tcp_process+0x5d0>)
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	f003 0320 	and.w	r3, r3, #32
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d037      	beq.n	800a616 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	8b5b      	ldrh	r3, [r3, #26]
 800a5aa:	f043 0302 	orr.w	r3, r3, #2
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2207      	movs	r2, #7
 800a5b8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a5ba:	e02c      	b.n	800a616 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a5bc:	4b40      	ldr	r3, [pc, #256]	; (800a6c0 <tcp_process+0x5a8>)
 800a5be:	6819      	ldr	r1, [r3, #0]
 800a5c0:	4b40      	ldr	r3, [pc, #256]	; (800a6c4 <tcp_process+0x5ac>)
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	4b40      	ldr	r3, [pc, #256]	; (800a6c8 <tcp_process+0x5b0>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a5cc:	4b3f      	ldr	r3, [pc, #252]	; (800a6cc <tcp_process+0x5b4>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a5d0:	885b      	ldrh	r3, [r3, #2]
 800a5d2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a5d4:	4a3d      	ldr	r2, [pc, #244]	; (800a6cc <tcp_process+0x5b4>)
 800a5d6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a5d8:	8812      	ldrh	r2, [r2, #0]
 800a5da:	b292      	uxth	r2, r2
 800a5dc:	9202      	str	r2, [sp, #8]
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	4b3b      	ldr	r3, [pc, #236]	; (800a6d0 <tcp_process+0x5b8>)
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	4b3b      	ldr	r3, [pc, #236]	; (800a6d4 <tcp_process+0x5bc>)
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f003 f839 	bl	800d660 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a5ee:	e167      	b.n	800a8c0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a5f0:	4b32      	ldr	r3, [pc, #200]	; (800a6bc <tcp_process+0x5a4>)
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	f003 0302 	and.w	r3, r3, #2
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f000 8161 	beq.w	800a8c0 <tcp_process+0x7a8>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a602:	1e5a      	subs	r2, r3, #1
 800a604:	4b30      	ldr	r3, [pc, #192]	; (800a6c8 <tcp_process+0x5b0>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	429a      	cmp	r2, r3
 800a60a:	f040 8159 	bne.w	800a8c0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f002 fe12 	bl	800d238 <tcp_rexmit>
      break;
 800a614:	e154      	b.n	800a8c0 <tcp_process+0x7a8>
 800a616:	e153      	b.n	800a8c0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fa71 	bl	800ab00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a61e:	4b32      	ldr	r3, [pc, #200]	; (800a6e8 <tcp_process+0x5d0>)
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	f003 0320 	and.w	r3, r3, #32
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 814c 	beq.w	800a8c4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	8b5b      	ldrh	r3, [r3, #26]
 800a630:	f043 0302 	orr.w	r3, r3, #2
 800a634:	b29a      	uxth	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2207      	movs	r2, #7
 800a63e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a640:	e140      	b.n	800a8c4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fa5c 	bl	800ab00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a648:	4b27      	ldr	r3, [pc, #156]	; (800a6e8 <tcp_process+0x5d0>)
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	f003 0320 	and.w	r3, r3, #32
 800a650:	2b00      	cmp	r3, #0
 800a652:	d071      	beq.n	800a738 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a654:	4b19      	ldr	r3, [pc, #100]	; (800a6bc <tcp_process+0x5a4>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	f003 0310 	and.w	r3, r3, #16
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d060      	beq.n	800a722 <tcp_process+0x60a>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a664:	4b16      	ldr	r3, [pc, #88]	; (800a6c0 <tcp_process+0x5a8>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d15a      	bne.n	800a722 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a670:	2b00      	cmp	r3, #0
 800a672:	d156      	bne.n	800a722 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	8b5b      	ldrh	r3, [r3, #26]
 800a678:	f043 0302 	orr.w	r3, r3, #2
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7fe fdbe 	bl	8009204 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a688:	4b18      	ldr	r3, [pc, #96]	; (800a6ec <tcp_process+0x5d4>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d105      	bne.n	800a69e <tcp_process+0x586>
 800a692:	4b16      	ldr	r3, [pc, #88]	; (800a6ec <tcp_process+0x5d4>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	4a14      	ldr	r2, [pc, #80]	; (800a6ec <tcp_process+0x5d4>)
 800a69a:	6013      	str	r3, [r2, #0]
 800a69c:	e02e      	b.n	800a6fc <tcp_process+0x5e4>
 800a69e:	4b13      	ldr	r3, [pc, #76]	; (800a6ec <tcp_process+0x5d4>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	617b      	str	r3, [r7, #20]
 800a6a4:	e027      	b.n	800a6f6 <tcp_process+0x5de>
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d11f      	bne.n	800a6f0 <tcp_process+0x5d8>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68da      	ldr	r2, [r3, #12]
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	60da      	str	r2, [r3, #12]
 800a6b8:	e020      	b.n	800a6fc <tcp_process+0x5e4>
 800a6ba:	bf00      	nop
 800a6bc:	20000538 	.word	0x20000538
 800a6c0:	20000530 	.word	0x20000530
 800a6c4:	20000536 	.word	0x20000536
 800a6c8:	2000052c 	.word	0x2000052c
 800a6cc:	2000051c 	.word	0x2000051c
 800a6d0:	20003c1c 	.word	0x20003c1c
 800a6d4:	20003c20 	.word	0x20003c20
 800a6d8:	080128d4 	.word	0x080128d4
 800a6dc:	08012b74 	.word	0x08012b74
 800a6e0:	08012920 	.word	0x08012920
 800a6e4:	20000534 	.word	0x20000534
 800a6e8:	20000539 	.word	0x20000539
 800a6ec:	20007150 	.word	0x20007150
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	617b      	str	r3, [r7, #20]
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1d4      	bne.n	800a6a6 <tcp_process+0x58e>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	60da      	str	r2, [r3, #12]
 800a702:	4b77      	ldr	r3, [pc, #476]	; (800a8e0 <tcp_process+0x7c8>)
 800a704:	2201      	movs	r2, #1
 800a706:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	220a      	movs	r2, #10
 800a70c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a70e:	4b75      	ldr	r3, [pc, #468]	; (800a8e4 <tcp_process+0x7cc>)
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	60da      	str	r2, [r3, #12]
 800a716:	4a73      	ldr	r2, [pc, #460]	; (800a8e4 <tcp_process+0x7cc>)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	f003 f962 	bl	800d9e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a720:	e0d2      	b.n	800a8c8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	8b5b      	ldrh	r3, [r3, #26]
 800a726:	f043 0302 	orr.w	r3, r3, #2
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2208      	movs	r2, #8
 800a734:	751a      	strb	r2, [r3, #20]
      break;
 800a736:	e0c7      	b.n	800a8c8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a738:	4b6b      	ldr	r3, [pc, #428]	; (800a8e8 <tcp_process+0x7d0>)
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	f003 0310 	and.w	r3, r3, #16
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 80c1 	beq.w	800a8c8 <tcp_process+0x7b0>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a74a:	4b68      	ldr	r3, [pc, #416]	; (800a8ec <tcp_process+0x7d4>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	429a      	cmp	r2, r3
 800a750:	f040 80ba 	bne.w	800a8c8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f040 80b5 	bne.w	800a8c8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2206      	movs	r2, #6
 800a762:	751a      	strb	r2, [r3, #20]
      break;
 800a764:	e0b0      	b.n	800a8c8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f9ca 	bl	800ab00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a76c:	4b60      	ldr	r3, [pc, #384]	; (800a8f0 <tcp_process+0x7d8>)
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	f003 0320 	and.w	r3, r3, #32
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 80a9 	beq.w	800a8cc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	8b5b      	ldrh	r3, [r3, #26]
 800a77e:	f043 0302 	orr.w	r3, r3, #2
 800a782:	b29a      	uxth	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7fe fd3b 	bl	8009204 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a78e:	4b59      	ldr	r3, [pc, #356]	; (800a8f4 <tcp_process+0x7dc>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	429a      	cmp	r2, r3
 800a796:	d105      	bne.n	800a7a4 <tcp_process+0x68c>
 800a798:	4b56      	ldr	r3, [pc, #344]	; (800a8f4 <tcp_process+0x7dc>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	4a55      	ldr	r2, [pc, #340]	; (800a8f4 <tcp_process+0x7dc>)
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	e013      	b.n	800a7cc <tcp_process+0x6b4>
 800a7a4:	4b53      	ldr	r3, [pc, #332]	; (800a8f4 <tcp_process+0x7dc>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	613b      	str	r3, [r7, #16]
 800a7aa:	e00c      	b.n	800a7c6 <tcp_process+0x6ae>
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d104      	bne.n	800a7c0 <tcp_process+0x6a8>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	68da      	ldr	r2, [r3, #12]
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	60da      	str	r2, [r3, #12]
 800a7be:	e005      	b.n	800a7cc <tcp_process+0x6b4>
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	613b      	str	r3, [r7, #16]
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1ef      	bne.n	800a7ac <tcp_process+0x694>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	60da      	str	r2, [r3, #12]
 800a7d2:	4b43      	ldr	r3, [pc, #268]	; (800a8e0 <tcp_process+0x7c8>)
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	220a      	movs	r2, #10
 800a7dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a7de:	4b41      	ldr	r3, [pc, #260]	; (800a8e4 <tcp_process+0x7cc>)
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	60da      	str	r2, [r3, #12]
 800a7e6:	4a3f      	ldr	r2, [pc, #252]	; (800a8e4 <tcp_process+0x7cc>)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6013      	str	r3, [r2, #0]
 800a7ec:	f003 f8fa 	bl	800d9e4 <tcp_timer_needed>
      }
      break;
 800a7f0:	e06c      	b.n	800a8cc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f984 	bl	800ab00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a7f8:	4b3b      	ldr	r3, [pc, #236]	; (800a8e8 <tcp_process+0x7d0>)
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	f003 0310 	and.w	r3, r3, #16
 800a800:	2b00      	cmp	r3, #0
 800a802:	d065      	beq.n	800a8d0 <tcp_process+0x7b8>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a808:	4b38      	ldr	r3, [pc, #224]	; (800a8ec <tcp_process+0x7d4>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d15f      	bne.n	800a8d0 <tcp_process+0x7b8>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a814:	2b00      	cmp	r3, #0
 800a816:	d15b      	bne.n	800a8d0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7fe fcf3 	bl	8009204 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a81e:	4b35      	ldr	r3, [pc, #212]	; (800a8f4 <tcp_process+0x7dc>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	429a      	cmp	r2, r3
 800a826:	d105      	bne.n	800a834 <tcp_process+0x71c>
 800a828:	4b32      	ldr	r3, [pc, #200]	; (800a8f4 <tcp_process+0x7dc>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	4a31      	ldr	r2, [pc, #196]	; (800a8f4 <tcp_process+0x7dc>)
 800a830:	6013      	str	r3, [r2, #0]
 800a832:	e013      	b.n	800a85c <tcp_process+0x744>
 800a834:	4b2f      	ldr	r3, [pc, #188]	; (800a8f4 <tcp_process+0x7dc>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	e00c      	b.n	800a856 <tcp_process+0x73e>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	429a      	cmp	r2, r3
 800a844:	d104      	bne.n	800a850 <tcp_process+0x738>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68da      	ldr	r2, [r3, #12]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	60da      	str	r2, [r3, #12]
 800a84e:	e005      	b.n	800a85c <tcp_process+0x744>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	60fb      	str	r3, [r7, #12]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1ef      	bne.n	800a83c <tcp_process+0x724>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	60da      	str	r2, [r3, #12]
 800a862:	4b1f      	ldr	r3, [pc, #124]	; (800a8e0 <tcp_process+0x7c8>)
 800a864:	2201      	movs	r2, #1
 800a866:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	220a      	movs	r2, #10
 800a86c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a86e:	4b1d      	ldr	r3, [pc, #116]	; (800a8e4 <tcp_process+0x7cc>)
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	60da      	str	r2, [r3, #12]
 800a876:	4a1b      	ldr	r2, [pc, #108]	; (800a8e4 <tcp_process+0x7cc>)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	f003 f8b2 	bl	800d9e4 <tcp_timer_needed>
      }
      break;
 800a880:	e026      	b.n	800a8d0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f93c 	bl	800ab00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a888:	4b17      	ldr	r3, [pc, #92]	; (800a8e8 <tcp_process+0x7d0>)
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	f003 0310 	and.w	r3, r3, #16
 800a890:	2b00      	cmp	r3, #0
 800a892:	d01f      	beq.n	800a8d4 <tcp_process+0x7bc>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a898:	4b14      	ldr	r3, [pc, #80]	; (800a8ec <tcp_process+0x7d4>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d119      	bne.n	800a8d4 <tcp_process+0x7bc>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d115      	bne.n	800a8d4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a8a8:	4b11      	ldr	r3, [pc, #68]	; (800a8f0 <tcp_process+0x7d8>)
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	f043 0310 	orr.w	r3, r3, #16
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <tcp_process+0x7d8>)
 800a8b4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a8b6:	e00d      	b.n	800a8d4 <tcp_process+0x7bc>
    default:
      break;
 800a8b8:	bf00      	nop
 800a8ba:	e00c      	b.n	800a8d6 <tcp_process+0x7be>
      break;
 800a8bc:	bf00      	nop
 800a8be:	e00a      	b.n	800a8d6 <tcp_process+0x7be>
      break;
 800a8c0:	bf00      	nop
 800a8c2:	e008      	b.n	800a8d6 <tcp_process+0x7be>
      break;
 800a8c4:	bf00      	nop
 800a8c6:	e006      	b.n	800a8d6 <tcp_process+0x7be>
      break;
 800a8c8:	bf00      	nop
 800a8ca:	e004      	b.n	800a8d6 <tcp_process+0x7be>
      break;
 800a8cc:	bf00      	nop
 800a8ce:	e002      	b.n	800a8d6 <tcp_process+0x7be>
      break;
 800a8d0:	bf00      	nop
 800a8d2:	e000      	b.n	800a8d6 <tcp_process+0x7be>
      break;
 800a8d4:	bf00      	nop
  }
  return ERR_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3724      	adds	r7, #36	; 0x24
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd90      	pop	{r4, r7, pc}
 800a8e0:	2000714c 	.word	0x2000714c
 800a8e4:	20007160 	.word	0x20007160
 800a8e8:	20000538 	.word	0x20000538
 800a8ec:	20000530 	.word	0x20000530
 800a8f0:	20000539 	.word	0x20000539
 800a8f4:	20007150 	.word	0x20007150

0800a8f8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a8f8:	b590      	push	{r4, r7, lr}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d106      	bne.n	800a916 <tcp_oos_insert_segment+0x1e>
 800a908:	4b3b      	ldr	r3, [pc, #236]	; (800a9f8 <tcp_oos_insert_segment+0x100>)
 800a90a:	f240 421f 	movw	r2, #1055	; 0x41f
 800a90e:	493b      	ldr	r1, [pc, #236]	; (800a9fc <tcp_oos_insert_segment+0x104>)
 800a910:	483b      	ldr	r0, [pc, #236]	; (800aa00 <tcp_oos_insert_segment+0x108>)
 800a912:	f005 fe69 	bl	80105e8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	899b      	ldrh	r3, [r3, #12]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fb fa90 	bl	8005e44 <lwip_htons>
 800a924:	4603      	mov	r3, r0
 800a926:	b2db      	uxtb	r3, r3
 800a928:	f003 0301 	and.w	r3, r3, #1
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d028      	beq.n	800a982 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a930:	6838      	ldr	r0, [r7, #0]
 800a932:	f7fe f97b 	bl	8008c2c <tcp_segs_free>
    next = NULL;
 800a936:	2300      	movs	r3, #0
 800a938:	603b      	str	r3, [r7, #0]
 800a93a:	e056      	b.n	800a9ea <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	899b      	ldrh	r3, [r3, #12]
 800a942:	b29b      	uxth	r3, r3
 800a944:	4618      	mov	r0, r3
 800a946:	f7fb fa7d 	bl	8005e44 <lwip_htons>
 800a94a:	4603      	mov	r3, r0
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00d      	beq.n	800a972 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	899b      	ldrh	r3, [r3, #12]
 800a95c:	b29c      	uxth	r4, r3
 800a95e:	2001      	movs	r0, #1
 800a960:	f7fb fa70 	bl	8005e44 <lwip_htons>
 800a964:	4603      	mov	r3, r0
 800a966:	461a      	mov	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	4322      	orrs	r2, r4
 800a96e:	b292      	uxth	r2, r2
 800a970:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7fe f969 	bl	8008c54 <tcp_seg_free>
    while (next &&
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00e      	beq.n	800a9a6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	891b      	ldrh	r3, [r3, #8]
 800a98c:	461a      	mov	r2, r3
 800a98e:	4b1d      	ldr	r3, [pc, #116]	; (800aa04 <tcp_oos_insert_segment+0x10c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	441a      	add	r2, r3
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	8909      	ldrh	r1, [r1, #8]
 800a99e:	440b      	add	r3, r1
 800a9a0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	daca      	bge.n	800a93c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d01e      	beq.n	800a9ea <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	891b      	ldrh	r3, [r3, #8]
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	4b14      	ldr	r3, [pc, #80]	; (800aa04 <tcp_oos_insert_segment+0x10c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	441a      	add	r2, r3
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dd12      	ble.n	800a9ea <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	4b0d      	ldr	r3, [pc, #52]	; (800aa04 <tcp_oos_insert_segment+0x10c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	891b      	ldrh	r3, [r3, #8]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	f7fc fb8d 	bl	8007104 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	601a      	str	r2, [r3, #0]
}
 800a9f0:	bf00      	nop
 800a9f2:	3714      	adds	r7, #20
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd90      	pop	{r4, r7, pc}
 800a9f8:	080128d4 	.word	0x080128d4
 800a9fc:	08012b94 	.word	0x08012b94
 800aa00:	08012920 	.word	0x08012920
 800aa04:	2000052c 	.word	0x2000052c

0800aa08 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800aa08:	b5b0      	push	{r4, r5, r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800aa16:	e03e      	b.n	800aa96 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fc fd7a 	bl	8007520 <pbuf_clen>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa36:	8a7a      	ldrh	r2, [r7, #18]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d906      	bls.n	800aa4a <tcp_free_acked_segments+0x42>
 800aa3c:	4b2a      	ldr	r3, [pc, #168]	; (800aae8 <tcp_free_acked_segments+0xe0>)
 800aa3e:	f240 4257 	movw	r2, #1111	; 0x457
 800aa42:	492a      	ldr	r1, [pc, #168]	; (800aaec <tcp_free_acked_segments+0xe4>)
 800aa44:	482a      	ldr	r0, [pc, #168]	; (800aaf0 <tcp_free_acked_segments+0xe8>)
 800aa46:	f005 fdcf 	bl	80105e8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800aa50:	8a7b      	ldrh	r3, [r7, #18]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	891a      	ldrh	r2, [r3, #8]
 800aa60:	4b24      	ldr	r3, [pc, #144]	; (800aaf4 <tcp_free_acked_segments+0xec>)
 800aa62:	881b      	ldrh	r3, [r3, #0]
 800aa64:	4413      	add	r3, r2
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	4b22      	ldr	r3, [pc, #136]	; (800aaf4 <tcp_free_acked_segments+0xec>)
 800aa6a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800aa6c:	6978      	ldr	r0, [r7, #20]
 800aa6e:	f7fe f8f1 	bl	8008c54 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00c      	beq.n	800aa96 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d109      	bne.n	800aa96 <tcp_free_acked_segments+0x8e>
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d106      	bne.n	800aa96 <tcp_free_acked_segments+0x8e>
 800aa88:	4b17      	ldr	r3, [pc, #92]	; (800aae8 <tcp_free_acked_segments+0xe0>)
 800aa8a:	f240 4262 	movw	r2, #1122	; 0x462
 800aa8e:	491a      	ldr	r1, [pc, #104]	; (800aaf8 <tcp_free_acked_segments+0xf0>)
 800aa90:	4817      	ldr	r0, [pc, #92]	; (800aaf0 <tcp_free_acked_segments+0xe8>)
 800aa92:	f005 fda9 	bl	80105e8 <iprintf>
  while (seg_list != NULL &&
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d020      	beq.n	800aade <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fb f9e3 	bl	8005e6e <lwip_htonl>
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	891b      	ldrh	r3, [r3, #8]
 800aaae:	461d      	mov	r5, r3
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	899b      	ldrh	r3, [r3, #12]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fb f9c3 	bl	8005e44 <lwip_htons>
 800aabe:	4603      	mov	r3, r0
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	f003 0303 	and.w	r3, r3, #3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <tcp_free_acked_segments+0xc6>
 800aaca:	2301      	movs	r3, #1
 800aacc:	e000      	b.n	800aad0 <tcp_free_acked_segments+0xc8>
 800aace:	2300      	movs	r3, #0
 800aad0:	442b      	add	r3, r5
 800aad2:	18e2      	adds	r2, r4, r3
 800aad4:	4b09      	ldr	r3, [pc, #36]	; (800aafc <tcp_free_acked_segments+0xf4>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800aada:	2b00      	cmp	r3, #0
 800aadc:	dd9c      	ble.n	800aa18 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800aade:	68bb      	ldr	r3, [r7, #8]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3718      	adds	r7, #24
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bdb0      	pop	{r4, r5, r7, pc}
 800aae8:	080128d4 	.word	0x080128d4
 800aaec:	08012bbc 	.word	0x08012bbc
 800aaf0:	08012920 	.word	0x08012920
 800aaf4:	20000534 	.word	0x20000534
 800aaf8:	08012be4 	.word	0x08012be4
 800aafc:	20000530 	.word	0x20000530

0800ab00 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ab00:	b5b0      	push	{r4, r5, r7, lr}
 800ab02:	b094      	sub	sp, #80	; 0x50
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d106      	bne.n	800ab20 <tcp_receive+0x20>
 800ab12:	4ba6      	ldr	r3, [pc, #664]	; (800adac <tcp_receive+0x2ac>)
 800ab14:	f240 427b 	movw	r2, #1147	; 0x47b
 800ab18:	49a5      	ldr	r1, [pc, #660]	; (800adb0 <tcp_receive+0x2b0>)
 800ab1a:	48a6      	ldr	r0, [pc, #664]	; (800adb4 <tcp_receive+0x2b4>)
 800ab1c:	f005 fd64 	bl	80105e8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	7d1b      	ldrb	r3, [r3, #20]
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d806      	bhi.n	800ab36 <tcp_receive+0x36>
 800ab28:	4ba0      	ldr	r3, [pc, #640]	; (800adac <tcp_receive+0x2ac>)
 800ab2a:	f240 427c 	movw	r2, #1148	; 0x47c
 800ab2e:	49a2      	ldr	r1, [pc, #648]	; (800adb8 <tcp_receive+0x2b8>)
 800ab30:	48a0      	ldr	r0, [pc, #640]	; (800adb4 <tcp_receive+0x2b4>)
 800ab32:	f005 fd59 	bl	80105e8 <iprintf>

  if (flags & TCP_ACK) {
 800ab36:	4ba1      	ldr	r3, [pc, #644]	; (800adbc <tcp_receive+0x2bc>)
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	f003 0310 	and.w	r3, r3, #16
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 8263 	beq.w	800b00a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab50:	4413      	add	r3, r2
 800ab52:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab58:	4b99      	ldr	r3, [pc, #612]	; (800adc0 <tcp_receive+0x2c0>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	db1b      	blt.n	800ab9a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab66:	4b96      	ldr	r3, [pc, #600]	; (800adc0 <tcp_receive+0x2c0>)
 800ab68:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d106      	bne.n	800ab7c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab72:	4b94      	ldr	r3, [pc, #592]	; (800adc4 <tcp_receive+0x2c4>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	db0e      	blt.n	800ab9a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab80:	4b90      	ldr	r3, [pc, #576]	; (800adc4 <tcp_receive+0x2c4>)
 800ab82:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d125      	bne.n	800abd4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ab88:	4b8f      	ldr	r3, [pc, #572]	; (800adc8 <tcp_receive+0x2c8>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	89db      	ldrh	r3, [r3, #14]
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d91c      	bls.n	800abd4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ab9a:	4b8b      	ldr	r3, [pc, #556]	; (800adc8 <tcp_receive+0x2c8>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	89db      	ldrh	r3, [r3, #14]
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d205      	bcs.n	800abc4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800abc4:	4b7e      	ldr	r3, [pc, #504]	; (800adc0 <tcp_receive+0x2c0>)
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800abcc:	4b7d      	ldr	r3, [pc, #500]	; (800adc4 <tcp_receive+0x2c4>)
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800abd4:	4b7b      	ldr	r3, [pc, #492]	; (800adc4 <tcp_receive+0x2c4>)
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	dc58      	bgt.n	800ac94 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800abe2:	4b7a      	ldr	r3, [pc, #488]	; (800adcc <tcp_receive+0x2cc>)
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d14b      	bne.n	800ac82 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800abf4:	4413      	add	r3, r2
 800abf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d142      	bne.n	800ac82 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	db3d      	blt.n	800ac82 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac0a:	4b6e      	ldr	r3, [pc, #440]	; (800adc4 <tcp_receive+0x2c4>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d137      	bne.n	800ac82 <tcp_receive+0x182>
              found_dupack = 1;
 800ac12:	2301      	movs	r3, #1
 800ac14:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac1c:	2bff      	cmp	r3, #255	; 0xff
 800ac1e:	d007      	beq.n	800ac30 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac26:	3301      	adds	r3, #1
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	d91b      	bls.n	800ac72 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac44:	4413      	add	r3, r2
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d30a      	bcc.n	800ac68 <tcp_receive+0x168>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac5c:	4413      	add	r3, r2
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ac66:	e004      	b.n	800ac72 <tcp_receive+0x172>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d902      	bls.n	800ac82 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f002 fb47 	bl	800d310 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ac82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f040 8160 	bne.w	800af4a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac92:	e15a      	b.n	800af4a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ac94:	4b4b      	ldr	r3, [pc, #300]	; (800adc4 <tcp_receive+0x2c4>)
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f2c0 814d 	blt.w	800af40 <tcp_receive+0x440>
 800aca6:	4b47      	ldr	r3, [pc, #284]	; (800adc4 <tcp_receive+0x2c4>)
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f300 8145 	bgt.w	800af40 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	8b5b      	ldrh	r3, [r3, #26]
 800acba:	f003 0304 	and.w	r3, r3, #4
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d010      	beq.n	800ace4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	8b5b      	ldrh	r3, [r3, #26]
 800acc6:	f023 0304 	bic.w	r3, r3, #4
 800acca:	b29a      	uxth	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800acf2:	10db      	asrs	r3, r3, #3
 800acf4:	b21b      	sxth	r3, r3
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	4413      	add	r3, r2
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	b21a      	sxth	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ad0c:	4b2d      	ldr	r3, [pc, #180]	; (800adc4 <tcp_receive+0x2c4>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ad24:	4b27      	ldr	r3, [pc, #156]	; (800adc4 <tcp_receive+0x2c4>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	7d1b      	ldrb	r3, [r3, #20]
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	f240 8096 	bls.w	800ae62 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d244      	bcs.n	800add0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	8b5b      	ldrh	r3, [r3, #26]
 800ad4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d001      	beq.n	800ad56 <tcp_receive+0x256>
 800ad52:	2301      	movs	r3, #1
 800ad54:	e000      	b.n	800ad58 <tcp_receive+0x258>
 800ad56:	2302      	movs	r3, #2
 800ad58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ad5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad66:	fb12 f303 	smulbb	r3, r2, r3
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	bf28      	it	cs
 800ad72:	4613      	movcs	r3, r2
 800ad74:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ad7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ad7e:	4413      	add	r3, r2
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d309      	bcc.n	800ada0 <tcp_receive+0x2a0>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ad92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ad94:	4413      	add	r3, r2
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ad9e:	e060      	b.n	800ae62 <tcp_receive+0x362>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ada6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800adaa:	e05a      	b.n	800ae62 <tcp_receive+0x362>
 800adac:	080128d4 	.word	0x080128d4
 800adb0:	08012c04 	.word	0x08012c04
 800adb4:	08012920 	.word	0x08012920
 800adb8:	08012c20 	.word	0x08012c20
 800adbc:	20000538 	.word	0x20000538
 800adc0:	2000052c 	.word	0x2000052c
 800adc4:	20000530 	.word	0x20000530
 800adc8:	2000051c 	.word	0x2000051c
 800adcc:	20000536 	.word	0x20000536
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800add6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800add8:	4413      	add	r3, r2
 800adda:	b29a      	uxth	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d309      	bcc.n	800adfa <tcp_receive+0x2fa>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800adec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800adee:	4413      	add	r3, r2
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800adf8:	e004      	b.n	800ae04 <tcp_receive+0x304>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d326      	bcc.n	800ae62 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae34:	4413      	add	r3, r2
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d30a      	bcc.n	800ae58 <tcp_receive+0x358>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae4c:	4413      	add	r3, r2
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ae56:	e004      	b.n	800ae62 <tcp_receive+0x362>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae6a:	4a98      	ldr	r2, [pc, #608]	; (800b0cc <tcp_receive+0x5cc>)
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff fdcb 	bl	800aa08 <tcp_free_acked_segments>
 800ae72:	4602      	mov	r2, r0
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae80:	4a93      	ldr	r2, [pc, #588]	; (800b0d0 <tcp_receive+0x5d0>)
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7ff fdc0 	bl	800aa08 <tcp_free_acked_segments>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d104      	bne.n	800aea0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae9c:	861a      	strh	r2, [r3, #48]	; 0x30
 800ae9e:	e002      	b.n	800aea6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d103      	bne.n	800aebc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800aec2:	4b84      	ldr	r3, [pc, #528]	; (800b0d4 <tcp_receive+0x5d4>)
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	4413      	add	r3, r2
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	8b5b      	ldrh	r3, [r3, #26]
 800aed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d035      	beq.n	800af48 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d118      	bne.n	800af16 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00c      	beq.n	800af06 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7fa ffb8 	bl	8005e6e <lwip_htonl>
 800aefe:	4603      	mov	r3, r0
 800af00:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800af02:	2b00      	cmp	r3, #0
 800af04:	dc20      	bgt.n	800af48 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	8b5b      	ldrh	r3, [r3, #26]
 800af0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af0e:	b29a      	uxth	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af14:	e018      	b.n	800af48 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	4618      	mov	r0, r3
 800af24:	f7fa ffa3 	bl	8005e6e <lwip_htonl>
 800af28:	4603      	mov	r3, r0
 800af2a:	1ae3      	subs	r3, r4, r3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	dc0b      	bgt.n	800af48 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	8b5b      	ldrh	r3, [r3, #26]
 800af34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af38:	b29a      	uxth	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af3e:	e003      	b.n	800af48 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f002 fbdf 	bl	800d704 <tcp_send_empty_ack>
 800af46:	e000      	b.n	800af4a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af48:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d05b      	beq.n	800b00a <tcp_receive+0x50a>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af56:	4b60      	ldr	r3, [pc, #384]	; (800b0d8 <tcp_receive+0x5d8>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	da54      	bge.n	800b00a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800af60:	4b5e      	ldr	r3, [pc, #376]	; (800b0dc <tcp_receive+0x5dc>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	b29a      	uxth	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	b29b      	uxth	r3, r3
 800af70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800af74:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800af7e:	10db      	asrs	r3, r3, #3
 800af80:	b21b      	sxth	r3, r3
 800af82:	b29b      	uxth	r3, r3
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	b29b      	uxth	r3, r3
 800af88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800af92:	b29a      	uxth	r2, r3
 800af94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af98:	4413      	add	r3, r2
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	b21a      	sxth	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800afa2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	da05      	bge.n	800afb6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800afaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800afae:	425b      	negs	r3, r3
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800afb6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800afc0:	109b      	asrs	r3, r3, #2
 800afc2:	b21b      	sxth	r3, r3
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	b29b      	uxth	r3, r3
 800afca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800afda:	4413      	add	r3, r2
 800afdc:	b29b      	uxth	r3, r3
 800afde:	b21a      	sxth	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800afea:	10db      	asrs	r3, r3, #3
 800afec:	b21b      	sxth	r3, r3
 800afee:	b29a      	uxth	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	4413      	add	r3, r2
 800affa:	b29b      	uxth	r3, r3
 800affc:	b21a      	sxth	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b00a:	4b35      	ldr	r3, [pc, #212]	; (800b0e0 <tcp_receive+0x5e0>)
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 84e1 	beq.w	800b9d6 <tcp_receive+0xed6>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	7d1b      	ldrb	r3, [r3, #20]
 800b018:	2b06      	cmp	r3, #6
 800b01a:	f200 84dc 	bhi.w	800b9d6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b022:	4b30      	ldr	r3, [pc, #192]	; (800b0e4 <tcp_receive+0x5e4>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	3b01      	subs	r3, #1
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f2c0 808e 	blt.w	800b14c <tcp_receive+0x64c>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b034:	4b2a      	ldr	r3, [pc, #168]	; (800b0e0 <tcp_receive+0x5e0>)
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	4619      	mov	r1, r3
 800b03a:	4b2a      	ldr	r3, [pc, #168]	; (800b0e4 <tcp_receive+0x5e4>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	440b      	add	r3, r1
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	3301      	adds	r3, #1
 800b044:	2b00      	cmp	r3, #0
 800b046:	f300 8081 	bgt.w	800b14c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b04a:	4b27      	ldr	r3, [pc, #156]	; (800b0e8 <tcp_receive+0x5e8>)
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b054:	4b23      	ldr	r3, [pc, #140]	; (800b0e4 <tcp_receive+0x5e4>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b05c:	4b22      	ldr	r3, [pc, #136]	; (800b0e8 <tcp_receive+0x5e8>)
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d106      	bne.n	800b072 <tcp_receive+0x572>
 800b064:	4b21      	ldr	r3, [pc, #132]	; (800b0ec <tcp_receive+0x5ec>)
 800b066:	f240 5294 	movw	r2, #1428	; 0x594
 800b06a:	4921      	ldr	r1, [pc, #132]	; (800b0f0 <tcp_receive+0x5f0>)
 800b06c:	4821      	ldr	r0, [pc, #132]	; (800b0f4 <tcp_receive+0x5f4>)
 800b06e:	f005 fabb 	bl	80105e8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b074:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b078:	4293      	cmp	r3, r2
 800b07a:	d906      	bls.n	800b08a <tcp_receive+0x58a>
 800b07c:	4b1b      	ldr	r3, [pc, #108]	; (800b0ec <tcp_receive+0x5ec>)
 800b07e:	f240 5295 	movw	r2, #1429	; 0x595
 800b082:	491d      	ldr	r1, [pc, #116]	; (800b0f8 <tcp_receive+0x5f8>)
 800b084:	481b      	ldr	r0, [pc, #108]	; (800b0f4 <tcp_receive+0x5f4>)
 800b086:	f005 faaf 	bl	80105e8 <iprintf>
      off = (u16_t)off32;
 800b08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b090:	4b15      	ldr	r3, [pc, #84]	; (800b0e8 <tcp_receive+0x5e8>)
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	891b      	ldrh	r3, [r3, #8]
 800b096:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d906      	bls.n	800b0ac <tcp_receive+0x5ac>
 800b09e:	4b13      	ldr	r3, [pc, #76]	; (800b0ec <tcp_receive+0x5ec>)
 800b0a0:	f240 5297 	movw	r2, #1431	; 0x597
 800b0a4:	4915      	ldr	r1, [pc, #84]	; (800b0fc <tcp_receive+0x5fc>)
 800b0a6:	4813      	ldr	r0, [pc, #76]	; (800b0f4 <tcp_receive+0x5f4>)
 800b0a8:	f005 fa9e 	bl	80105e8 <iprintf>
      inseg.len -= off;
 800b0ac:	4b0e      	ldr	r3, [pc, #56]	; (800b0e8 <tcp_receive+0x5e8>)
 800b0ae:	891a      	ldrh	r2, [r3, #8]
 800b0b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	4b0b      	ldr	r3, [pc, #44]	; (800b0e8 <tcp_receive+0x5e8>)
 800b0ba:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b0bc:	4b0a      	ldr	r3, [pc, #40]	; (800b0e8 <tcp_receive+0x5e8>)
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	891a      	ldrh	r2, [r3, #8]
 800b0c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b0ca:	e029      	b.n	800b120 <tcp_receive+0x620>
 800b0cc:	08012c3c 	.word	0x08012c3c
 800b0d0:	08012c44 	.word	0x08012c44
 800b0d4:	20000534 	.word	0x20000534
 800b0d8:	20000530 	.word	0x20000530
 800b0dc:	20007154 	.word	0x20007154
 800b0e0:	20000536 	.word	0x20000536
 800b0e4:	2000052c 	.word	0x2000052c
 800b0e8:	2000050c 	.word	0x2000050c
 800b0ec:	080128d4 	.word	0x080128d4
 800b0f0:	08012c4c 	.word	0x08012c4c
 800b0f4:	08012920 	.word	0x08012920
 800b0f8:	08012c5c 	.word	0x08012c5c
 800b0fc:	08012c6c 	.word	0x08012c6c
        off -= p->len;
 800b100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b102:	895b      	ldrh	r3, [r3, #10]
 800b104:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b10e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b110:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b112:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b116:	2200      	movs	r2, #0
 800b118:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b11a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b122:	895b      	ldrh	r3, [r3, #10]
 800b124:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b128:	429a      	cmp	r2, r3
 800b12a:	d8e9      	bhi.n	800b100 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b12c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b130:	4619      	mov	r1, r3
 800b132:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b134:	f7fc f8e6 	bl	8007304 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13c:	4a91      	ldr	r2, [pc, #580]	; (800b384 <tcp_receive+0x884>)
 800b13e:	6013      	str	r3, [r2, #0]
 800b140:	4b91      	ldr	r3, [pc, #580]	; (800b388 <tcp_receive+0x888>)
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	4a8f      	ldr	r2, [pc, #572]	; (800b384 <tcp_receive+0x884>)
 800b146:	6812      	ldr	r2, [r2, #0]
 800b148:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b14a:	e00d      	b.n	800b168 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b14c:	4b8d      	ldr	r3, [pc, #564]	; (800b384 <tcp_receive+0x884>)
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	1ad3      	subs	r3, r2, r3
 800b156:	2b00      	cmp	r3, #0
 800b158:	da06      	bge.n	800b168 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	8b5b      	ldrh	r3, [r3, #26]
 800b15e:	f043 0302 	orr.w	r3, r3, #2
 800b162:	b29a      	uxth	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b168:	4b86      	ldr	r3, [pc, #536]	; (800b384 <tcp_receive+0x884>)
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	f2c0 842a 	blt.w	800b9cc <tcp_receive+0xecc>
 800b178:	4b82      	ldr	r3, [pc, #520]	; (800b384 <tcp_receive+0x884>)
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b180:	6879      	ldr	r1, [r7, #4]
 800b182:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b184:	440b      	add	r3, r1
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	3301      	adds	r3, #1
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f300 841e 	bgt.w	800b9cc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b194:	4b7b      	ldr	r3, [pc, #492]	; (800b384 <tcp_receive+0x884>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	429a      	cmp	r2, r3
 800b19a:	f040 829a 	bne.w	800b6d2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b19e:	4b7a      	ldr	r3, [pc, #488]	; (800b388 <tcp_receive+0x888>)
 800b1a0:	891c      	ldrh	r4, [r3, #8]
 800b1a2:	4b79      	ldr	r3, [pc, #484]	; (800b388 <tcp_receive+0x888>)
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	899b      	ldrh	r3, [r3, #12]
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fa fe4a 	bl	8005e44 <lwip_htons>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	f003 0303 	and.w	r3, r3, #3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <tcp_receive+0x6c0>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e000      	b.n	800b1c2 <tcp_receive+0x6c2>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	4423      	add	r3, r4
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	4b71      	ldr	r3, [pc, #452]	; (800b38c <tcp_receive+0x88c>)
 800b1c8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b1ce:	4b6f      	ldr	r3, [pc, #444]	; (800b38c <tcp_receive+0x88c>)
 800b1d0:	881b      	ldrh	r3, [r3, #0]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d275      	bcs.n	800b2c2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b1d6:	4b6c      	ldr	r3, [pc, #432]	; (800b388 <tcp_receive+0x888>)
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	899b      	ldrh	r3, [r3, #12]
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fa fe30 	bl	8005e44 <lwip_htons>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	f003 0301 	and.w	r3, r3, #1
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d01f      	beq.n	800b230 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b1f0:	4b65      	ldr	r3, [pc, #404]	; (800b388 <tcp_receive+0x888>)
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	899b      	ldrh	r3, [r3, #12]
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	b21b      	sxth	r3, r3
 800b1fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b1fe:	b21c      	sxth	r4, r3
 800b200:	4b61      	ldr	r3, [pc, #388]	; (800b388 <tcp_receive+0x888>)
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	899b      	ldrh	r3, [r3, #12]
 800b206:	b29b      	uxth	r3, r3
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fa fe1b 	bl	8005e44 <lwip_htons>
 800b20e:	4603      	mov	r3, r0
 800b210:	b2db      	uxtb	r3, r3
 800b212:	b29b      	uxth	r3, r3
 800b214:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b218:	b29b      	uxth	r3, r3
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fa fe12 	bl	8005e44 <lwip_htons>
 800b220:	4603      	mov	r3, r0
 800b222:	b21b      	sxth	r3, r3
 800b224:	4323      	orrs	r3, r4
 800b226:	b21a      	sxth	r2, r3
 800b228:	4b57      	ldr	r3, [pc, #348]	; (800b388 <tcp_receive+0x888>)
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	b292      	uxth	r2, r2
 800b22e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b234:	4b54      	ldr	r3, [pc, #336]	; (800b388 <tcp_receive+0x888>)
 800b236:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b238:	4b53      	ldr	r3, [pc, #332]	; (800b388 <tcp_receive+0x888>)
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	899b      	ldrh	r3, [r3, #12]
 800b23e:	b29b      	uxth	r3, r3
 800b240:	4618      	mov	r0, r3
 800b242:	f7fa fdff 	bl	8005e44 <lwip_htons>
 800b246:	4603      	mov	r3, r0
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	f003 0302 	and.w	r3, r3, #2
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d005      	beq.n	800b25e <tcp_receive+0x75e>
            inseg.len -= 1;
 800b252:	4b4d      	ldr	r3, [pc, #308]	; (800b388 <tcp_receive+0x888>)
 800b254:	891b      	ldrh	r3, [r3, #8]
 800b256:	3b01      	subs	r3, #1
 800b258:	b29a      	uxth	r2, r3
 800b25a:	4b4b      	ldr	r3, [pc, #300]	; (800b388 <tcp_receive+0x888>)
 800b25c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b25e:	4b4a      	ldr	r3, [pc, #296]	; (800b388 <tcp_receive+0x888>)
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	4b49      	ldr	r3, [pc, #292]	; (800b388 <tcp_receive+0x888>)
 800b264:	891b      	ldrh	r3, [r3, #8]
 800b266:	4619      	mov	r1, r3
 800b268:	4610      	mov	r0, r2
 800b26a:	f7fb ff4b 	bl	8007104 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b26e:	4b46      	ldr	r3, [pc, #280]	; (800b388 <tcp_receive+0x888>)
 800b270:	891c      	ldrh	r4, [r3, #8]
 800b272:	4b45      	ldr	r3, [pc, #276]	; (800b388 <tcp_receive+0x888>)
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	899b      	ldrh	r3, [r3, #12]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fa fde2 	bl	8005e44 <lwip_htons>
 800b280:	4603      	mov	r3, r0
 800b282:	b2db      	uxtb	r3, r3
 800b284:	f003 0303 	and.w	r3, r3, #3
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <tcp_receive+0x790>
 800b28c:	2301      	movs	r3, #1
 800b28e:	e000      	b.n	800b292 <tcp_receive+0x792>
 800b290:	2300      	movs	r3, #0
 800b292:	4423      	add	r3, r4
 800b294:	b29a      	uxth	r2, r3
 800b296:	4b3d      	ldr	r3, [pc, #244]	; (800b38c <tcp_receive+0x88c>)
 800b298:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b29a:	4b3c      	ldr	r3, [pc, #240]	; (800b38c <tcp_receive+0x88c>)
 800b29c:	881b      	ldrh	r3, [r3, #0]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	4b38      	ldr	r3, [pc, #224]	; (800b384 <tcp_receive+0x884>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	441a      	add	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2aa:	6879      	ldr	r1, [r7, #4]
 800b2ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b2ae:	440b      	add	r3, r1
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d006      	beq.n	800b2c2 <tcp_receive+0x7c2>
 800b2b4:	4b36      	ldr	r3, [pc, #216]	; (800b390 <tcp_receive+0x890>)
 800b2b6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800b2ba:	4936      	ldr	r1, [pc, #216]	; (800b394 <tcp_receive+0x894>)
 800b2bc:	4836      	ldr	r0, [pc, #216]	; (800b398 <tcp_receive+0x898>)
 800b2be:	f005 f993 	bl	80105e8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f000 80e7 	beq.w	800b49a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b2cc:	4b2e      	ldr	r3, [pc, #184]	; (800b388 <tcp_receive+0x888>)
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	899b      	ldrh	r3, [r3, #12]
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fa fdb5 	bl	8005e44 <lwip_htons>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d010      	beq.n	800b308 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b2e6:	e00a      	b.n	800b2fe <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ec:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f7fd fcab 	bl	8008c54 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1f0      	bne.n	800b2e8 <tcp_receive+0x7e8>
 800b306:	e0c8      	b.n	800b49a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b30c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b30e:	e052      	b.n	800b3b6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	899b      	ldrh	r3, [r3, #12]
 800b316:	b29b      	uxth	r3, r3
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fa fd93 	bl	8005e44 <lwip_htons>
 800b31e:	4603      	mov	r3, r0
 800b320:	b2db      	uxtb	r3, r3
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	2b00      	cmp	r3, #0
 800b328:	d03d      	beq.n	800b3a6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b32a:	4b17      	ldr	r3, [pc, #92]	; (800b388 <tcp_receive+0x888>)
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	899b      	ldrh	r3, [r3, #12]
 800b330:	b29b      	uxth	r3, r3
 800b332:	4618      	mov	r0, r3
 800b334:	f7fa fd86 	bl	8005e44 <lwip_htons>
 800b338:	4603      	mov	r3, r0
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b340:	2b00      	cmp	r3, #0
 800b342:	d130      	bne.n	800b3a6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b344:	4b10      	ldr	r3, [pc, #64]	; (800b388 <tcp_receive+0x888>)
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	899b      	ldrh	r3, [r3, #12]
 800b34a:	b29c      	uxth	r4, r3
 800b34c:	2001      	movs	r0, #1
 800b34e:	f7fa fd79 	bl	8005e44 <lwip_htons>
 800b352:	4603      	mov	r3, r0
 800b354:	461a      	mov	r2, r3
 800b356:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <tcp_receive+0x888>)
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	4322      	orrs	r2, r4
 800b35c:	b292      	uxth	r2, r2
 800b35e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b360:	4b09      	ldr	r3, [pc, #36]	; (800b388 <tcp_receive+0x888>)
 800b362:	891c      	ldrh	r4, [r3, #8]
 800b364:	4b08      	ldr	r3, [pc, #32]	; (800b388 <tcp_receive+0x888>)
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	899b      	ldrh	r3, [r3, #12]
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7fa fd69 	bl	8005e44 <lwip_htons>
 800b372:	4603      	mov	r3, r0
 800b374:	b2db      	uxtb	r3, r3
 800b376:	f003 0303 	and.w	r3, r3, #3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00e      	beq.n	800b39c <tcp_receive+0x89c>
 800b37e:	2301      	movs	r3, #1
 800b380:	e00d      	b.n	800b39e <tcp_receive+0x89e>
 800b382:	bf00      	nop
 800b384:	2000052c 	.word	0x2000052c
 800b388:	2000050c 	.word	0x2000050c
 800b38c:	20000536 	.word	0x20000536
 800b390:	080128d4 	.word	0x080128d4
 800b394:	08012c7c 	.word	0x08012c7c
 800b398:	08012920 	.word	0x08012920
 800b39c:	2300      	movs	r3, #0
 800b39e:	4423      	add	r3, r4
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	4b98      	ldr	r3, [pc, #608]	; (800b604 <tcp_receive+0xb04>)
 800b3a4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b3b0:	6938      	ldr	r0, [r7, #16]
 800b3b2:	f7fd fc4f 	bl	8008c54 <tcp_seg_free>
            while (next &&
 800b3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00e      	beq.n	800b3da <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b3bc:	4b91      	ldr	r3, [pc, #580]	; (800b604 <tcp_receive+0xb04>)
 800b3be:	881b      	ldrh	r3, [r3, #0]
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	4b91      	ldr	r3, [pc, #580]	; (800b608 <tcp_receive+0xb08>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	441a      	add	r2, r3
 800b3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3d0:	8909      	ldrh	r1, [r1, #8]
 800b3d2:	440b      	add	r3, r1
 800b3d4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	da9a      	bge.n	800b310 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d059      	beq.n	800b494 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b3e0:	4b88      	ldr	r3, [pc, #544]	; (800b604 <tcp_receive+0xb04>)
 800b3e2:	881b      	ldrh	r3, [r3, #0]
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	4b88      	ldr	r3, [pc, #544]	; (800b608 <tcp_receive+0xb08>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	441a      	add	r2, r3
 800b3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	dd4d      	ble.n	800b494 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	4b81      	ldr	r3, [pc, #516]	; (800b608 <tcp_receive+0xb08>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	b29b      	uxth	r3, r3
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	b29a      	uxth	r2, r3
 800b40a:	4b80      	ldr	r3, [pc, #512]	; (800b60c <tcp_receive+0xb0c>)
 800b40c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b40e:	4b7f      	ldr	r3, [pc, #508]	; (800b60c <tcp_receive+0xb0c>)
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	899b      	ldrh	r3, [r3, #12]
 800b414:	b29b      	uxth	r3, r3
 800b416:	4618      	mov	r0, r3
 800b418:	f7fa fd14 	bl	8005e44 <lwip_htons>
 800b41c:	4603      	mov	r3, r0
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	f003 0302 	and.w	r3, r3, #2
 800b424:	2b00      	cmp	r3, #0
 800b426:	d005      	beq.n	800b434 <tcp_receive+0x934>
                inseg.len -= 1;
 800b428:	4b78      	ldr	r3, [pc, #480]	; (800b60c <tcp_receive+0xb0c>)
 800b42a:	891b      	ldrh	r3, [r3, #8]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	b29a      	uxth	r2, r3
 800b430:	4b76      	ldr	r3, [pc, #472]	; (800b60c <tcp_receive+0xb0c>)
 800b432:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b434:	4b75      	ldr	r3, [pc, #468]	; (800b60c <tcp_receive+0xb0c>)
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	4b74      	ldr	r3, [pc, #464]	; (800b60c <tcp_receive+0xb0c>)
 800b43a:	891b      	ldrh	r3, [r3, #8]
 800b43c:	4619      	mov	r1, r3
 800b43e:	4610      	mov	r0, r2
 800b440:	f7fb fe60 	bl	8007104 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b444:	4b71      	ldr	r3, [pc, #452]	; (800b60c <tcp_receive+0xb0c>)
 800b446:	891c      	ldrh	r4, [r3, #8]
 800b448:	4b70      	ldr	r3, [pc, #448]	; (800b60c <tcp_receive+0xb0c>)
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	899b      	ldrh	r3, [r3, #12]
 800b44e:	b29b      	uxth	r3, r3
 800b450:	4618      	mov	r0, r3
 800b452:	f7fa fcf7 	bl	8005e44 <lwip_htons>
 800b456:	4603      	mov	r3, r0
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	f003 0303 	and.w	r3, r3, #3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <tcp_receive+0x966>
 800b462:	2301      	movs	r3, #1
 800b464:	e000      	b.n	800b468 <tcp_receive+0x968>
 800b466:	2300      	movs	r3, #0
 800b468:	4423      	add	r3, r4
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	4b65      	ldr	r3, [pc, #404]	; (800b604 <tcp_receive+0xb04>)
 800b46e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b470:	4b64      	ldr	r3, [pc, #400]	; (800b604 <tcp_receive+0xb04>)
 800b472:	881b      	ldrh	r3, [r3, #0]
 800b474:	461a      	mov	r2, r3
 800b476:	4b64      	ldr	r3, [pc, #400]	; (800b608 <tcp_receive+0xb08>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	441a      	add	r2, r3
 800b47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	429a      	cmp	r2, r3
 800b484:	d006      	beq.n	800b494 <tcp_receive+0x994>
 800b486:	4b62      	ldr	r3, [pc, #392]	; (800b610 <tcp_receive+0xb10>)
 800b488:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800b48c:	4961      	ldr	r1, [pc, #388]	; (800b614 <tcp_receive+0xb14>)
 800b48e:	4862      	ldr	r0, [pc, #392]	; (800b618 <tcp_receive+0xb18>)
 800b490:	f005 f8aa 	bl	80105e8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b498:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b49a:	4b5a      	ldr	r3, [pc, #360]	; (800b604 <tcp_receive+0xb04>)
 800b49c:	881b      	ldrh	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	4b59      	ldr	r3, [pc, #356]	; (800b608 <tcp_receive+0xb08>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	441a      	add	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b4ae:	4b55      	ldr	r3, [pc, #340]	; (800b604 <tcp_receive+0xb04>)
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d206      	bcs.n	800b4c4 <tcp_receive+0x9c4>
 800b4b6:	4b56      	ldr	r3, [pc, #344]	; (800b610 <tcp_receive+0xb10>)
 800b4b8:	f240 6207 	movw	r2, #1543	; 0x607
 800b4bc:	4957      	ldr	r1, [pc, #348]	; (800b61c <tcp_receive+0xb1c>)
 800b4be:	4856      	ldr	r0, [pc, #344]	; (800b618 <tcp_receive+0xb18>)
 800b4c0:	f005 f892 	bl	80105e8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b4c8:	4b4e      	ldr	r3, [pc, #312]	; (800b604 <tcp_receive+0xb04>)
 800b4ca:	881b      	ldrh	r3, [r3, #0]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7fc fe9b 	bl	8008210 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b4da:	4b4c      	ldr	r3, [pc, #304]	; (800b60c <tcp_receive+0xb0c>)
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	891b      	ldrh	r3, [r3, #8]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d006      	beq.n	800b4f2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b4e4:	4b49      	ldr	r3, [pc, #292]	; (800b60c <tcp_receive+0xb0c>)
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	4a4d      	ldr	r2, [pc, #308]	; (800b620 <tcp_receive+0xb20>)
 800b4ea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b4ec:	4b47      	ldr	r3, [pc, #284]	; (800b60c <tcp_receive+0xb0c>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b4f2:	4b46      	ldr	r3, [pc, #280]	; (800b60c <tcp_receive+0xb0c>)
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	899b      	ldrh	r3, [r3, #12]
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fa fca2 	bl	8005e44 <lwip_htons>
 800b500:	4603      	mov	r3, r0
 800b502:	b2db      	uxtb	r3, r3
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f000 80b8 	beq.w	800b67e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b50e:	4b45      	ldr	r3, [pc, #276]	; (800b624 <tcp_receive+0xb24>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	f043 0320 	orr.w	r3, r3, #32
 800b516:	b2da      	uxtb	r2, r3
 800b518:	4b42      	ldr	r3, [pc, #264]	; (800b624 <tcp_receive+0xb24>)
 800b51a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b51c:	e0af      	b.n	800b67e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b522:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	4a36      	ldr	r2, [pc, #216]	; (800b608 <tcp_receive+0xb08>)
 800b52e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	891b      	ldrh	r3, [r3, #8]
 800b534:	461c      	mov	r4, r3
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	899b      	ldrh	r3, [r3, #12]
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fa fc80 	bl	8005e44 <lwip_htons>
 800b544:	4603      	mov	r3, r0
 800b546:	b2db      	uxtb	r3, r3
 800b548:	f003 0303 	and.w	r3, r3, #3
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d001      	beq.n	800b554 <tcp_receive+0xa54>
 800b550:	2301      	movs	r3, #1
 800b552:	e000      	b.n	800b556 <tcp_receive+0xa56>
 800b554:	2300      	movs	r3, #0
 800b556:	191a      	adds	r2, r3, r4
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55c:	441a      	add	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b566:	461c      	mov	r4, r3
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	891b      	ldrh	r3, [r3, #8]
 800b56c:	461d      	mov	r5, r3
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	899b      	ldrh	r3, [r3, #12]
 800b574:	b29b      	uxth	r3, r3
 800b576:	4618      	mov	r0, r3
 800b578:	f7fa fc64 	bl	8005e44 <lwip_htons>
 800b57c:	4603      	mov	r3, r0
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	f003 0303 	and.w	r3, r3, #3
 800b584:	2b00      	cmp	r3, #0
 800b586:	d001      	beq.n	800b58c <tcp_receive+0xa8c>
 800b588:	2301      	movs	r3, #1
 800b58a:	e000      	b.n	800b58e <tcp_receive+0xa8e>
 800b58c:	2300      	movs	r3, #0
 800b58e:	442b      	add	r3, r5
 800b590:	429c      	cmp	r4, r3
 800b592:	d206      	bcs.n	800b5a2 <tcp_receive+0xaa2>
 800b594:	4b1e      	ldr	r3, [pc, #120]	; (800b610 <tcp_receive+0xb10>)
 800b596:	f240 622c 	movw	r2, #1580	; 0x62c
 800b59a:	4923      	ldr	r1, [pc, #140]	; (800b628 <tcp_receive+0xb28>)
 800b59c:	481e      	ldr	r0, [pc, #120]	; (800b618 <tcp_receive+0xb18>)
 800b59e:	f005 f823 	bl	80105e8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	891b      	ldrh	r3, [r3, #8]
 800b5a6:	461c      	mov	r4, r3
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	899b      	ldrh	r3, [r3, #12]
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fa fc47 	bl	8005e44 <lwip_htons>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	f003 0303 	and.w	r3, r3, #3
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d001      	beq.n	800b5c6 <tcp_receive+0xac6>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e000      	b.n	800b5c8 <tcp_receive+0xac8>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	1919      	adds	r1, r3, r4
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b5ce:	b28b      	uxth	r3, r1
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7fc fe19 	bl	8008210 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	891b      	ldrh	r3, [r3, #8]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d028      	beq.n	800b63a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b5e8:	4b0d      	ldr	r3, [pc, #52]	; (800b620 <tcp_receive+0xb20>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d01d      	beq.n	800b62c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b5f0:	4b0b      	ldr	r3, [pc, #44]	; (800b620 <tcp_receive+0xb20>)
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	f7fb ffca 	bl	8007594 <pbuf_cat>
 800b600:	e018      	b.n	800b634 <tcp_receive+0xb34>
 800b602:	bf00      	nop
 800b604:	20000536 	.word	0x20000536
 800b608:	2000052c 	.word	0x2000052c
 800b60c:	2000050c 	.word	0x2000050c
 800b610:	080128d4 	.word	0x080128d4
 800b614:	08012cb4 	.word	0x08012cb4
 800b618:	08012920 	.word	0x08012920
 800b61c:	08012cf0 	.word	0x08012cf0
 800b620:	2000053c 	.word	0x2000053c
 800b624:	20000539 	.word	0x20000539
 800b628:	08012d10 	.word	0x08012d10
            } else {
              recv_data = cseg->p;
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	4a70      	ldr	r2, [pc, #448]	; (800b7f4 <tcp_receive+0xcf4>)
 800b632:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2200      	movs	r2, #0
 800b638:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	899b      	ldrh	r3, [r3, #12]
 800b640:	b29b      	uxth	r3, r3
 800b642:	4618      	mov	r0, r3
 800b644:	f7fa fbfe 	bl	8005e44 <lwip_htons>
 800b648:	4603      	mov	r3, r0
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00d      	beq.n	800b670 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b654:	4b68      	ldr	r3, [pc, #416]	; (800b7f8 <tcp_receive+0xcf8>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	f043 0320 	orr.w	r3, r3, #32
 800b65c:	b2da      	uxtb	r2, r3
 800b65e:	4b66      	ldr	r3, [pc, #408]	; (800b7f8 <tcp_receive+0xcf8>)
 800b660:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	7d1b      	ldrb	r3, [r3, #20]
 800b666:	2b04      	cmp	r3, #4
 800b668:	d102      	bne.n	800b670 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2207      	movs	r2, #7
 800b66e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b678:	68b8      	ldr	r0, [r7, #8]
 800b67a:	f7fd faeb 	bl	8008c54 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b682:	2b00      	cmp	r3, #0
 800b684:	d008      	beq.n	800b698 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b692:	429a      	cmp	r2, r3
 800b694:	f43f af43 	beq.w	800b51e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	8b5b      	ldrh	r3, [r3, #26]
 800b69c:	f003 0301 	and.w	r3, r3, #1
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00e      	beq.n	800b6c2 <tcp_receive+0xbc2>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	8b5b      	ldrh	r3, [r3, #26]
 800b6a8:	f023 0301 	bic.w	r3, r3, #1
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	835a      	strh	r2, [r3, #26]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	8b5b      	ldrh	r3, [r3, #26]
 800b6b6:	f043 0302 	orr.w	r3, r3, #2
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b6c0:	e188      	b.n	800b9d4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	8b5b      	ldrh	r3, [r3, #26]
 800b6c6:	f043 0301 	orr.w	r3, r3, #1
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b6d0:	e180      	b.n	800b9d4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b6da:	4848      	ldr	r0, [pc, #288]	; (800b7fc <tcp_receive+0xcfc>)
 800b6dc:	f7fd faf0 	bl	8008cc0 <tcp_seg_copy>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	675a      	str	r2, [r3, #116]	; 0x74
 800b6e6:	e16d      	b.n	800b9c4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6f2:	e157      	b.n	800b9a4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	685a      	ldr	r2, [r3, #4]
 800b6fa:	4b41      	ldr	r3, [pc, #260]	; (800b800 <tcp_receive+0xd00>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d11d      	bne.n	800b73e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b702:	4b3e      	ldr	r3, [pc, #248]	; (800b7fc <tcp_receive+0xcfc>)
 800b704:	891a      	ldrh	r2, [r3, #8]
 800b706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b708:	891b      	ldrh	r3, [r3, #8]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	f240 814f 	bls.w	800b9ae <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b710:	483a      	ldr	r0, [pc, #232]	; (800b7fc <tcp_receive+0xcfc>)
 800b712:	f7fd fad5 	bl	8008cc0 <tcp_seg_copy>
 800b716:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f000 8149 	beq.w	800b9b2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800b720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b722:	2b00      	cmp	r3, #0
 800b724:	d003      	beq.n	800b72e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b728:	697a      	ldr	r2, [r7, #20]
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	e002      	b.n	800b734 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	697a      	ldr	r2, [r7, #20]
 800b732:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b734:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b736:	6978      	ldr	r0, [r7, #20]
 800b738:	f7ff f8de 	bl	800a8f8 <tcp_oos_insert_segment>
                }
                break;
 800b73c:	e139      	b.n	800b9b2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b740:	2b00      	cmp	r3, #0
 800b742:	d117      	bne.n	800b774 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b744:	4b2e      	ldr	r3, [pc, #184]	; (800b800 <tcp_receive+0xd00>)
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	2b00      	cmp	r3, #0
 800b752:	da57      	bge.n	800b804 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b754:	4829      	ldr	r0, [pc, #164]	; (800b7fc <tcp_receive+0xcfc>)
 800b756:	f7fd fab3 	bl	8008cc0 <tcp_seg_copy>
 800b75a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f000 8129 	beq.w	800b9b6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b76a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b76c:	69b8      	ldr	r0, [r7, #24]
 800b76e:	f7ff f8c3 	bl	800a8f8 <tcp_oos_insert_segment>
                  }
                  break;
 800b772:	e120      	b.n	800b9b6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b774:	4b22      	ldr	r3, [pc, #136]	; (800b800 <tcp_receive+0xd00>)
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	3b01      	subs	r3, #1
 800b782:	2b00      	cmp	r3, #0
 800b784:	db3e      	blt.n	800b804 <tcp_receive+0xd04>
 800b786:	4b1e      	ldr	r3, [pc, #120]	; (800b800 <tcp_receive+0xd00>)
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	3301      	adds	r3, #1
 800b794:	2b00      	cmp	r3, #0
 800b796:	dc35      	bgt.n	800b804 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b798:	4818      	ldr	r0, [pc, #96]	; (800b7fc <tcp_receive+0xcfc>)
 800b79a:	f7fd fa91 	bl	8008cc0 <tcp_seg_copy>
 800b79e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 8109 	beq.w	800b9ba <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7b0:	8912      	ldrh	r2, [r2, #8]
 800b7b2:	441a      	add	r2, r3
 800b7b4:	4b12      	ldr	r3, [pc, #72]	; (800b800 <tcp_receive+0xd00>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	dd12      	ble.n	800b7e4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b7be:	4b10      	ldr	r3, [pc, #64]	; (800b800 <tcp_receive+0xd00>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d6:	685a      	ldr	r2, [r3, #4]
 800b7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7da:	891b      	ldrh	r3, [r3, #8]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	4610      	mov	r0, r2
 800b7e0:	f7fb fc90 	bl	8007104 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e6:	69fa      	ldr	r2, [r7, #28]
 800b7e8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b7ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b7ec:	69f8      	ldr	r0, [r7, #28]
 800b7ee:	f7ff f883 	bl	800a8f8 <tcp_oos_insert_segment>
                  }
                  break;
 800b7f2:	e0e2      	b.n	800b9ba <tcp_receive+0xeba>
 800b7f4:	2000053c 	.word	0x2000053c
 800b7f8:	20000539 	.word	0x20000539
 800b7fc:	2000050c 	.word	0x2000050c
 800b800:	2000052c 	.word	0x2000052c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b806:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f040 80c6 	bne.w	800b99e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b812:	4b80      	ldr	r3, [pc, #512]	; (800ba14 <tcp_receive+0xf14>)
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f340 80bd 	ble.w	800b99e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	899b      	ldrh	r3, [r3, #12]
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fa fb09 	bl	8005e44 <lwip_htons>
 800b832:	4603      	mov	r3, r0
 800b834:	b2db      	uxtb	r3, r3
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f040 80bf 	bne.w	800b9be <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b840:	4875      	ldr	r0, [pc, #468]	; (800ba18 <tcp_receive+0xf18>)
 800b842:	f7fd fa3d 	bl	8008cc0 <tcp_seg_copy>
 800b846:	4602      	mov	r2, r0
 800b848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 80b6 	beq.w	800b9c2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b85e:	8912      	ldrh	r2, [r2, #8]
 800b860:	441a      	add	r2, r3
 800b862:	4b6c      	ldr	r3, [pc, #432]	; (800ba14 <tcp_receive+0xf14>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	dd12      	ble.n	800b892 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b86c:	4b69      	ldr	r3, [pc, #420]	; (800ba14 <tcp_receive+0xf14>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	b29a      	uxth	r2, r3
 800b872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	b29b      	uxth	r3, r3
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b880:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b884:	685a      	ldr	r2, [r3, #4]
 800b886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b888:	891b      	ldrh	r3, [r3, #8]
 800b88a:	4619      	mov	r1, r3
 800b88c:	4610      	mov	r0, r2
 800b88e:	f7fb fc39 	bl	8007104 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b892:	4b62      	ldr	r3, [pc, #392]	; (800ba1c <tcp_receive+0xf1c>)
 800b894:	881b      	ldrh	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	4b5e      	ldr	r3, [pc, #376]	; (800ba14 <tcp_receive+0xf14>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	441a      	add	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b8a6:	440b      	add	r3, r1
 800b8a8:	1ad3      	subs	r3, r2, r3
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f340 8089 	ble.w	800b9c2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	899b      	ldrh	r3, [r3, #12]
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fa fac2 	bl	8005e44 <lwip_htons>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	f003 0301 	and.w	r3, r3, #1
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d022      	beq.n	800b912 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	899b      	ldrh	r3, [r3, #12]
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	b21b      	sxth	r3, r3
 800b8d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b8dc:	b21c      	sxth	r4, r3
 800b8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	899b      	ldrh	r3, [r3, #12]
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fa faab 	bl	8005e44 <lwip_htons>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fa faa2 	bl	8005e44 <lwip_htons>
 800b900:	4603      	mov	r3, r0
 800b902:	b21b      	sxth	r3, r3
 800b904:	4323      	orrs	r3, r4
 800b906:	b21a      	sxth	r2, r3
 800b908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	b292      	uxth	r2, r2
 800b910:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b916:	b29a      	uxth	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b91c:	4413      	add	r3, r2
 800b91e:	b299      	uxth	r1, r3
 800b920:	4b3c      	ldr	r3, [pc, #240]	; (800ba14 <tcp_receive+0xf14>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	b29a      	uxth	r2, r3
 800b926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	1a8a      	subs	r2, r1, r2
 800b92c:	b292      	uxth	r2, r2
 800b92e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	891b      	ldrh	r3, [r3, #8]
 800b93c:	4619      	mov	r1, r3
 800b93e:	4610      	mov	r0, r2
 800b940:	f7fb fbe0 	bl	8007104 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	891c      	ldrh	r4, [r3, #8]
 800b94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	899b      	ldrh	r3, [r3, #12]
 800b952:	b29b      	uxth	r3, r3
 800b954:	4618      	mov	r0, r3
 800b956:	f7fa fa75 	bl	8005e44 <lwip_htons>
 800b95a:	4603      	mov	r3, r0
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	f003 0303 	and.w	r3, r3, #3
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <tcp_receive+0xe6a>
 800b966:	2301      	movs	r3, #1
 800b968:	e000      	b.n	800b96c <tcp_receive+0xe6c>
 800b96a:	2300      	movs	r3, #0
 800b96c:	4423      	add	r3, r4
 800b96e:	b29a      	uxth	r2, r3
 800b970:	4b2a      	ldr	r3, [pc, #168]	; (800ba1c <tcp_receive+0xf1c>)
 800b972:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b974:	4b29      	ldr	r3, [pc, #164]	; (800ba1c <tcp_receive+0xf1c>)
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	461a      	mov	r2, r3
 800b97a:	4b26      	ldr	r3, [pc, #152]	; (800ba14 <tcp_receive+0xf14>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	441a      	add	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b984:	6879      	ldr	r1, [r7, #4]
 800b986:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b988:	440b      	add	r3, r1
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d019      	beq.n	800b9c2 <tcp_receive+0xec2>
 800b98e:	4b24      	ldr	r3, [pc, #144]	; (800ba20 <tcp_receive+0xf20>)
 800b990:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b994:	4923      	ldr	r1, [pc, #140]	; (800ba24 <tcp_receive+0xf24>)
 800b996:	4824      	ldr	r0, [pc, #144]	; (800ba28 <tcp_receive+0xf28>)
 800b998:	f004 fe26 	bl	80105e8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b99c:	e011      	b.n	800b9c2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f47f aea4 	bne.w	800b6f4 <tcp_receive+0xbf4>
 800b9ac:	e00a      	b.n	800b9c4 <tcp_receive+0xec4>
                break;
 800b9ae:	bf00      	nop
 800b9b0:	e008      	b.n	800b9c4 <tcp_receive+0xec4>
                break;
 800b9b2:	bf00      	nop
 800b9b4:	e006      	b.n	800b9c4 <tcp_receive+0xec4>
                  break;
 800b9b6:	bf00      	nop
 800b9b8:	e004      	b.n	800b9c4 <tcp_receive+0xec4>
                  break;
 800b9ba:	bf00      	nop
 800b9bc:	e002      	b.n	800b9c4 <tcp_receive+0xec4>
                  break;
 800b9be:	bf00      	nop
 800b9c0:	e000      	b.n	800b9c4 <tcp_receive+0xec4>
                break;
 800b9c2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f001 fe9d 	bl	800d704 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b9ca:	e003      	b.n	800b9d4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f001 fe99 	bl	800d704 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b9d2:	e01a      	b.n	800ba0a <tcp_receive+0xf0a>
 800b9d4:	e019      	b.n	800ba0a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b9d6:	4b0f      	ldr	r3, [pc, #60]	; (800ba14 <tcp_receive+0xf14>)
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	db0a      	blt.n	800b9fa <tcp_receive+0xefa>
 800b9e4:	4b0b      	ldr	r3, [pc, #44]	; (800ba14 <tcp_receive+0xf14>)
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ec:	6879      	ldr	r1, [r7, #4]
 800b9ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b9f0:	440b      	add	r3, r1
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	dd07      	ble.n	800ba0a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	8b5b      	ldrh	r3, [r3, #26]
 800b9fe:	f043 0302 	orr.w	r3, r3, #2
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ba08:	e7ff      	b.n	800ba0a <tcp_receive+0xf0a>
 800ba0a:	bf00      	nop
 800ba0c:	3750      	adds	r7, #80	; 0x50
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bdb0      	pop	{r4, r5, r7, pc}
 800ba12:	bf00      	nop
 800ba14:	2000052c 	.word	0x2000052c
 800ba18:	2000050c 	.word	0x2000050c
 800ba1c:	20000536 	.word	0x20000536
 800ba20:	080128d4 	.word	0x080128d4
 800ba24:	08012c7c 	.word	0x08012c7c
 800ba28:	08012920 	.word	0x08012920

0800ba2c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ba32:	4b15      	ldr	r3, [pc, #84]	; (800ba88 <tcp_get_next_optbyte+0x5c>)
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	1c5a      	adds	r2, r3, #1
 800ba38:	b291      	uxth	r1, r2
 800ba3a:	4a13      	ldr	r2, [pc, #76]	; (800ba88 <tcp_get_next_optbyte+0x5c>)
 800ba3c:	8011      	strh	r1, [r2, #0]
 800ba3e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba40:	4b12      	ldr	r3, [pc, #72]	; (800ba8c <tcp_get_next_optbyte+0x60>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d004      	beq.n	800ba52 <tcp_get_next_optbyte+0x26>
 800ba48:	4b11      	ldr	r3, [pc, #68]	; (800ba90 <tcp_get_next_optbyte+0x64>)
 800ba4a:	881b      	ldrh	r3, [r3, #0]
 800ba4c:	88fa      	ldrh	r2, [r7, #6]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d208      	bcs.n	800ba64 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ba52:	4b10      	ldr	r3, [pc, #64]	; (800ba94 <tcp_get_next_optbyte+0x68>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3314      	adds	r3, #20
 800ba58:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ba5a:	88fb      	ldrh	r3, [r7, #6]
 800ba5c:	683a      	ldr	r2, [r7, #0]
 800ba5e:	4413      	add	r3, r2
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	e00b      	b.n	800ba7c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ba64:	88fb      	ldrh	r3, [r7, #6]
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	4b09      	ldr	r3, [pc, #36]	; (800ba90 <tcp_get_next_optbyte+0x64>)
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ba72:	4b06      	ldr	r3, [pc, #24]	; (800ba8c <tcp_get_next_optbyte+0x60>)
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	797b      	ldrb	r3, [r7, #5]
 800ba78:	4413      	add	r3, r2
 800ba7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr
 800ba88:	20000528 	.word	0x20000528
 800ba8c:	20000524 	.word	0x20000524
 800ba90:	20000522 	.word	0x20000522
 800ba94:	2000051c 	.word	0x2000051c

0800ba98 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <tcp_parseopt+0x1c>
 800baa6:	4b31      	ldr	r3, [pc, #196]	; (800bb6c <tcp_parseopt+0xd4>)
 800baa8:	f240 727d 	movw	r2, #1917	; 0x77d
 800baac:	4930      	ldr	r1, [pc, #192]	; (800bb70 <tcp_parseopt+0xd8>)
 800baae:	4831      	ldr	r0, [pc, #196]	; (800bb74 <tcp_parseopt+0xdc>)
 800bab0:	f004 fd9a 	bl	80105e8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bab4:	4b30      	ldr	r3, [pc, #192]	; (800bb78 <tcp_parseopt+0xe0>)
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d053      	beq.n	800bb64 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800babc:	4b2f      	ldr	r3, [pc, #188]	; (800bb7c <tcp_parseopt+0xe4>)
 800babe:	2200      	movs	r2, #0
 800bac0:	801a      	strh	r2, [r3, #0]
 800bac2:	e043      	b.n	800bb4c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800bac4:	f7ff ffb2 	bl	800ba2c <tcp_get_next_optbyte>
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d03c      	beq.n	800bb4c <tcp_parseopt+0xb4>
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d002      	beq.n	800badc <tcp_parseopt+0x44>
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d03f      	beq.n	800bb5a <tcp_parseopt+0xc2>
 800bada:	e026      	b.n	800bb2a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800badc:	f7ff ffa6 	bl	800ba2c <tcp_get_next_optbyte>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b04      	cmp	r3, #4
 800bae4:	d13b      	bne.n	800bb5e <tcp_parseopt+0xc6>
 800bae6:	4b25      	ldr	r3, [pc, #148]	; (800bb7c <tcp_parseopt+0xe4>)
 800bae8:	881b      	ldrh	r3, [r3, #0]
 800baea:	3302      	adds	r3, #2
 800baec:	4a22      	ldr	r2, [pc, #136]	; (800bb78 <tcp_parseopt+0xe0>)
 800baee:	8812      	ldrh	r2, [r2, #0]
 800baf0:	4293      	cmp	r3, r2
 800baf2:	dc34      	bgt.n	800bb5e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800baf4:	f7ff ff9a 	bl	800ba2c <tcp_get_next_optbyte>
 800baf8:	4603      	mov	r3, r0
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	021b      	lsls	r3, r3, #8
 800bafe:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bb00:	f7ff ff94 	bl	800ba2c <tcp_get_next_optbyte>
 800bb04:	4603      	mov	r3, r0
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	89bb      	ldrh	r3, [r7, #12]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bb0e:	89bb      	ldrh	r3, [r7, #12]
 800bb10:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bb14:	d804      	bhi.n	800bb20 <tcp_parseopt+0x88>
 800bb16:	89bb      	ldrh	r3, [r7, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <tcp_parseopt+0x88>
 800bb1c:	89ba      	ldrh	r2, [r7, #12]
 800bb1e:	e001      	b.n	800bb24 <tcp_parseopt+0x8c>
 800bb20:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800bb28:	e010      	b.n	800bb4c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bb2a:	f7ff ff7f 	bl	800ba2c <tcp_get_next_optbyte>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bb32:	7afb      	ldrb	r3, [r7, #11]
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d914      	bls.n	800bb62 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bb38:	7afb      	ldrb	r3, [r7, #11]
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	4b0f      	ldr	r3, [pc, #60]	; (800bb7c <tcp_parseopt+0xe4>)
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	4413      	add	r3, r2
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	3b02      	subs	r3, #2
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	4b0c      	ldr	r3, [pc, #48]	; (800bb7c <tcp_parseopt+0xe4>)
 800bb4a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bb4c:	4b0b      	ldr	r3, [pc, #44]	; (800bb7c <tcp_parseopt+0xe4>)
 800bb4e:	881a      	ldrh	r2, [r3, #0]
 800bb50:	4b09      	ldr	r3, [pc, #36]	; (800bb78 <tcp_parseopt+0xe0>)
 800bb52:	881b      	ldrh	r3, [r3, #0]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d3b5      	bcc.n	800bac4 <tcp_parseopt+0x2c>
 800bb58:	e004      	b.n	800bb64 <tcp_parseopt+0xcc>
          return;
 800bb5a:	bf00      	nop
 800bb5c:	e002      	b.n	800bb64 <tcp_parseopt+0xcc>
            return;
 800bb5e:	bf00      	nop
 800bb60:	e000      	b.n	800bb64 <tcp_parseopt+0xcc>
            return;
 800bb62:	bf00      	nop
      }
    }
  }
}
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	080128d4 	.word	0x080128d4
 800bb70:	08012d38 	.word	0x08012d38
 800bb74:	08012920 	.word	0x08012920
 800bb78:	20000520 	.word	0x20000520
 800bb7c:	20000528 	.word	0x20000528

0800bb80 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bb80:	b480      	push	{r7}
 800bb82:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bb84:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <tcp_trigger_input_pcb_close+0x1c>)
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	f043 0310 	orr.w	r3, r3, #16
 800bb8c:	b2da      	uxtb	r2, r3
 800bb8e:	4b03      	ldr	r3, [pc, #12]	; (800bb9c <tcp_trigger_input_pcb_close+0x1c>)
 800bb90:	701a      	strb	r2, [r3, #0]
}
 800bb92:	bf00      	nop
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	20000539 	.word	0x20000539

0800bba0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00a      	beq.n	800bbc8 <tcp_route+0x28>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	7a1b      	ldrb	r3, [r3, #8]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d006      	beq.n	800bbc8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	7a1b      	ldrb	r3, [r3, #8]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fb f8ca 	bl	8006d58 <netif_get_by_index>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	e003      	b.n	800bbd0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f003 fae7 	bl	800f19c <ip4_route>
 800bbce:	4603      	mov	r3, r0
  }
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800bbd8:	b590      	push	{r4, r7, lr}
 800bbda:	b087      	sub	sp, #28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	603b      	str	r3, [r7, #0]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d105      	bne.n	800bbfa <tcp_create_segment+0x22>
 800bbee:	4b44      	ldr	r3, [pc, #272]	; (800bd00 <tcp_create_segment+0x128>)
 800bbf0:	22a3      	movs	r2, #163	; 0xa3
 800bbf2:	4944      	ldr	r1, [pc, #272]	; (800bd04 <tcp_create_segment+0x12c>)
 800bbf4:	4844      	ldr	r0, [pc, #272]	; (800bd08 <tcp_create_segment+0x130>)
 800bbf6:	f004 fcf7 	bl	80105e8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d105      	bne.n	800bc0c <tcp_create_segment+0x34>
 800bc00:	4b3f      	ldr	r3, [pc, #252]	; (800bd00 <tcp_create_segment+0x128>)
 800bc02:	22a4      	movs	r2, #164	; 0xa4
 800bc04:	4941      	ldr	r1, [pc, #260]	; (800bd0c <tcp_create_segment+0x134>)
 800bc06:	4840      	ldr	r0, [pc, #256]	; (800bd08 <tcp_create_segment+0x130>)
 800bc08:	f004 fcee 	bl	80105e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bc0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	f003 0304 	and.w	r3, r3, #4
 800bc18:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bc1a:	2003      	movs	r0, #3
 800bc1c:	f7fa fd9e 	bl	800675c <memp_malloc>
 800bc20:	6138      	str	r0, [r7, #16]
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d104      	bne.n	800bc32 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bc28:	68b8      	ldr	r0, [r7, #8]
 800bc2a:	f7fb fbf1 	bl	8007410 <pbuf_free>
    return NULL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e061      	b.n	800bcf6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800bc38:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	891a      	ldrh	r2, [r3, #8]
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d205      	bcs.n	800bc5e <tcp_create_segment+0x86>
 800bc52:	4b2b      	ldr	r3, [pc, #172]	; (800bd00 <tcp_create_segment+0x128>)
 800bc54:	22b0      	movs	r2, #176	; 0xb0
 800bc56:	492e      	ldr	r1, [pc, #184]	; (800bd10 <tcp_create_segment+0x138>)
 800bc58:	482b      	ldr	r0, [pc, #172]	; (800bd08 <tcp_create_segment+0x130>)
 800bc5a:	f004 fcc5 	bl	80105e8 <iprintf>
  seg->len = p->tot_len - optlen;
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	891a      	ldrh	r2, [r3, #8]
 800bc62:	7dfb      	ldrb	r3, [r7, #23]
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bc6e:	2114      	movs	r1, #20
 800bc70:	68b8      	ldr	r0, [r7, #8]
 800bc72:	f7fb fb37 	bl	80072e4 <pbuf_add_header>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d004      	beq.n	800bc86 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800bc7c:	6938      	ldr	r0, [r7, #16]
 800bc7e:	f7fc ffe9 	bl	8008c54 <tcp_seg_free>
    return NULL;
 800bc82:	2300      	movs	r3, #0
 800bc84:	e037      	b.n	800bcf6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	8ada      	ldrh	r2, [r3, #22]
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	68dc      	ldr	r4, [r3, #12]
 800bc98:	4610      	mov	r0, r2
 800bc9a:	f7fa f8d3 	bl	8005e44 <lwip_htons>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	8b1a      	ldrh	r2, [r3, #24]
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	68dc      	ldr	r4, [r3, #12]
 800bcaa:	4610      	mov	r0, r2
 800bcac:	f7fa f8ca 	bl	8005e44 <lwip_htons>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	68dc      	ldr	r4, [r3, #12]
 800bcb8:	6838      	ldr	r0, [r7, #0]
 800bcba:	f7fa f8d8 	bl	8005e6e <lwip_htonl>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bcc2:	7dfb      	ldrb	r3, [r7, #23]
 800bcc4:	089b      	lsrs	r3, r3, #2
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	3305      	adds	r3, #5
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	031b      	lsls	r3, r3, #12
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	79fb      	ldrb	r3, [r7, #7]
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	68dc      	ldr	r4, [r3, #12]
 800bcde:	4610      	mov	r0, r2
 800bce0:	f7fa f8b0 	bl	8005e44 <lwip_htons>
 800bce4:	4603      	mov	r3, r0
 800bce6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	749a      	strb	r2, [r3, #18]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	74da      	strb	r2, [r3, #19]
  return seg;
 800bcf4:	693b      	ldr	r3, [r7, #16]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	371c      	adds	r7, #28
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd90      	pop	{r4, r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	08012d54 	.word	0x08012d54
 800bd04:	08012d88 	.word	0x08012d88
 800bd08:	08012da8 	.word	0x08012da8
 800bd0c:	08012dd0 	.word	0x08012dd0
 800bd10:	08012df4 	.word	0x08012df4

0800bd14 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	607b      	str	r3, [r7, #4]
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	73fb      	strb	r3, [r7, #15]
 800bd20:	460b      	mov	r3, r1
 800bd22:	81bb      	strh	r3, [r7, #12]
 800bd24:	4613      	mov	r3, r2
 800bd26:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800bd28:	89bb      	ldrh	r3, [r7, #12]
 800bd2a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d105      	bne.n	800bd3e <tcp_pbuf_prealloc+0x2a>
 800bd32:	4b30      	ldr	r3, [pc, #192]	; (800bdf4 <tcp_pbuf_prealloc+0xe0>)
 800bd34:	22e8      	movs	r2, #232	; 0xe8
 800bd36:	4930      	ldr	r1, [pc, #192]	; (800bdf8 <tcp_pbuf_prealloc+0xe4>)
 800bd38:	4830      	ldr	r0, [pc, #192]	; (800bdfc <tcp_pbuf_prealloc+0xe8>)
 800bd3a:	f004 fc55 	bl	80105e8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800bd3e:	6a3b      	ldr	r3, [r7, #32]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d105      	bne.n	800bd50 <tcp_pbuf_prealloc+0x3c>
 800bd44:	4b2b      	ldr	r3, [pc, #172]	; (800bdf4 <tcp_pbuf_prealloc+0xe0>)
 800bd46:	22e9      	movs	r2, #233	; 0xe9
 800bd48:	492d      	ldr	r1, [pc, #180]	; (800be00 <tcp_pbuf_prealloc+0xec>)
 800bd4a:	482c      	ldr	r0, [pc, #176]	; (800bdfc <tcp_pbuf_prealloc+0xe8>)
 800bd4c:	f004 fc4c 	bl	80105e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800bd50:	89ba      	ldrh	r2, [r7, #12]
 800bd52:	897b      	ldrh	r3, [r7, #10]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d221      	bcs.n	800bd9c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bd58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd5c:	f003 0302 	and.w	r3, r3, #2
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d111      	bne.n	800bd88 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800bd64:	6a3b      	ldr	r3, [r7, #32]
 800bd66:	8b5b      	ldrh	r3, [r3, #26]
 800bd68:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d115      	bne.n	800bd9c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800bd70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d007      	beq.n	800bd88 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800bd78:	6a3b      	ldr	r3, [r7, #32]
 800bd7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d103      	bne.n	800bd88 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800bd80:	6a3b      	ldr	r3, [r7, #32]
 800bd82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d009      	beq.n	800bd9c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800bd88:	89bb      	ldrh	r3, [r7, #12]
 800bd8a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800bd8e:	f023 0203 	bic.w	r2, r3, #3
 800bd92:	897b      	ldrh	r3, [r7, #10]
 800bd94:	4293      	cmp	r3, r2
 800bd96:	bf28      	it	cs
 800bd98:	4613      	movcs	r3, r2
 800bd9a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800bd9c:	8af9      	ldrh	r1, [r7, #22]
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7fb f853 	bl	8006e50 <pbuf_alloc>
 800bdaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d101      	bne.n	800bdb6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	e019      	b.n	800bdea <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d006      	beq.n	800bdcc <tcp_pbuf_prealloc+0xb8>
 800bdbe:	4b0d      	ldr	r3, [pc, #52]	; (800bdf4 <tcp_pbuf_prealloc+0xe0>)
 800bdc0:	f240 120b 	movw	r2, #267	; 0x10b
 800bdc4:	490f      	ldr	r1, [pc, #60]	; (800be04 <tcp_pbuf_prealloc+0xf0>)
 800bdc6:	480d      	ldr	r0, [pc, #52]	; (800bdfc <tcp_pbuf_prealloc+0xe8>)
 800bdc8:	f004 fc0e 	bl	80105e8 <iprintf>
  *oversize = p->len - length;
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	895a      	ldrh	r2, [r3, #10]
 800bdd0:	89bb      	ldrh	r3, [r7, #12]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	89ba      	ldrh	r2, [r7, #12]
 800bdde:	811a      	strh	r2, [r3, #8]
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	891a      	ldrh	r2, [r3, #8]
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	815a      	strh	r2, [r3, #10]
  return p;
 800bde8:	693b      	ldr	r3, [r7, #16]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3718      	adds	r7, #24
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	08012d54 	.word	0x08012d54
 800bdf8:	08012e0c 	.word	0x08012e0c
 800bdfc:	08012da8 	.word	0x08012da8
 800be00:	08012e30 	.word	0x08012e30
 800be04:	08012e50 	.word	0x08012e50

0800be08 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	460b      	mov	r3, r1
 800be12:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d106      	bne.n	800be28 <tcp_write_checks+0x20>
 800be1a:	4b33      	ldr	r3, [pc, #204]	; (800bee8 <tcp_write_checks+0xe0>)
 800be1c:	f240 1233 	movw	r2, #307	; 0x133
 800be20:	4932      	ldr	r1, [pc, #200]	; (800beec <tcp_write_checks+0xe4>)
 800be22:	4833      	ldr	r0, [pc, #204]	; (800bef0 <tcp_write_checks+0xe8>)
 800be24:	f004 fbe0 	bl	80105e8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	7d1b      	ldrb	r3, [r3, #20]
 800be2c:	2b04      	cmp	r3, #4
 800be2e:	d00e      	beq.n	800be4e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800be34:	2b07      	cmp	r3, #7
 800be36:	d00a      	beq.n	800be4e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d006      	beq.n	800be4e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800be44:	2b03      	cmp	r3, #3
 800be46:	d002      	beq.n	800be4e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800be48:	f06f 030a 	mvn.w	r3, #10
 800be4c:	e048      	b.n	800bee0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800be4e:	887b      	ldrh	r3, [r7, #2]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d101      	bne.n	800be58 <tcp_write_checks+0x50>
    return ERR_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	e043      	b.n	800bee0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800be5e:	887a      	ldrh	r2, [r7, #2]
 800be60:	429a      	cmp	r2, r3
 800be62:	d909      	bls.n	800be78 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	8b5b      	ldrh	r3, [r3, #26]
 800be68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800be72:	f04f 33ff 	mov.w	r3, #4294967295
 800be76:	e033      	b.n	800bee0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800be7e:	2b08      	cmp	r3, #8
 800be80:	d909      	bls.n	800be96 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	8b5b      	ldrh	r3, [r3, #26]
 800be86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800be90:	f04f 33ff 	mov.w	r3, #4294967295
 800be94:	e024      	b.n	800bee0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00f      	beq.n	800bec0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d11a      	bne.n	800bede <tcp_write_checks+0xd6>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beac:	2b00      	cmp	r3, #0
 800beae:	d116      	bne.n	800bede <tcp_write_checks+0xd6>
 800beb0:	4b0d      	ldr	r3, [pc, #52]	; (800bee8 <tcp_write_checks+0xe0>)
 800beb2:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800beb6:	490f      	ldr	r1, [pc, #60]	; (800bef4 <tcp_write_checks+0xec>)
 800beb8:	480d      	ldr	r0, [pc, #52]	; (800bef0 <tcp_write_checks+0xe8>)
 800beba:	f004 fb95 	bl	80105e8 <iprintf>
 800bebe:	e00e      	b.n	800bede <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d103      	bne.n	800bed0 <tcp_write_checks+0xc8>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800becc:	2b00      	cmp	r3, #0
 800bece:	d006      	beq.n	800bede <tcp_write_checks+0xd6>
 800bed0:	4b05      	ldr	r3, [pc, #20]	; (800bee8 <tcp_write_checks+0xe0>)
 800bed2:	f240 1259 	movw	r2, #345	; 0x159
 800bed6:	4908      	ldr	r1, [pc, #32]	; (800bef8 <tcp_write_checks+0xf0>)
 800bed8:	4805      	ldr	r0, [pc, #20]	; (800bef0 <tcp_write_checks+0xe8>)
 800beda:	f004 fb85 	bl	80105e8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	08012d54 	.word	0x08012d54
 800beec:	08012e64 	.word	0x08012e64
 800bef0:	08012da8 	.word	0x08012da8
 800bef4:	08012e84 	.word	0x08012e84
 800bef8:	08012ec0 	.word	0x08012ec0

0800befc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800befc:	b590      	push	{r4, r7, lr}
 800befe:	b09b      	sub	sp, #108	; 0x6c
 800bf00:	af04      	add	r7, sp, #16
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	4611      	mov	r1, r2
 800bf08:	461a      	mov	r2, r3
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	80fb      	strh	r3, [r7, #6]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bf16:	2300      	movs	r3, #0
 800bf18:	653b      	str	r3, [r7, #80]	; 0x50
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf1e:	2300      	movs	r3, #0
 800bf20:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf22:	2300      	movs	r3, #0
 800bf24:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800bf26:	2300      	movs	r3, #0
 800bf28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800bf32:	2300      	movs	r3, #0
 800bf34:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800bf36:	2300      	movs	r3, #0
 800bf38:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d109      	bne.n	800bf58 <tcp_write+0x5c>
 800bf44:	4ba5      	ldr	r3, [pc, #660]	; (800c1dc <tcp_write+0x2e0>)
 800bf46:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800bf4a:	49a5      	ldr	r1, [pc, #660]	; (800c1e0 <tcp_write+0x2e4>)
 800bf4c:	48a5      	ldr	r0, [pc, #660]	; (800c1e4 <tcp_write+0x2e8>)
 800bf4e:	f004 fb4b 	bl	80105e8 <iprintf>
 800bf52:	f06f 030f 	mvn.w	r3, #15
 800bf56:	e32c      	b.n	800c5b2 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf5e:	085b      	lsrs	r3, r3, #1
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf66:	4293      	cmp	r3, r2
 800bf68:	bf28      	it	cs
 800bf6a:	4613      	movcs	r3, r2
 800bf6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800bf6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d102      	bne.n	800bf7a <tcp_write+0x7e>
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf78:	e000      	b.n	800bf7c <tcp_write+0x80>
 800bf7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf7c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d109      	bne.n	800bf98 <tcp_write+0x9c>
 800bf84:	4b95      	ldr	r3, [pc, #596]	; (800c1dc <tcp_write+0x2e0>)
 800bf86:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800bf8a:	4997      	ldr	r1, [pc, #604]	; (800c1e8 <tcp_write+0x2ec>)
 800bf8c:	4895      	ldr	r0, [pc, #596]	; (800c1e4 <tcp_write+0x2e8>)
 800bf8e:	f004 fb2b 	bl	80105e8 <iprintf>
 800bf92:	f06f 030f 	mvn.w	r3, #15
 800bf96:	e30c      	b.n	800c5b2 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800bf98:	88fb      	ldrh	r3, [r7, #6]
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f7ff ff33 	bl	800be08 <tcp_write_checks>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800bfa8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d002      	beq.n	800bfb6 <tcp_write+0xba>
    return err;
 800bfb0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bfb4:	e2fd      	b.n	800c5b2 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bfbc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 80f7 	beq.w	800c1be <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfd4:	653b      	str	r3, [r7, #80]	; 0x50
 800bfd6:	e002      	b.n	800bfde <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800bfd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bfde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d1f8      	bne.n	800bfd8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bfe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfe8:	7a9b      	ldrb	r3, [r3, #10]
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	f003 0304 	and.w	r3, r3, #4
 800bff2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bff4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bff8:	891b      	ldrh	r3, [r3, #8]
 800bffa:	4619      	mov	r1, r3
 800bffc:	8c3b      	ldrh	r3, [r7, #32]
 800bffe:	440b      	add	r3, r1
 800c000:	429a      	cmp	r2, r3
 800c002:	da06      	bge.n	800c012 <tcp_write+0x116>
 800c004:	4b75      	ldr	r3, [pc, #468]	; (800c1dc <tcp_write+0x2e0>)
 800c006:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c00a:	4978      	ldr	r1, [pc, #480]	; (800c1ec <tcp_write+0x2f0>)
 800c00c:	4875      	ldr	r0, [pc, #468]	; (800c1e4 <tcp_write+0x2e8>)
 800c00e:	f004 faeb 	bl	80105e8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c014:	891a      	ldrh	r2, [r3, #8]
 800c016:	8c3b      	ldrh	r3, [r7, #32]
 800c018:	4413      	add	r3, r2
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c028:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c02a:	8a7b      	ldrh	r3, [r7, #18]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d027      	beq.n	800c080 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c030:	8a7b      	ldrh	r3, [r7, #18]
 800c032:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c034:	429a      	cmp	r2, r3
 800c036:	d206      	bcs.n	800c046 <tcp_write+0x14a>
 800c038:	4b68      	ldr	r3, [pc, #416]	; (800c1dc <tcp_write+0x2e0>)
 800c03a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c03e:	496c      	ldr	r1, [pc, #432]	; (800c1f0 <tcp_write+0x2f4>)
 800c040:	4868      	ldr	r0, [pc, #416]	; (800c1e4 <tcp_write+0x2e8>)
 800c042:	f004 fad1 	bl	80105e8 <iprintf>
      seg = last_unsent;
 800c046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c048:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c04a:	8a7b      	ldrh	r3, [r7, #18]
 800c04c:	88fa      	ldrh	r2, [r7, #6]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d901      	bls.n	800c056 <tcp_write+0x15a>
 800c052:	8a7b      	ldrh	r3, [r7, #18]
 800c054:	e000      	b.n	800c058 <tcp_write+0x15c>
 800c056:	88fb      	ldrh	r3, [r7, #6]
 800c058:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c05a:	4293      	cmp	r3, r2
 800c05c:	bfa8      	it	ge
 800c05e:	4613      	movge	r3, r2
 800c060:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c062:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c066:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c068:	4413      	add	r3, r2
 800c06a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c06e:	8a7a      	ldrh	r2, [r7, #18]
 800c070:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	b29b      	uxth	r3, r3
 800c076:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c078:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c07a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c07c:	1ad3      	subs	r3, r2, r3
 800c07e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c080:	8a7b      	ldrh	r3, [r7, #18]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00b      	beq.n	800c09e <tcp_write+0x1a2>
 800c086:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c08a:	88fb      	ldrh	r3, [r7, #6]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d006      	beq.n	800c09e <tcp_write+0x1a2>
 800c090:	4b52      	ldr	r3, [pc, #328]	; (800c1dc <tcp_write+0x2e0>)
 800c092:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c096:	4957      	ldr	r1, [pc, #348]	; (800c1f4 <tcp_write+0x2f8>)
 800c098:	4852      	ldr	r0, [pc, #328]	; (800c1e4 <tcp_write+0x2e8>)
 800c09a:	f004 faa5 	bl	80105e8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c09e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c0a2:	88fb      	ldrh	r3, [r7, #6]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	f080 8168 	bcs.w	800c37a <tcp_write+0x47e>
 800c0aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f000 8164 	beq.w	800c37a <tcp_write+0x47e>
 800c0b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0b4:	891b      	ldrh	r3, [r3, #8]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f000 815f 	beq.w	800c37a <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c0bc:	88fa      	ldrh	r2, [r7, #6]
 800c0be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0c2:	1ad2      	subs	r2, r2, r3
 800c0c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	bfa8      	it	ge
 800c0ca:	4613      	movge	r3, r2
 800c0cc:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0d0:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c0d2:	797b      	ldrb	r3, [r7, #5]
 800c0d4:	f003 0301 	and.w	r3, r3, #1
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d027      	beq.n	800c12c <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c0dc:	f107 0012 	add.w	r0, r7, #18
 800c0e0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c0e2:	8bf9      	ldrh	r1, [r7, #30]
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	9302      	str	r3, [sp, #8]
 800c0e8:	797b      	ldrb	r3, [r7, #5]
 800c0ea:	9301      	str	r3, [sp, #4]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	f7ff fe0e 	bl	800bd14 <tcp_pbuf_prealloc>
 800c0f8:	6578      	str	r0, [r7, #84]	; 0x54
 800c0fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f000 8226 	beq.w	800c54e <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c104:	6858      	ldr	r0, [r3, #4]
 800c106:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	4413      	add	r3, r2
 800c10e:	8bfa      	ldrh	r2, [r7, #30]
 800c110:	4619      	mov	r1, r3
 800c112:	f004 fa56 	bl	80105c2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c116:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c118:	f7fb fa02 	bl	8007520 <pbuf_clen>
 800c11c:	4603      	mov	r3, r0
 800c11e:	461a      	mov	r2, r3
 800c120:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c124:	4413      	add	r3, r2
 800c126:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c12a:	e041      	b.n	800c1b0 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	637b      	str	r3, [r7, #52]	; 0x34
 800c132:	e002      	b.n	800c13a <tcp_write+0x23e>
 800c134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	637b      	str	r3, [r7, #52]	; 0x34
 800c13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1f8      	bne.n	800c134 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c144:	7b1b      	ldrb	r3, [r3, #12]
 800c146:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d115      	bne.n	800c17a <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c154:	8952      	ldrh	r2, [r2, #10]
 800c156:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d10d      	bne.n	800c17a <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c15e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c162:	2b00      	cmp	r3, #0
 800c164:	d006      	beq.n	800c174 <tcp_write+0x278>
 800c166:	4b1d      	ldr	r3, [pc, #116]	; (800c1dc <tcp_write+0x2e0>)
 800c168:	f240 2231 	movw	r2, #561	; 0x231
 800c16c:	4922      	ldr	r1, [pc, #136]	; (800c1f8 <tcp_write+0x2fc>)
 800c16e:	481d      	ldr	r0, [pc, #116]	; (800c1e4 <tcp_write+0x2e8>)
 800c170:	f004 fa3a 	bl	80105e8 <iprintf>
          extendlen = seglen;
 800c174:	8bfb      	ldrh	r3, [r7, #30]
 800c176:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c178:	e01a      	b.n	800c1b0 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c17a:	8bfb      	ldrh	r3, [r7, #30]
 800c17c:	2201      	movs	r2, #1
 800c17e:	4619      	mov	r1, r3
 800c180:	2000      	movs	r0, #0
 800c182:	f7fa fe65 	bl	8006e50 <pbuf_alloc>
 800c186:	6578      	str	r0, [r7, #84]	; 0x54
 800c188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f000 81e1 	beq.w	800c552 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c190:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	441a      	add	r2, r3
 800c198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c19a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c19c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c19e:	f7fb f9bf 	bl	8007520 <pbuf_clen>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c1aa:	4413      	add	r3, r2
 800c1ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c1b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c1b4:	8bfb      	ldrh	r3, [r7, #30]
 800c1b6:	4413      	add	r3, r2
 800c1b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c1bc:	e0dd      	b.n	800c37a <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f000 80d8 	beq.w	800c37a <tcp_write+0x47e>
 800c1ca:	4b04      	ldr	r3, [pc, #16]	; (800c1dc <tcp_write+0x2e0>)
 800c1cc:	f240 224b 	movw	r2, #587	; 0x24b
 800c1d0:	490a      	ldr	r1, [pc, #40]	; (800c1fc <tcp_write+0x300>)
 800c1d2:	4804      	ldr	r0, [pc, #16]	; (800c1e4 <tcp_write+0x2e8>)
 800c1d4:	f004 fa08 	bl	80105e8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c1d8:	e0cf      	b.n	800c37a <tcp_write+0x47e>
 800c1da:	bf00      	nop
 800c1dc:	08012d54 	.word	0x08012d54
 800c1e0:	08012ef4 	.word	0x08012ef4
 800c1e4:	08012da8 	.word	0x08012da8
 800c1e8:	08012f0c 	.word	0x08012f0c
 800c1ec:	08012f40 	.word	0x08012f40
 800c1f0:	08012f58 	.word	0x08012f58
 800c1f4:	08012f78 	.word	0x08012f78
 800c1f8:	08012f98 	.word	0x08012f98
 800c1fc:	08012fc4 	.word	0x08012fc4
    struct pbuf *p;
    u16_t left = len - pos;
 800c200:	88fa      	ldrh	r2, [r7, #6]
 800c202:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c206:	1ad3      	subs	r3, r2, r3
 800c208:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c20a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c20e:	b29b      	uxth	r3, r3
 800c210:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c216:	8b7a      	ldrh	r2, [r7, #26]
 800c218:	8bbb      	ldrh	r3, [r7, #28]
 800c21a:	4293      	cmp	r3, r2
 800c21c:	bf28      	it	cs
 800c21e:	4613      	movcs	r3, r2
 800c220:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c222:	797b      	ldrb	r3, [r7, #5]
 800c224:	f003 0301 	and.w	r3, r3, #1
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d036      	beq.n	800c29a <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c22c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c230:	b29a      	uxth	r2, r3
 800c232:	8b3b      	ldrh	r3, [r7, #24]
 800c234:	4413      	add	r3, r2
 800c236:	b299      	uxth	r1, r3
 800c238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	bf0c      	ite	eq
 800c23e:	2301      	moveq	r3, #1
 800c240:	2300      	movne	r3, #0
 800c242:	b2db      	uxtb	r3, r3
 800c244:	f107 0012 	add.w	r0, r7, #18
 800c248:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c24a:	9302      	str	r3, [sp, #8]
 800c24c:	797b      	ldrb	r3, [r7, #5]
 800c24e:	9301      	str	r3, [sp, #4]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	4603      	mov	r3, r0
 800c256:	2036      	movs	r0, #54	; 0x36
 800c258:	f7ff fd5c 	bl	800bd14 <tcp_pbuf_prealloc>
 800c25c:	6338      	str	r0, [r7, #48]	; 0x30
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	2b00      	cmp	r3, #0
 800c262:	f000 8178 	beq.w	800c556 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c268:	895b      	ldrh	r3, [r3, #10]
 800c26a:	8b3a      	ldrh	r2, [r7, #24]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d906      	bls.n	800c27e <tcp_write+0x382>
 800c270:	4b8c      	ldr	r3, [pc, #560]	; (800c4a4 <tcp_write+0x5a8>)
 800c272:	f240 2267 	movw	r2, #615	; 0x267
 800c276:	498c      	ldr	r1, [pc, #560]	; (800c4a8 <tcp_write+0x5ac>)
 800c278:	488c      	ldr	r0, [pc, #560]	; (800c4ac <tcp_write+0x5b0>)
 800c27a:	f004 f9b5 	bl	80105e8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	685a      	ldr	r2, [r3, #4]
 800c282:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c286:	18d0      	adds	r0, r2, r3
 800c288:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	4413      	add	r3, r2
 800c290:	8b3a      	ldrh	r2, [r7, #24]
 800c292:	4619      	mov	r1, r3
 800c294:	f004 f995 	bl	80105c2 <memcpy>
 800c298:	e02f      	b.n	800c2fa <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c29a:	8a7b      	ldrh	r3, [r7, #18]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d006      	beq.n	800c2ae <tcp_write+0x3b2>
 800c2a0:	4b80      	ldr	r3, [pc, #512]	; (800c4a4 <tcp_write+0x5a8>)
 800c2a2:	f240 2271 	movw	r2, #625	; 0x271
 800c2a6:	4982      	ldr	r1, [pc, #520]	; (800c4b0 <tcp_write+0x5b4>)
 800c2a8:	4880      	ldr	r0, [pc, #512]	; (800c4ac <tcp_write+0x5b0>)
 800c2aa:	f004 f99d 	bl	80105e8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c2ae:	8b3b      	ldrh	r3, [r7, #24]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	2036      	movs	r0, #54	; 0x36
 800c2b6:	f7fa fdcb 	bl	8006e50 <pbuf_alloc>
 800c2ba:	6178      	str	r0, [r7, #20]
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 814b 	beq.w	800c55a <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c2c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c2c8:	68ba      	ldr	r2, [r7, #8]
 800c2ca:	441a      	add	r2, r3
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c2d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c2da:	4619      	mov	r1, r3
 800c2dc:	2036      	movs	r0, #54	; 0x36
 800c2de:	f7fa fdb7 	bl	8006e50 <pbuf_alloc>
 800c2e2:	6338      	str	r0, [r7, #48]	; 0x30
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d103      	bne.n	800c2f2 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c2ea:	6978      	ldr	r0, [r7, #20]
 800c2ec:	f7fb f890 	bl	8007410 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c2f0:	e136      	b.n	800c560 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c2f2:	6979      	ldr	r1, [r7, #20]
 800c2f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2f6:	f7fb f94d 	bl	8007594 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c2fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2fc:	f7fb f910 	bl	8007520 <pbuf_clen>
 800c300:	4603      	mov	r3, r0
 800c302:	461a      	mov	r2, r3
 800c304:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c308:	4413      	add	r3, r2
 800c30a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c30e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c312:	2b09      	cmp	r3, #9
 800c314:	d903      	bls.n	800c31e <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c318:	f7fb f87a 	bl	8007410 <pbuf_free>
      goto memerr;
 800c31c:	e120      	b.n	800c560 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c322:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c326:	441a      	add	r2, r3
 800c328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	4613      	mov	r3, r2
 800c330:	2200      	movs	r2, #0
 800c332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f7ff fc4f 	bl	800bbd8 <tcp_create_segment>
 800c33a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c33c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 810d 	beq.w	800c55e <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c346:	2b00      	cmp	r3, #0
 800c348:	d102      	bne.n	800c350 <tcp_write+0x454>
      queue = seg;
 800c34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c34c:	647b      	str	r3, [r7, #68]	; 0x44
 800c34e:	e00c      	b.n	800c36a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c352:	2b00      	cmp	r3, #0
 800c354:	d106      	bne.n	800c364 <tcp_write+0x468>
 800c356:	4b53      	ldr	r3, [pc, #332]	; (800c4a4 <tcp_write+0x5a8>)
 800c358:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c35c:	4955      	ldr	r1, [pc, #340]	; (800c4b4 <tcp_write+0x5b8>)
 800c35e:	4853      	ldr	r0, [pc, #332]	; (800c4ac <tcp_write+0x5b0>)
 800c360:	f004 f942 	bl	80105e8 <iprintf>
      prev_seg->next = seg;
 800c364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c368:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c36c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c36e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c372:	8b3b      	ldrh	r3, [r7, #24]
 800c374:	4413      	add	r3, r2
 800c376:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800c37a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c37e:	88fb      	ldrh	r3, [r7, #6]
 800c380:	429a      	cmp	r2, r3
 800c382:	f4ff af3d 	bcc.w	800c200 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c386:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d02c      	beq.n	800c3e6 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c392:	e01e      	b.n	800c3d2 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	891a      	ldrh	r2, [r3, #8]
 800c398:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c39a:	4413      	add	r3, r2
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d110      	bne.n	800c3cc <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3b0:	8952      	ldrh	r2, [r2, #10]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c3b6:	68b9      	ldr	r1, [r7, #8]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f004 f902 	bl	80105c2 <memcpy>
        p->len += oversize_used;
 800c3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c0:	895a      	ldrh	r2, [r3, #10]
 800c3c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c3c4:	4413      	add	r3, r2
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1dd      	bne.n	800c394 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800c3d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3da:	891a      	ldrh	r2, [r3, #8]
 800c3dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c3de:	4413      	add	r3, r2
 800c3e0:	b29a      	uxth	r2, r3
 800c3e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3e4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c3e6:	8a7a      	ldrh	r2, [r7, #18]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c3ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d018      	beq.n	800c426 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d106      	bne.n	800c408 <tcp_write+0x50c>
 800c3fa:	4b2a      	ldr	r3, [pc, #168]	; (800c4a4 <tcp_write+0x5a8>)
 800c3fc:	f240 22e1 	movw	r2, #737	; 0x2e1
 800c400:	492d      	ldr	r1, [pc, #180]	; (800c4b8 <tcp_write+0x5bc>)
 800c402:	482a      	ldr	r0, [pc, #168]	; (800c4ac <tcp_write+0x5b0>)
 800c404:	f004 f8f0 	bl	80105e8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fb f8c0 	bl	8007594 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c416:	891a      	ldrh	r2, [r3, #8]
 800c418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c41a:	891b      	ldrh	r3, [r3, #8]
 800c41c:	4413      	add	r3, r2
 800c41e:	b29a      	uxth	r2, r3
 800c420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c422:	811a      	strh	r2, [r3, #8]
 800c424:	e037      	b.n	800c496 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800c426:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d034      	beq.n	800c496 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c42c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d003      	beq.n	800c43a <tcp_write+0x53e>
 800c432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d106      	bne.n	800c448 <tcp_write+0x54c>
 800c43a:	4b1a      	ldr	r3, [pc, #104]	; (800c4a4 <tcp_write+0x5a8>)
 800c43c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c440:	491e      	ldr	r1, [pc, #120]	; (800c4bc <tcp_write+0x5c0>)
 800c442:	481a      	ldr	r0, [pc, #104]	; (800c4ac <tcp_write+0x5b0>)
 800c444:	f004 f8d0 	bl	80105e8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c44e:	e009      	b.n	800c464 <tcp_write+0x568>
      p->tot_len += extendlen;
 800c450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c452:	891a      	ldrh	r2, [r3, #8]
 800c454:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c456:	4413      	add	r3, r2
 800c458:	b29a      	uxth	r2, r3
 800c45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	62bb      	str	r3, [r7, #40]	; 0x28
 800c464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1f1      	bne.n	800c450 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800c46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46e:	891a      	ldrh	r2, [r3, #8]
 800c470:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c472:	4413      	add	r3, r2
 800c474:	b29a      	uxth	r2, r3
 800c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c478:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47c:	895a      	ldrh	r2, [r3, #10]
 800c47e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c480:	4413      	add	r3, r2
 800c482:	b29a      	uxth	r2, r3
 800c484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c486:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c48a:	891a      	ldrh	r2, [r3, #8]
 800c48c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c48e:	4413      	add	r3, r2
 800c490:	b29a      	uxth	r2, r3
 800c492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c494:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d111      	bne.n	800c4c0 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4a0:	66da      	str	r2, [r3, #108]	; 0x6c
 800c4a2:	e010      	b.n	800c4c6 <tcp_write+0x5ca>
 800c4a4:	08012d54 	.word	0x08012d54
 800c4a8:	08012ff4 	.word	0x08012ff4
 800c4ac:	08012da8 	.word	0x08012da8
 800c4b0:	08013034 	.word	0x08013034
 800c4b4:	08013044 	.word	0x08013044
 800c4b8:	08013058 	.word	0x08013058
 800c4bc:	08013090 	.word	0x08013090
  } else {
    last_unsent->next = queue;
 800c4c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4c4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c4ca:	88fb      	ldrh	r3, [r7, #6]
 800c4cc:	441a      	add	r2, r3
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c4d8:	88fb      	ldrh	r3, [r7, #6]
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c4ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00e      	beq.n	800c516 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10a      	bne.n	800c516 <tcp_write+0x61a>
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d106      	bne.n	800c516 <tcp_write+0x61a>
 800c508:	4b2c      	ldr	r3, [pc, #176]	; (800c5bc <tcp_write+0x6c0>)
 800c50a:	f240 3213 	movw	r2, #787	; 0x313
 800c50e:	492c      	ldr	r1, [pc, #176]	; (800c5c0 <tcp_write+0x6c4>)
 800c510:	482c      	ldr	r0, [pc, #176]	; (800c5c4 <tcp_write+0x6c8>)
 800c512:	f004 f869 	bl	80105e8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d016      	beq.n	800c54a <tcp_write+0x64e>
 800c51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d012      	beq.n	800c54a <tcp_write+0x64e>
 800c524:	797b      	ldrb	r3, [r7, #5]
 800c526:	f003 0302 	and.w	r3, r3, #2
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10d      	bne.n	800c54a <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c52e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	899b      	ldrh	r3, [r3, #12]
 800c534:	b29c      	uxth	r4, r3
 800c536:	2008      	movs	r0, #8
 800c538:	f7f9 fc84 	bl	8005e44 <lwip_htons>
 800c53c:	4603      	mov	r3, r0
 800c53e:	461a      	mov	r2, r3
 800c540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	4322      	orrs	r2, r4
 800c546:	b292      	uxth	r2, r2
 800c548:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	e031      	b.n	800c5b2 <tcp_write+0x6b6>
          goto memerr;
 800c54e:	bf00      	nop
 800c550:	e006      	b.n	800c560 <tcp_write+0x664>
            goto memerr;
 800c552:	bf00      	nop
 800c554:	e004      	b.n	800c560 <tcp_write+0x664>
        goto memerr;
 800c556:	bf00      	nop
 800c558:	e002      	b.n	800c560 <tcp_write+0x664>
        goto memerr;
 800c55a:	bf00      	nop
 800c55c:	e000      	b.n	800c560 <tcp_write+0x664>
      goto memerr;
 800c55e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	8b5b      	ldrh	r3, [r3, #26]
 800c564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c568:	b29a      	uxth	r2, r3
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c56e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c570:	2b00      	cmp	r3, #0
 800c572:	d002      	beq.n	800c57a <tcp_write+0x67e>
    pbuf_free(concat_p);
 800c574:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c576:	f7fa ff4b 	bl	8007410 <pbuf_free>
  }
  if (queue != NULL) {
 800c57a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <tcp_write+0x68a>
    tcp_segs_free(queue);
 800c580:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c582:	f7fc fb53 	bl	8008c2c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00e      	beq.n	800c5ae <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10a      	bne.n	800c5ae <tcp_write+0x6b2>
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d106      	bne.n	800c5ae <tcp_write+0x6b2>
 800c5a0:	4b06      	ldr	r3, [pc, #24]	; (800c5bc <tcp_write+0x6c0>)
 800c5a2:	f44f 724a 	mov.w	r2, #808	; 0x328
 800c5a6:	4906      	ldr	r1, [pc, #24]	; (800c5c0 <tcp_write+0x6c4>)
 800c5a8:	4806      	ldr	r0, [pc, #24]	; (800c5c4 <tcp_write+0x6c8>)
 800c5aa:	f004 f81d 	bl	80105e8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c5ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	375c      	adds	r7, #92	; 0x5c
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd90      	pop	{r4, r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	08012d54 	.word	0x08012d54
 800c5c0:	080130c8 	.word	0x080130c8
 800c5c4:	08012da8 	.word	0x08012da8

0800c5c8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c5c8:	b590      	push	{r4, r7, lr}
 800c5ca:	b08b      	sub	sp, #44	; 0x2c
 800c5cc:	af02      	add	r7, sp, #8
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	61fb      	str	r3, [r7, #28]
 800c5d8:	2300      	movs	r3, #0
 800c5da:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d106      	bne.n	800c5f4 <tcp_split_unsent_seg+0x2c>
 800c5e6:	4b95      	ldr	r3, [pc, #596]	; (800c83c <tcp_split_unsent_seg+0x274>)
 800c5e8:	f240 324b 	movw	r2, #843	; 0x34b
 800c5ec:	4994      	ldr	r1, [pc, #592]	; (800c840 <tcp_split_unsent_seg+0x278>)
 800c5ee:	4895      	ldr	r0, [pc, #596]	; (800c844 <tcp_split_unsent_seg+0x27c>)
 800c5f0:	f003 fffa 	bl	80105e8 <iprintf>

  useg = pcb->unsent;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5f8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d102      	bne.n	800c606 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c600:	f04f 33ff 	mov.w	r3, #4294967295
 800c604:	e116      	b.n	800c834 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c606:	887b      	ldrh	r3, [r7, #2]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d109      	bne.n	800c620 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c60c:	4b8b      	ldr	r3, [pc, #556]	; (800c83c <tcp_split_unsent_seg+0x274>)
 800c60e:	f240 3253 	movw	r2, #851	; 0x353
 800c612:	498d      	ldr	r1, [pc, #564]	; (800c848 <tcp_split_unsent_seg+0x280>)
 800c614:	488b      	ldr	r0, [pc, #556]	; (800c844 <tcp_split_unsent_seg+0x27c>)
 800c616:	f003 ffe7 	bl	80105e8 <iprintf>
    return ERR_VAL;
 800c61a:	f06f 0305 	mvn.w	r3, #5
 800c61e:	e109      	b.n	800c834 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	891b      	ldrh	r3, [r3, #8]
 800c624:	887a      	ldrh	r2, [r7, #2]
 800c626:	429a      	cmp	r2, r3
 800c628:	d301      	bcc.n	800c62e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c62a:	2300      	movs	r3, #0
 800c62c:	e102      	b.n	800c834 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c632:	887a      	ldrh	r2, [r7, #2]
 800c634:	429a      	cmp	r2, r3
 800c636:	d906      	bls.n	800c646 <tcp_split_unsent_seg+0x7e>
 800c638:	4b80      	ldr	r3, [pc, #512]	; (800c83c <tcp_split_unsent_seg+0x274>)
 800c63a:	f240 325b 	movw	r2, #859	; 0x35b
 800c63e:	4983      	ldr	r1, [pc, #524]	; (800c84c <tcp_split_unsent_seg+0x284>)
 800c640:	4880      	ldr	r0, [pc, #512]	; (800c844 <tcp_split_unsent_seg+0x27c>)
 800c642:	f003 ffd1 	bl	80105e8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	891b      	ldrh	r3, [r3, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d106      	bne.n	800c65c <tcp_split_unsent_seg+0x94>
 800c64e:	4b7b      	ldr	r3, [pc, #492]	; (800c83c <tcp_split_unsent_seg+0x274>)
 800c650:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c654:	497e      	ldr	r1, [pc, #504]	; (800c850 <tcp_split_unsent_seg+0x288>)
 800c656:	487b      	ldr	r0, [pc, #492]	; (800c844 <tcp_split_unsent_seg+0x27c>)
 800c658:	f003 ffc6 	bl	80105e8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	7a9b      	ldrb	r3, [r3, #10]
 800c660:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c662:	7bfb      	ldrb	r3, [r7, #15]
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	b2db      	uxtb	r3, r3
 800c668:	f003 0304 	and.w	r3, r3, #4
 800c66c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	891a      	ldrh	r2, [r3, #8]
 800c672:	887b      	ldrh	r3, [r7, #2]
 800c674:	1ad3      	subs	r3, r2, r3
 800c676:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c678:	7bbb      	ldrb	r3, [r7, #14]
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	89bb      	ldrh	r3, [r7, #12]
 800c67e:	4413      	add	r3, r2
 800c680:	b29b      	uxth	r3, r3
 800c682:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c686:	4619      	mov	r1, r3
 800c688:	2036      	movs	r0, #54	; 0x36
 800c68a:	f7fa fbe1 	bl	8006e50 <pbuf_alloc>
 800c68e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	2b00      	cmp	r3, #0
 800c694:	f000 80b7 	beq.w	800c806 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	891a      	ldrh	r2, [r3, #8]
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	891b      	ldrh	r3, [r3, #8]
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	887b      	ldrh	r3, [r7, #2]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	6858      	ldr	r0, [r3, #4]
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	685a      	ldr	r2, [r3, #4]
 800c6b4:	7bbb      	ldrb	r3, [r7, #14]
 800c6b6:	18d1      	adds	r1, r2, r3
 800c6b8:	897b      	ldrh	r3, [r7, #10]
 800c6ba:	89ba      	ldrh	r2, [r7, #12]
 800c6bc:	f7fb f892 	bl	80077e4 <pbuf_copy_partial>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	89bb      	ldrh	r3, [r7, #12]
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	f040 809f 	bne.w	800c80a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	899b      	ldrh	r3, [r3, #12]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7f9 fbb5 	bl	8005e44 <lwip_htons>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6e2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c6e8:	7efb      	ldrb	r3, [r7, #27]
 800c6ea:	f003 0308 	and.w	r3, r3, #8
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d007      	beq.n	800c702 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c6f2:	7efb      	ldrb	r3, [r7, #27]
 800c6f4:	f023 0308 	bic.w	r3, r3, #8
 800c6f8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c6fa:	7ebb      	ldrb	r3, [r7, #26]
 800c6fc:	f043 0308 	orr.w	r3, r3, #8
 800c700:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c702:	7efb      	ldrb	r3, [r7, #27]
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d007      	beq.n	800c71c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c70c:	7efb      	ldrb	r3, [r7, #27]
 800c70e:	f023 0301 	bic.w	r3, r3, #1
 800c712:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c714:	7ebb      	ldrb	r3, [r7, #26]
 800c716:	f043 0301 	orr.w	r3, r3, #1
 800c71a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	4618      	mov	r0, r3
 800c724:	f7f9 fba3 	bl	8005e6e <lwip_htonl>
 800c728:	4602      	mov	r2, r0
 800c72a:	887b      	ldrh	r3, [r7, #2]
 800c72c:	18d1      	adds	r1, r2, r3
 800c72e:	7eba      	ldrb	r2, [r7, #26]
 800c730:	7bfb      	ldrb	r3, [r7, #15]
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	460b      	mov	r3, r1
 800c736:	6939      	ldr	r1, [r7, #16]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f7ff fa4d 	bl	800bbd8 <tcp_create_segment>
 800c73e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d063      	beq.n	800c80e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fa fee8 	bl	8007520 <pbuf_clen>
 800c750:	4603      	mov	r3, r0
 800c752:	461a      	mov	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c75a:	1a9b      	subs	r3, r3, r2
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	6858      	ldr	r0, [r3, #4]
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	891a      	ldrh	r2, [r3, #8]
 800c76e:	89bb      	ldrh	r3, [r7, #12]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	b29b      	uxth	r3, r3
 800c774:	4619      	mov	r1, r3
 800c776:	f7fa fcc5 	bl	8007104 <pbuf_realloc>
  useg->len -= remainder;
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	891a      	ldrh	r2, [r3, #8]
 800c77e:	89bb      	ldrh	r3, [r7, #12]
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	b29a      	uxth	r2, r3
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	899b      	ldrh	r3, [r3, #12]
 800c78e:	b29c      	uxth	r4, r3
 800c790:	7efb      	ldrb	r3, [r7, #27]
 800c792:	b29b      	uxth	r3, r3
 800c794:	4618      	mov	r0, r3
 800c796:	f7f9 fb55 	bl	8005e44 <lwip_htons>
 800c79a:	4603      	mov	r3, r0
 800c79c:	461a      	mov	r2, r3
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	4322      	orrs	r2, r4
 800c7a4:	b292      	uxth	r2, r2
 800c7a6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fa feb7 	bl	8007520 <pbuf_clen>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7bc:	4413      	add	r3, r2
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fa fea8 	bl	8007520 <pbuf_clen>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7da:	4413      	add	r3, r2
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	69fa      	ldr	r2, [r7, #28]
 800c7f0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d103      	bne.n	800c802 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	e016      	b.n	800c834 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c806:	bf00      	nop
 800c808:	e002      	b.n	800c810 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c80a:	bf00      	nop
 800c80c:	e000      	b.n	800c810 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c80e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d006      	beq.n	800c824 <tcp_split_unsent_seg+0x25c>
 800c816:	4b09      	ldr	r3, [pc, #36]	; (800c83c <tcp_split_unsent_seg+0x274>)
 800c818:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c81c:	490d      	ldr	r1, [pc, #52]	; (800c854 <tcp_split_unsent_seg+0x28c>)
 800c81e:	4809      	ldr	r0, [pc, #36]	; (800c844 <tcp_split_unsent_seg+0x27c>)
 800c820:	f003 fee2 	bl	80105e8 <iprintf>
  if (p != NULL) {
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d002      	beq.n	800c830 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c82a:	6938      	ldr	r0, [r7, #16]
 800c82c:	f7fa fdf0 	bl	8007410 <pbuf_free>
  }

  return ERR_MEM;
 800c830:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c834:	4618      	mov	r0, r3
 800c836:	3724      	adds	r7, #36	; 0x24
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd90      	pop	{r4, r7, pc}
 800c83c:	08012d54 	.word	0x08012d54
 800c840:	080130e8 	.word	0x080130e8
 800c844:	08012da8 	.word	0x08012da8
 800c848:	0801310c 	.word	0x0801310c
 800c84c:	08013130 	.word	0x08013130
 800c850:	08013140 	.word	0x08013140
 800c854:	08013150 	.word	0x08013150

0800c858 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c858:	b590      	push	{r4, r7, lr}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d106      	bne.n	800c874 <tcp_send_fin+0x1c>
 800c866:	4b21      	ldr	r3, [pc, #132]	; (800c8ec <tcp_send_fin+0x94>)
 800c868:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c86c:	4920      	ldr	r1, [pc, #128]	; (800c8f0 <tcp_send_fin+0x98>)
 800c86e:	4821      	ldr	r0, [pc, #132]	; (800c8f4 <tcp_send_fin+0x9c>)
 800c870:	f003 feba 	bl	80105e8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d02e      	beq.n	800c8da <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c880:	60fb      	str	r3, [r7, #12]
 800c882:	e002      	b.n	800c88a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1f8      	bne.n	800c884 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	899b      	ldrh	r3, [r3, #12]
 800c898:	b29b      	uxth	r3, r3
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7f9 fad2 	bl	8005e44 <lwip_htons>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	f003 0307 	and.w	r3, r3, #7
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d116      	bne.n	800c8da <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	899b      	ldrh	r3, [r3, #12]
 800c8b2:	b29c      	uxth	r4, r3
 800c8b4:	2001      	movs	r0, #1
 800c8b6:	f7f9 fac5 	bl	8005e44 <lwip_htons>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	461a      	mov	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	4322      	orrs	r2, r4
 800c8c4:	b292      	uxth	r2, r2
 800c8c6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	8b5b      	ldrh	r3, [r3, #26]
 800c8cc:	f043 0320 	orr.w	r3, r3, #32
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	e004      	b.n	800c8e4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c8da:	2101      	movs	r1, #1
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f80b 	bl	800c8f8 <tcp_enqueue_flags>
 800c8e2:	4603      	mov	r3, r0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3714      	adds	r7, #20
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd90      	pop	{r4, r7, pc}
 800c8ec:	08012d54 	.word	0x08012d54
 800c8f0:	0801315c 	.word	0x0801315c
 800c8f4:	08012da8 	.word	0x08012da8

0800c8f8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08a      	sub	sp, #40	; 0x28
 800c8fc:	af02      	add	r7, sp, #8
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c908:	2300      	movs	r3, #0
 800c90a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c90c:	78fb      	ldrb	r3, [r7, #3]
 800c90e:	f003 0303 	and.w	r3, r3, #3
 800c912:	2b00      	cmp	r3, #0
 800c914:	d106      	bne.n	800c924 <tcp_enqueue_flags+0x2c>
 800c916:	4b67      	ldr	r3, [pc, #412]	; (800cab4 <tcp_enqueue_flags+0x1bc>)
 800c918:	f240 4212 	movw	r2, #1042	; 0x412
 800c91c:	4966      	ldr	r1, [pc, #408]	; (800cab8 <tcp_enqueue_flags+0x1c0>)
 800c91e:	4867      	ldr	r0, [pc, #412]	; (800cabc <tcp_enqueue_flags+0x1c4>)
 800c920:	f003 fe62 	bl	80105e8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d106      	bne.n	800c938 <tcp_enqueue_flags+0x40>
 800c92a:	4b62      	ldr	r3, [pc, #392]	; (800cab4 <tcp_enqueue_flags+0x1bc>)
 800c92c:	f240 4213 	movw	r2, #1043	; 0x413
 800c930:	4963      	ldr	r1, [pc, #396]	; (800cac0 <tcp_enqueue_flags+0x1c8>)
 800c932:	4862      	ldr	r0, [pc, #392]	; (800cabc <tcp_enqueue_flags+0x1c4>)
 800c934:	f003 fe58 	bl	80105e8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c938:	78fb      	ldrb	r3, [r7, #3]
 800c93a:	f003 0302 	and.w	r3, r3, #2
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d001      	beq.n	800c946 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c942:	2301      	movs	r3, #1
 800c944:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c946:	7ffb      	ldrb	r3, [r7, #31]
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	f003 0304 	and.w	r3, r3, #4
 800c950:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c952:	7dfb      	ldrb	r3, [r7, #23]
 800c954:	b29b      	uxth	r3, r3
 800c956:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c95a:	4619      	mov	r1, r3
 800c95c:	2036      	movs	r0, #54	; 0x36
 800c95e:	f7fa fa77 	bl	8006e50 <pbuf_alloc>
 800c962:	6138      	str	r0, [r7, #16]
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d109      	bne.n	800c97e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	8b5b      	ldrh	r3, [r3, #26]
 800c96e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c972:	b29a      	uxth	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c978:	f04f 33ff 	mov.w	r3, #4294967295
 800c97c:	e095      	b.n	800caaa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	895a      	ldrh	r2, [r3, #10]
 800c982:	7dfb      	ldrb	r3, [r7, #23]
 800c984:	b29b      	uxth	r3, r3
 800c986:	429a      	cmp	r2, r3
 800c988:	d206      	bcs.n	800c998 <tcp_enqueue_flags+0xa0>
 800c98a:	4b4a      	ldr	r3, [pc, #296]	; (800cab4 <tcp_enqueue_flags+0x1bc>)
 800c98c:	f240 423a 	movw	r2, #1082	; 0x43a
 800c990:	494c      	ldr	r1, [pc, #304]	; (800cac4 <tcp_enqueue_flags+0x1cc>)
 800c992:	484a      	ldr	r0, [pc, #296]	; (800cabc <tcp_enqueue_flags+0x1c4>)
 800c994:	f003 fe28 	bl	80105e8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c99c:	78fa      	ldrb	r2, [r7, #3]
 800c99e:	7ffb      	ldrb	r3, [r7, #31]
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	6939      	ldr	r1, [r7, #16]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7ff f916 	bl	800bbd8 <tcp_create_segment>
 800c9ac:	60f8      	str	r0, [r7, #12]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d109      	bne.n	800c9c8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	8b5b      	ldrh	r3, [r3, #26]
 800c9b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9c6:	e070      	b.n	800caaa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	f003 0303 	and.w	r3, r3, #3
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d006      	beq.n	800c9e2 <tcp_enqueue_flags+0xea>
 800c9d4:	4b37      	ldr	r3, [pc, #220]	; (800cab4 <tcp_enqueue_flags+0x1bc>)
 800c9d6:	f240 4242 	movw	r2, #1090	; 0x442
 800c9da:	493b      	ldr	r1, [pc, #236]	; (800cac8 <tcp_enqueue_flags+0x1d0>)
 800c9dc:	4837      	ldr	r0, [pc, #220]	; (800cabc <tcp_enqueue_flags+0x1c4>)
 800c9de:	f003 fe03 	bl	80105e8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	891b      	ldrh	r3, [r3, #8]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d006      	beq.n	800c9f8 <tcp_enqueue_flags+0x100>
 800c9ea:	4b32      	ldr	r3, [pc, #200]	; (800cab4 <tcp_enqueue_flags+0x1bc>)
 800c9ec:	f240 4243 	movw	r2, #1091	; 0x443
 800c9f0:	4936      	ldr	r1, [pc, #216]	; (800cacc <tcp_enqueue_flags+0x1d4>)
 800c9f2:	4832      	ldr	r0, [pc, #200]	; (800cabc <tcp_enqueue_flags+0x1c4>)
 800c9f4:	f003 fdf8 	bl	80105e8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d103      	bne.n	800ca08 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	66da      	str	r2, [r3, #108]	; 0x6c
 800ca06:	e00d      	b.n	800ca24 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca0c:	61bb      	str	r3, [r7, #24]
 800ca0e:	e002      	b.n	800ca16 <tcp_enqueue_flags+0x11e>
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	61bb      	str	r3, [r7, #24]
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1f8      	bne.n	800ca10 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ca2c:	78fb      	ldrb	r3, [r7, #3]
 800ca2e:	f003 0302 	and.w	r3, r3, #2
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d104      	bne.n	800ca40 <tcp_enqueue_flags+0x148>
 800ca36:	78fb      	ldrb	r3, [r7, #3]
 800ca38:	f003 0301 	and.w	r3, r3, #1
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d004      	beq.n	800ca4a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca44:	1c5a      	adds	r2, r3, #1
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ca4a:	78fb      	ldrb	r3, [r7, #3]
 800ca4c:	f003 0301 	and.w	r3, r3, #1
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d006      	beq.n	800ca62 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	8b5b      	ldrh	r3, [r3, #26]
 800ca58:	f043 0320 	orr.w	r3, r3, #32
 800ca5c:	b29a      	uxth	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fa fd5a 	bl	8007520 <pbuf_clen>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	461a      	mov	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca76:	4413      	add	r3, r2
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00e      	beq.n	800caa8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10a      	bne.n	800caa8 <tcp_enqueue_flags+0x1b0>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d106      	bne.n	800caa8 <tcp_enqueue_flags+0x1b0>
 800ca9a:	4b06      	ldr	r3, [pc, #24]	; (800cab4 <tcp_enqueue_flags+0x1bc>)
 800ca9c:	f240 4266 	movw	r2, #1126	; 0x466
 800caa0:	490b      	ldr	r1, [pc, #44]	; (800cad0 <tcp_enqueue_flags+0x1d8>)
 800caa2:	4806      	ldr	r0, [pc, #24]	; (800cabc <tcp_enqueue_flags+0x1c4>)
 800caa4:	f003 fda0 	bl	80105e8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800caa8:	2300      	movs	r3, #0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3720      	adds	r7, #32
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	08012d54 	.word	0x08012d54
 800cab8:	08013178 	.word	0x08013178
 800cabc:	08012da8 	.word	0x08012da8
 800cac0:	080131d0 	.word	0x080131d0
 800cac4:	080131f0 	.word	0x080131f0
 800cac8:	0801322c 	.word	0x0801322c
 800cacc:	08013244 	.word	0x08013244
 800cad0:	08013270 	.word	0x08013270

0800cad4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cad4:	b5b0      	push	{r4, r5, r7, lr}
 800cad6:	b08a      	sub	sp, #40	; 0x28
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d106      	bne.n	800caf0 <tcp_output+0x1c>
 800cae2:	4ba0      	ldr	r3, [pc, #640]	; (800cd64 <tcp_output+0x290>)
 800cae4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800cae8:	499f      	ldr	r1, [pc, #636]	; (800cd68 <tcp_output+0x294>)
 800caea:	48a0      	ldr	r0, [pc, #640]	; (800cd6c <tcp_output+0x298>)
 800caec:	f003 fd7c 	bl	80105e8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	7d1b      	ldrb	r3, [r3, #20]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d106      	bne.n	800cb06 <tcp_output+0x32>
 800caf8:	4b9a      	ldr	r3, [pc, #616]	; (800cd64 <tcp_output+0x290>)
 800cafa:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800cafe:	499c      	ldr	r1, [pc, #624]	; (800cd70 <tcp_output+0x29c>)
 800cb00:	489a      	ldr	r0, [pc, #616]	; (800cd6c <tcp_output+0x298>)
 800cb02:	f003 fd71 	bl	80105e8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cb06:	4b9b      	ldr	r3, [pc, #620]	; (800cd74 <tcp_output+0x2a0>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d101      	bne.n	800cb14 <tcp_output+0x40>
    return ERR_OK;
 800cb10:	2300      	movs	r3, #0
 800cb12:	e1d2      	b.n	800ceba <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d203      	bcs.n	800cb2c <tcp_output+0x58>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb2a:	e002      	b.n	800cb32 <tcp_output+0x5e>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb32:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb38:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10b      	bne.n	800cb58 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	8b5b      	ldrh	r3, [r3, #26]
 800cb44:	f003 0302 	and.w	r3, r3, #2
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f000 81a9 	beq.w	800cea0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fdd8 	bl	800d704 <tcp_send_empty_ack>
 800cb54:	4603      	mov	r3, r0
 800cb56:	e1b0      	b.n	800ceba <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cb58:	6879      	ldr	r1, [r7, #4]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	461a      	mov	r2, r3
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f7ff f81d 	bl	800bba0 <tcp_route>
 800cb66:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d102      	bne.n	800cb74 <tcp_output+0xa0>
    return ERR_RTE;
 800cb6e:	f06f 0303 	mvn.w	r3, #3
 800cb72:	e1a2      	b.n	800ceba <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d003      	beq.n	800cb82 <tcp_output+0xae>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d111      	bne.n	800cba6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d002      	beq.n	800cb8e <tcp_output+0xba>
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	e000      	b.n	800cb90 <tcp_output+0xbc>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d102      	bne.n	800cb9e <tcp_output+0xca>
      return ERR_RTE;
 800cb98:	f06f 0303 	mvn.w	r3, #3
 800cb9c:	e18d      	b.n	800ceba <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7f9 f95e 	bl	8005e6e <lwip_htonl>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbbc:	8912      	ldrh	r2, [r2, #8]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	69ba      	ldr	r2, [r7, #24]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d227      	bcs.n	800cc16 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cbcc:	461a      	mov	r2, r3
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d114      	bne.n	800cbfe <tcp_output+0x12a>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d110      	bne.n	800cbfe <tcp_output+0x12a>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10b      	bne.n	800cbfe <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	8b5b      	ldrh	r3, [r3, #26]
 800cc02:	f003 0302 	and.w	r3, r3, #2
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f000 814c 	beq.w	800cea4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 fd79 	bl	800d704 <tcp_send_empty_ack>
 800cc12:	4603      	mov	r3, r0
 800cc14:	e151      	b.n	800ceba <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc22:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800cc24:	6a3b      	ldr	r3, [r7, #32]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 811b 	beq.w	800ce62 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800cc2c:	e002      	b.n	800cc34 <tcp_output+0x160>
 800cc2e:	6a3b      	ldr	r3, [r7, #32]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	623b      	str	r3, [r7, #32]
 800cc34:	6a3b      	ldr	r3, [r7, #32]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d1f8      	bne.n	800cc2e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cc3c:	e111      	b.n	800ce62 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	899b      	ldrh	r3, [r3, #12]
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7f9 f8fc 	bl	8005e44 <lwip_htons>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	f003 0304 	and.w	r3, r3, #4
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d006      	beq.n	800cc66 <tcp_output+0x192>
 800cc58:	4b42      	ldr	r3, [pc, #264]	; (800cd64 <tcp_output+0x290>)
 800cc5a:	f240 5237 	movw	r2, #1335	; 0x537
 800cc5e:	4946      	ldr	r1, [pc, #280]	; (800cd78 <tcp_output+0x2a4>)
 800cc60:	4842      	ldr	r0, [pc, #264]	; (800cd6c <tcp_output+0x298>)
 800cc62:	f003 fcc1 	bl	80105e8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d01f      	beq.n	800ccae <tcp_output+0x1da>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	8b5b      	ldrh	r3, [r3, #26]
 800cc72:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d119      	bne.n	800ccae <tcp_output+0x1da>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00b      	beq.n	800cc9a <tcp_output+0x1c6>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d110      	bne.n	800ccae <tcp_output+0x1da>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc90:	891a      	ldrh	r2, [r3, #8]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d209      	bcs.n	800ccae <tcp_output+0x1da>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d004      	beq.n	800ccae <tcp_output+0x1da>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ccaa:	2b08      	cmp	r3, #8
 800ccac:	d901      	bls.n	800ccb2 <tcp_output+0x1de>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e000      	b.n	800ccb4 <tcp_output+0x1e0>
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d106      	bne.n	800ccc6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	8b5b      	ldrh	r3, [r3, #26]
 800ccbc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f000 80e3 	beq.w	800ce8c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	7d1b      	ldrb	r3, [r3, #20]
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d00d      	beq.n	800ccea <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ccce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	899b      	ldrh	r3, [r3, #12]
 800ccd4:	b29c      	uxth	r4, r3
 800ccd6:	2010      	movs	r0, #16
 800ccd8:	f7f9 f8b4 	bl	8005e44 <lwip_htons>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	461a      	mov	r2, r3
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	4322      	orrs	r2, r4
 800cce6:	b292      	uxth	r2, r2
 800cce8:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ccea:	697a      	ldr	r2, [r7, #20]
 800ccec:	6879      	ldr	r1, [r7, #4]
 800ccee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccf0:	f000 f908 	bl	800cf04 <tcp_output_segment>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ccf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d009      	beq.n	800cd14 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	8b5b      	ldrh	r3, [r3, #26]
 800cd04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	835a      	strh	r2, [r3, #26]
      return err;
 800cd0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd12:	e0d2      	b.n	800ceba <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	7d1b      	ldrb	r3, [r3, #20]
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d006      	beq.n	800cd32 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	8b5b      	ldrh	r3, [r3, #26]
 800cd28:	f023 0303 	bic.w	r3, r3, #3
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7f9 f898 	bl	8005e6e <lwip_htonl>
 800cd3e:	4604      	mov	r4, r0
 800cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd42:	891b      	ldrh	r3, [r3, #8]
 800cd44:	461d      	mov	r5, r3
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	899b      	ldrh	r3, [r3, #12]
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f9 f878 	bl	8005e44 <lwip_htons>
 800cd54:	4603      	mov	r3, r0
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	f003 0303 	and.w	r3, r3, #3
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00d      	beq.n	800cd7c <tcp_output+0x2a8>
 800cd60:	2301      	movs	r3, #1
 800cd62:	e00c      	b.n	800cd7e <tcp_output+0x2aa>
 800cd64:	08012d54 	.word	0x08012d54
 800cd68:	08013298 	.word	0x08013298
 800cd6c:	08012da8 	.word	0x08012da8
 800cd70:	080132b0 	.word	0x080132b0
 800cd74:	20007164 	.word	0x20007164
 800cd78:	080132d8 	.word	0x080132d8
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	442b      	add	r3, r5
 800cd80:	4423      	add	r3, r4
 800cd82:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	1ad3      	subs	r3, r2, r3
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	da02      	bge.n	800cd96 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800cd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd98:	891b      	ldrh	r3, [r3, #8]
 800cd9a:	461c      	mov	r4, r3
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	899b      	ldrh	r3, [r3, #12]
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7f9 f84d 	bl	8005e44 <lwip_htons>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	f003 0303 	and.w	r3, r3, #3
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <tcp_output+0x2e6>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e000      	b.n	800cdbc <tcp_output+0x2e8>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	4423      	add	r3, r4
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d049      	beq.n	800ce56 <tcp_output+0x382>
      seg->next = NULL;
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d105      	bne.n	800cddc <tcp_output+0x308>
        pcb->unacked = seg;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdd4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd8:	623b      	str	r3, [r7, #32]
 800cdda:	e03f      	b.n	800ce5c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7f9 f843 	bl	8005e6e <lwip_htonl>
 800cde8:	4604      	mov	r4, r0
 800cdea:	6a3b      	ldr	r3, [r7, #32]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7f9 f83c 	bl	8005e6e <lwip_htonl>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	1ae3      	subs	r3, r4, r3
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	da24      	bge.n	800ce48 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	3370      	adds	r3, #112	; 0x70
 800ce02:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ce04:	e002      	b.n	800ce0c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d011      	beq.n	800ce38 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7f9 f826 	bl	8005e6e <lwip_htonl>
 800ce22:	4604      	mov	r4, r0
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7f9 f81f 	bl	8005e6e <lwip_htonl>
 800ce30:	4603      	mov	r3, r0
 800ce32:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	dbe6      	blt.n	800ce06 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce44:	601a      	str	r2, [r3, #0]
 800ce46:	e009      	b.n	800ce5c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ce48:	6a3b      	ldr	r3, [r7, #32]
 800ce4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce4c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ce4e:	6a3b      	ldr	r3, [r7, #32]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	623b      	str	r3, [r7, #32]
 800ce54:	e002      	b.n	800ce5c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ce56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce58:	f7fb fefc 	bl	8008c54 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce60:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d012      	beq.n	800ce8e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7f8 fffd 	bl	8005e6e <lwip_htonl>
 800ce74:	4602      	mov	r2, r0
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce7e:	8912      	ldrh	r2, [r2, #8]
 800ce80:	4413      	add	r3, r2
  while (seg != NULL &&
 800ce82:	69ba      	ldr	r2, [r7, #24]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	f4bf aeda 	bcs.w	800cc3e <tcp_output+0x16a>
 800ce8a:	e000      	b.n	800ce8e <tcp_output+0x3ba>
      break;
 800ce8c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d108      	bne.n	800cea8 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ce9e:	e004      	b.n	800ceaa <tcp_output+0x3d6>
    goto output_done;
 800cea0:	bf00      	nop
 800cea2:	e002      	b.n	800ceaa <tcp_output+0x3d6>
    goto output_done;
 800cea4:	bf00      	nop
 800cea6:	e000      	b.n	800ceaa <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cea8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	8b5b      	ldrh	r3, [r3, #26]
 800ceae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3728      	adds	r7, #40	; 0x28
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bdb0      	pop	{r4, r5, r7, pc}
 800cec2:	bf00      	nop

0800cec4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d106      	bne.n	800cee0 <tcp_output_segment_busy+0x1c>
 800ced2:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <tcp_output_segment_busy+0x34>)
 800ced4:	f240 529a 	movw	r2, #1434	; 0x59a
 800ced8:	4908      	ldr	r1, [pc, #32]	; (800cefc <tcp_output_segment_busy+0x38>)
 800ceda:	4809      	ldr	r0, [pc, #36]	; (800cf00 <tcp_output_segment_busy+0x3c>)
 800cedc:	f003 fb84 	bl	80105e8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	7b9b      	ldrb	r3, [r3, #14]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d001      	beq.n	800ceee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e000      	b.n	800cef0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ceee:	2300      	movs	r3, #0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	08012d54 	.word	0x08012d54
 800cefc:	080132f0 	.word	0x080132f0
 800cf00:	08012da8 	.word	0x08012da8

0800cf04 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cf04:	b5b0      	push	{r4, r5, r7, lr}
 800cf06:	b08c      	sub	sp, #48	; 0x30
 800cf08:	af04      	add	r7, sp, #16
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d106      	bne.n	800cf24 <tcp_output_segment+0x20>
 800cf16:	4b64      	ldr	r3, [pc, #400]	; (800d0a8 <tcp_output_segment+0x1a4>)
 800cf18:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800cf1c:	4963      	ldr	r1, [pc, #396]	; (800d0ac <tcp_output_segment+0x1a8>)
 800cf1e:	4864      	ldr	r0, [pc, #400]	; (800d0b0 <tcp_output_segment+0x1ac>)
 800cf20:	f003 fb62 	bl	80105e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d106      	bne.n	800cf38 <tcp_output_segment+0x34>
 800cf2a:	4b5f      	ldr	r3, [pc, #380]	; (800d0a8 <tcp_output_segment+0x1a4>)
 800cf2c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800cf30:	4960      	ldr	r1, [pc, #384]	; (800d0b4 <tcp_output_segment+0x1b0>)
 800cf32:	485f      	ldr	r0, [pc, #380]	; (800d0b0 <tcp_output_segment+0x1ac>)
 800cf34:	f003 fb58 	bl	80105e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d106      	bne.n	800cf4c <tcp_output_segment+0x48>
 800cf3e:	4b5a      	ldr	r3, [pc, #360]	; (800d0a8 <tcp_output_segment+0x1a4>)
 800cf40:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800cf44:	495c      	ldr	r1, [pc, #368]	; (800d0b8 <tcp_output_segment+0x1b4>)
 800cf46:	485a      	ldr	r0, [pc, #360]	; (800d0b0 <tcp_output_segment+0x1ac>)
 800cf48:	f003 fb4e 	bl	80105e8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f7ff ffb9 	bl	800cec4 <tcp_output_segment_busy>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d001      	beq.n	800cf5c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	e0a0      	b.n	800d09e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	68dc      	ldr	r4, [r3, #12]
 800cf64:	4610      	mov	r0, r2
 800cf66:	f7f8 ff82 	bl	8005e6e <lwip_htonl>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	68dc      	ldr	r4, [r3, #12]
 800cf76:	4610      	mov	r0, r2
 800cf78:	f7f8 ff64 	bl	8005e44 <lwip_htons>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf84:	68ba      	ldr	r2, [r7, #8]
 800cf86:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cf88:	441a      	add	r2, r3
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	3314      	adds	r3, #20
 800cf94:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	7a9b      	ldrb	r3, [r3, #10]
 800cf9a:	f003 0301 	and.w	r3, r3, #1
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d015      	beq.n	800cfce <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	3304      	adds	r3, #4
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	6879      	ldr	r1, [r7, #4]
 800cfaa:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cfae:	f7fc fa33 	bl	8009418 <tcp_eff_send_mss_netif>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cfb6:	8b7b      	ldrh	r3, [r7, #26]
 800cfb8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7f8 ff56 	bl	8005e6e <lwip_htonl>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	3304      	adds	r3, #4
 800cfcc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	da02      	bge.n	800cfde <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d10c      	bne.n	800d000 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800cfe6:	4b35      	ldr	r3, [pc, #212]	; (800d0bc <tcp_output_segment+0x1b8>)
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7f8 ff3a 	bl	8005e6e <lwip_htonl>
 800cffa:	4602      	mov	r2, r0
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	461a      	mov	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	8959      	ldrh	r1, [r3, #10]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	8b3a      	ldrh	r2, [r7, #24]
 800d01c:	1a8a      	subs	r2, r1, r2
 800d01e:	b292      	uxth	r2, r2
 800d020:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	8919      	ldrh	r1, [r3, #8]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	8b3a      	ldrh	r2, [r7, #24]
 800d02e:	1a8a      	subs	r2, r1, r2
 800d030:	b292      	uxth	r2, r2
 800d032:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	68d2      	ldr	r2, [r2, #12]
 800d03c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	2200      	movs	r2, #0
 800d044:	741a      	strb	r2, [r3, #16]
 800d046:	2200      	movs	r2, #0
 800d048:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	f103 0214 	add.w	r2, r3, #20
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	7a9b      	ldrb	r3, [r3, #10]
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	f003 0304 	and.w	r3, r3, #4
 800d05c:	4413      	add	r3, r2
 800d05e:	69fa      	ldr	r2, [r7, #28]
 800d060:	429a      	cmp	r2, r3
 800d062:	d006      	beq.n	800d072 <tcp_output_segment+0x16e>
 800d064:	4b10      	ldr	r3, [pc, #64]	; (800d0a8 <tcp_output_segment+0x1a4>)
 800d066:	f240 621c 	movw	r2, #1564	; 0x61c
 800d06a:	4915      	ldr	r1, [pc, #84]	; (800d0c0 <tcp_output_segment+0x1bc>)
 800d06c:	4810      	ldr	r0, [pc, #64]	; (800d0b0 <tcp_output_segment+0x1ac>)
 800d06e:	f003 fabb 	bl	80105e8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6858      	ldr	r0, [r3, #4]
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	1d1c      	adds	r4, r3, #4
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	7add      	ldrb	r5, [r3, #11]
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	7a9b      	ldrb	r3, [r3, #10]
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	9202      	str	r2, [sp, #8]
 800d088:	2206      	movs	r2, #6
 800d08a:	9201      	str	r2, [sp, #4]
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	462b      	mov	r3, r5
 800d090:	4622      	mov	r2, r4
 800d092:	f002 fa3f 	bl	800f514 <ip4_output_if>
 800d096:	4603      	mov	r3, r0
 800d098:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d09a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3720      	adds	r7, #32
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bdb0      	pop	{r4, r5, r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	08012d54 	.word	0x08012d54
 800d0ac:	08013318 	.word	0x08013318
 800d0b0:	08012da8 	.word	0x08012da8
 800d0b4:	08013338 	.word	0x08013338
 800d0b8:	08013358 	.word	0x08013358
 800d0bc:	20007154 	.word	0x20007154
 800d0c0:	0801337c 	.word	0x0801337c

0800d0c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d0c4:	b5b0      	push	{r4, r5, r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d106      	bne.n	800d0e0 <tcp_rexmit_rto_prepare+0x1c>
 800d0d2:	4b31      	ldr	r3, [pc, #196]	; (800d198 <tcp_rexmit_rto_prepare+0xd4>)
 800d0d4:	f240 6263 	movw	r2, #1635	; 0x663
 800d0d8:	4930      	ldr	r1, [pc, #192]	; (800d19c <tcp_rexmit_rto_prepare+0xd8>)
 800d0da:	4831      	ldr	r0, [pc, #196]	; (800d1a0 <tcp_rexmit_rto_prepare+0xdc>)
 800d0dc:	f003 fa84 	bl	80105e8 <iprintf>

  if (pcb->unacked == NULL) {
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d102      	bne.n	800d0ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d0e8:	f06f 0305 	mvn.w	r3, #5
 800d0ec:	e050      	b.n	800d190 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0f2:	60fb      	str	r3, [r7, #12]
 800d0f4:	e00b      	b.n	800d10e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f7ff fee4 	bl	800cec4 <tcp_output_segment_busy>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d002      	beq.n	800d108 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d102:	f06f 0305 	mvn.w	r3, #5
 800d106:	e043      	b.n	800d190 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	60fb      	str	r3, [r7, #12]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d1ef      	bne.n	800d0f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f7ff fed4 	bl	800cec4 <tcp_output_segment_busy>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d002      	beq.n	800d128 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d122:	f06f 0305 	mvn.w	r3, #5
 800d126:	e033      	b.n	800d190 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	8b5b      	ldrh	r3, [r3, #26]
 800d142:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d146:	b29a      	uxth	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	4618      	mov	r0, r3
 800d154:	f7f8 fe8b 	bl	8005e6e <lwip_htonl>
 800d158:	4604      	mov	r4, r0
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	891b      	ldrh	r3, [r3, #8]
 800d15e:	461d      	mov	r5, r3
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	899b      	ldrh	r3, [r3, #12]
 800d166:	b29b      	uxth	r3, r3
 800d168:	4618      	mov	r0, r3
 800d16a:	f7f8 fe6b 	bl	8005e44 <lwip_htons>
 800d16e:	4603      	mov	r3, r0
 800d170:	b2db      	uxtb	r3, r3
 800d172:	f003 0303 	and.w	r3, r3, #3
 800d176:	2b00      	cmp	r3, #0
 800d178:	d001      	beq.n	800d17e <tcp_rexmit_rto_prepare+0xba>
 800d17a:	2301      	movs	r3, #1
 800d17c:	e000      	b.n	800d180 <tcp_rexmit_rto_prepare+0xbc>
 800d17e:	2300      	movs	r3, #0
 800d180:	442b      	add	r3, r5
 800d182:	18e2      	adds	r2, r4, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bdb0      	pop	{r4, r5, r7, pc}
 800d198:	08012d54 	.word	0x08012d54
 800d19c:	08013390 	.word	0x08013390
 800d1a0:	08012da8 	.word	0x08012da8

0800d1a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d106      	bne.n	800d1c0 <tcp_rexmit_rto_commit+0x1c>
 800d1b2:	4b0d      	ldr	r3, [pc, #52]	; (800d1e8 <tcp_rexmit_rto_commit+0x44>)
 800d1b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d1b8:	490c      	ldr	r1, [pc, #48]	; (800d1ec <tcp_rexmit_rto_commit+0x48>)
 800d1ba:	480d      	ldr	r0, [pc, #52]	; (800d1f0 <tcp_rexmit_rto_commit+0x4c>)
 800d1bc:	f003 fa14 	bl	80105e8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1c6:	2bff      	cmp	r3, #255	; 0xff
 800d1c8:	d007      	beq.n	800d1da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	b2da      	uxtb	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7ff fc7a 	bl	800cad4 <tcp_output>
}
 800d1e0:	bf00      	nop
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	08012d54 	.word	0x08012d54
 800d1ec:	080133b4 	.word	0x080133b4
 800d1f0:	08012da8 	.word	0x08012da8

0800d1f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d106      	bne.n	800d210 <tcp_rexmit_rto+0x1c>
 800d202:	4b0a      	ldr	r3, [pc, #40]	; (800d22c <tcp_rexmit_rto+0x38>)
 800d204:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d208:	4909      	ldr	r1, [pc, #36]	; (800d230 <tcp_rexmit_rto+0x3c>)
 800d20a:	480a      	ldr	r0, [pc, #40]	; (800d234 <tcp_rexmit_rto+0x40>)
 800d20c:	f003 f9ec 	bl	80105e8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7ff ff57 	bl	800d0c4 <tcp_rexmit_rto_prepare>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d102      	bne.n	800d222 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7ff ffc1 	bl	800d1a4 <tcp_rexmit_rto_commit>
  }
}
 800d222:	bf00      	nop
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	08012d54 	.word	0x08012d54
 800d230:	080133d8 	.word	0x080133d8
 800d234:	08012da8 	.word	0x08012da8

0800d238 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d238:	b590      	push	{r4, r7, lr}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d106      	bne.n	800d254 <tcp_rexmit+0x1c>
 800d246:	4b2f      	ldr	r3, [pc, #188]	; (800d304 <tcp_rexmit+0xcc>)
 800d248:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d24c:	492e      	ldr	r1, [pc, #184]	; (800d308 <tcp_rexmit+0xd0>)
 800d24e:	482f      	ldr	r0, [pc, #188]	; (800d30c <tcp_rexmit+0xd4>)
 800d250:	f003 f9ca 	bl	80105e8 <iprintf>

  if (pcb->unacked == NULL) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d102      	bne.n	800d262 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d25c:	f06f 0305 	mvn.w	r3, #5
 800d260:	e04c      	b.n	800d2fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d266:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d268:	68b8      	ldr	r0, [r7, #8]
 800d26a:	f7ff fe2b 	bl	800cec4 <tcp_output_segment_busy>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d274:	f06f 0305 	mvn.w	r3, #5
 800d278:	e040      	b.n	800d2fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	336c      	adds	r3, #108	; 0x6c
 800d286:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d288:	e002      	b.n	800d290 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d011      	beq.n	800d2bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7f8 fde4 	bl	8005e6e <lwip_htonl>
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7f8 fddd 	bl	8005e6e <lwip_htonl>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	dbe6      	blt.n	800d28a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	68ba      	ldr	r2, [r7, #8]
 800d2c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d103      	bne.n	800d2da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2e0:	2bff      	cmp	r3, #255	; 0xff
 800d2e2:	d007      	beq.n	800d2f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	bd90      	pop	{r4, r7, pc}
 800d304:	08012d54 	.word	0x08012d54
 800d308:	080133f4 	.word	0x080133f4
 800d30c:	08012da8 	.word	0x08012da8

0800d310 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d106      	bne.n	800d32c <tcp_rexmit_fast+0x1c>
 800d31e:	4b2f      	ldr	r3, [pc, #188]	; (800d3dc <tcp_rexmit_fast+0xcc>)
 800d320:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d324:	492e      	ldr	r1, [pc, #184]	; (800d3e0 <tcp_rexmit_fast+0xd0>)
 800d326:	482f      	ldr	r0, [pc, #188]	; (800d3e4 <tcp_rexmit_fast+0xd4>)
 800d328:	f003 f95e 	bl	80105e8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d330:	2b00      	cmp	r3, #0
 800d332:	d04f      	beq.n	800d3d4 <tcp_rexmit_fast+0xc4>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	8b5b      	ldrh	r3, [r3, #26]
 800d338:	f003 0304 	and.w	r3, r3, #4
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d149      	bne.n	800d3d4 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7ff ff79 	bl	800d238 <tcp_rexmit>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d143      	bne.n	800d3d4 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d358:	429a      	cmp	r2, r3
 800d35a:	d208      	bcs.n	800d36e <tcp_rexmit_fast+0x5e>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d362:	2b00      	cmp	r3, #0
 800d364:	da00      	bge.n	800d368 <tcp_rexmit_fast+0x58>
 800d366:	3301      	adds	r3, #1
 800d368:	105b      	asrs	r3, r3, #1
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	e007      	b.n	800d37e <tcp_rexmit_fast+0x6e>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d374:	2b00      	cmp	r3, #0
 800d376:	da00      	bge.n	800d37a <tcp_rexmit_fast+0x6a>
 800d378:	3301      	adds	r3, #1
 800d37a:	105b      	asrs	r3, r3, #1
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d38a:	461a      	mov	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d390:	005b      	lsls	r3, r3, #1
 800d392:	429a      	cmp	r2, r3
 800d394:	d206      	bcs.n	800d3a4 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d39a:	005b      	lsls	r3, r3, #1
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	0049      	lsls	r1, r1, #1
 800d3b2:	440b      	add	r3, r1
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	4413      	add	r3, r2
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	8b5b      	ldrh	r3, [r3, #26]
 800d3c4:	f043 0304 	orr.w	r3, r3, #4
 800d3c8:	b29a      	uxth	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d3d4:	bf00      	nop
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	08012d54 	.word	0x08012d54
 800d3e0:	0801340c 	.word	0x0801340c
 800d3e4:	08012da8 	.word	0x08012da8

0800d3e8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b086      	sub	sp, #24
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	607b      	str	r3, [r7, #4]
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	817b      	strh	r3, [r7, #10]
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d3fa:	897a      	ldrh	r2, [r7, #10]
 800d3fc:	893b      	ldrh	r3, [r7, #8]
 800d3fe:	4413      	add	r3, r2
 800d400:	b29b      	uxth	r3, r3
 800d402:	3314      	adds	r3, #20
 800d404:	b29b      	uxth	r3, r3
 800d406:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d40a:	4619      	mov	r1, r3
 800d40c:	2022      	movs	r0, #34	; 0x22
 800d40e:	f7f9 fd1f 	bl	8006e50 <pbuf_alloc>
 800d412:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d04e      	beq.n	800d4b8 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	895b      	ldrh	r3, [r3, #10]
 800d41e:	461a      	mov	r2, r3
 800d420:	897b      	ldrh	r3, [r7, #10]
 800d422:	3314      	adds	r3, #20
 800d424:	429a      	cmp	r2, r3
 800d426:	da06      	bge.n	800d436 <tcp_output_alloc_header_common+0x4e>
 800d428:	4b26      	ldr	r3, [pc, #152]	; (800d4c4 <tcp_output_alloc_header_common+0xdc>)
 800d42a:	f240 7224 	movw	r2, #1828	; 0x724
 800d42e:	4926      	ldr	r1, [pc, #152]	; (800d4c8 <tcp_output_alloc_header_common+0xe0>)
 800d430:	4826      	ldr	r0, [pc, #152]	; (800d4cc <tcp_output_alloc_header_common+0xe4>)
 800d432:	f003 f8d9 	bl	80105e8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d43c:	8c3b      	ldrh	r3, [r7, #32]
 800d43e:	4618      	mov	r0, r3
 800d440:	f7f8 fd00 	bl	8005e44 <lwip_htons>
 800d444:	4603      	mov	r3, r0
 800d446:	461a      	mov	r2, r3
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d44c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d44e:	4618      	mov	r0, r3
 800d450:	f7f8 fcf8 	bl	8005e44 <lwip_htons>
 800d454:	4603      	mov	r3, r0
 800d456:	461a      	mov	r2, r3
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d462:	68f8      	ldr	r0, [r7, #12]
 800d464:	f7f8 fd03 	bl	8005e6e <lwip_htonl>
 800d468:	4602      	mov	r2, r0
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d46e:	897b      	ldrh	r3, [r7, #10]
 800d470:	089b      	lsrs	r3, r3, #2
 800d472:	b29b      	uxth	r3, r3
 800d474:	3305      	adds	r3, #5
 800d476:	b29b      	uxth	r3, r3
 800d478:	031b      	lsls	r3, r3, #12
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d480:	b29b      	uxth	r3, r3
 800d482:	4313      	orrs	r3, r2
 800d484:	b29b      	uxth	r3, r3
 800d486:	4618      	mov	r0, r3
 800d488:	f7f8 fcdc 	bl	8005e44 <lwip_htons>
 800d48c:	4603      	mov	r3, r0
 800d48e:	461a      	mov	r2, r3
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d494:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d496:	4618      	mov	r0, r3
 800d498:	f7f8 fcd4 	bl	8005e44 <lwip_htons>
 800d49c:	4603      	mov	r3, r0
 800d49e:	461a      	mov	r2, r3
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	741a      	strb	r2, [r3, #16]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	749a      	strb	r2, [r3, #18]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d4b8:	697b      	ldr	r3, [r7, #20]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3718      	adds	r7, #24
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	08012d54 	.word	0x08012d54
 800d4c8:	0801342c 	.word	0x0801342c
 800d4cc:	08012da8 	.word	0x08012da8

0800d4d0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d4d0:	b5b0      	push	{r4, r5, r7, lr}
 800d4d2:	b08a      	sub	sp, #40	; 0x28
 800d4d4:	af04      	add	r7, sp, #16
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	607b      	str	r3, [r7, #4]
 800d4da:	460b      	mov	r3, r1
 800d4dc:	817b      	strh	r3, [r7, #10]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d106      	bne.n	800d4f6 <tcp_output_alloc_header+0x26>
 800d4e8:	4b15      	ldr	r3, [pc, #84]	; (800d540 <tcp_output_alloc_header+0x70>)
 800d4ea:	f240 7242 	movw	r2, #1858	; 0x742
 800d4ee:	4915      	ldr	r1, [pc, #84]	; (800d544 <tcp_output_alloc_header+0x74>)
 800d4f0:	4815      	ldr	r0, [pc, #84]	; (800d548 <tcp_output_alloc_header+0x78>)
 800d4f2:	f003 f879 	bl	80105e8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	8adb      	ldrh	r3, [r3, #22]
 800d4fe:	68fa      	ldr	r2, [r7, #12]
 800d500:	8b12      	ldrh	r2, [r2, #24]
 800d502:	68f9      	ldr	r1, [r7, #12]
 800d504:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d506:	893d      	ldrh	r5, [r7, #8]
 800d508:	897c      	ldrh	r4, [r7, #10]
 800d50a:	9103      	str	r1, [sp, #12]
 800d50c:	2110      	movs	r1, #16
 800d50e:	9102      	str	r1, [sp, #8]
 800d510:	9201      	str	r2, [sp, #4]
 800d512:	9300      	str	r3, [sp, #0]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	462a      	mov	r2, r5
 800d518:	4621      	mov	r1, r4
 800d51a:	f7ff ff65 	bl	800d3e8 <tcp_output_alloc_header_common>
 800d51e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d006      	beq.n	800d534 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52a:	68fa      	ldr	r2, [r7, #12]
 800d52c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d52e:	441a      	add	r2, r3
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d534:	697b      	ldr	r3, [r7, #20]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3718      	adds	r7, #24
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bdb0      	pop	{r4, r5, r7, pc}
 800d53e:	bf00      	nop
 800d540:	08012d54 	.word	0x08012d54
 800d544:	0801345c 	.word	0x0801345c
 800d548:	08012da8 	.word	0x08012da8

0800d54c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b088      	sub	sp, #32
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	4611      	mov	r1, r2
 800d558:	461a      	mov	r2, r3
 800d55a:	460b      	mov	r3, r1
 800d55c:	71fb      	strb	r3, [r7, #7]
 800d55e:	4613      	mov	r3, r2
 800d560:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d562:	2300      	movs	r3, #0
 800d564:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d106      	bne.n	800d57a <tcp_output_fill_options+0x2e>
 800d56c:	4b13      	ldr	r3, [pc, #76]	; (800d5bc <tcp_output_fill_options+0x70>)
 800d56e:	f240 7256 	movw	r2, #1878	; 0x756
 800d572:	4913      	ldr	r1, [pc, #76]	; (800d5c0 <tcp_output_fill_options+0x74>)
 800d574:	4813      	ldr	r0, [pc, #76]	; (800d5c4 <tcp_output_fill_options+0x78>)
 800d576:	f003 f837 	bl	80105e8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	3314      	adds	r3, #20
 800d584:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	f103 0214 	add.w	r2, r3, #20
 800d58c:	8bfb      	ldrh	r3, [r7, #30]
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4619      	mov	r1, r3
 800d592:	79fb      	ldrb	r3, [r7, #7]
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	f003 0304 	and.w	r3, r3, #4
 800d59a:	440b      	add	r3, r1
 800d59c:	4413      	add	r3, r2
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d006      	beq.n	800d5b2 <tcp_output_fill_options+0x66>
 800d5a4:	4b05      	ldr	r3, [pc, #20]	; (800d5bc <tcp_output_fill_options+0x70>)
 800d5a6:	f240 7275 	movw	r2, #1909	; 0x775
 800d5aa:	4907      	ldr	r1, [pc, #28]	; (800d5c8 <tcp_output_fill_options+0x7c>)
 800d5ac:	4805      	ldr	r0, [pc, #20]	; (800d5c4 <tcp_output_fill_options+0x78>)
 800d5ae:	f003 f81b 	bl	80105e8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d5b2:	bf00      	nop
 800d5b4:	3720      	adds	r7, #32
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	08012d54 	.word	0x08012d54
 800d5c0:	08013484 	.word	0x08013484
 800d5c4:	08012da8 	.word	0x08012da8
 800d5c8:	0801337c 	.word	0x0801337c

0800d5cc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b08a      	sub	sp, #40	; 0x28
 800d5d0:	af04      	add	r7, sp, #16
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
 800d5d8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d106      	bne.n	800d5ee <tcp_output_control_segment+0x22>
 800d5e0:	4b1c      	ldr	r3, [pc, #112]	; (800d654 <tcp_output_control_segment+0x88>)
 800d5e2:	f240 7287 	movw	r2, #1927	; 0x787
 800d5e6:	491c      	ldr	r1, [pc, #112]	; (800d658 <tcp_output_control_segment+0x8c>)
 800d5e8:	481c      	ldr	r0, [pc, #112]	; (800d65c <tcp_output_control_segment+0x90>)
 800d5ea:	f002 fffd 	bl	80105e8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d5ee:	683a      	ldr	r2, [r7, #0]
 800d5f0:	6879      	ldr	r1, [r7, #4]
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f7fe fad4 	bl	800bba0 <tcp_route>
 800d5f8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d102      	bne.n	800d606 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d600:	23fc      	movs	r3, #252	; 0xfc
 800d602:	75fb      	strb	r3, [r7, #23]
 800d604:	e01c      	b.n	800d640 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d006      	beq.n	800d61a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	7adb      	ldrb	r3, [r3, #11]
 800d610:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	7a9b      	ldrb	r3, [r3, #10]
 800d616:	757b      	strb	r3, [r7, #21]
 800d618:	e003      	b.n	800d622 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d61a:	23ff      	movs	r3, #255	; 0xff
 800d61c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d61e:	2300      	movs	r3, #0
 800d620:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d622:	7dba      	ldrb	r2, [r7, #22]
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	9302      	str	r3, [sp, #8]
 800d628:	2306      	movs	r3, #6
 800d62a:	9301      	str	r3, [sp, #4]
 800d62c:	7d7b      	ldrb	r3, [r7, #21]
 800d62e:	9300      	str	r3, [sp, #0]
 800d630:	4613      	mov	r3, r2
 800d632:	683a      	ldr	r2, [r7, #0]
 800d634:	6879      	ldr	r1, [r7, #4]
 800d636:	68b8      	ldr	r0, [r7, #8]
 800d638:	f001 ff6c 	bl	800f514 <ip4_output_if>
 800d63c:	4603      	mov	r3, r0
 800d63e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d640:	68b8      	ldr	r0, [r7, #8]
 800d642:	f7f9 fee5 	bl	8007410 <pbuf_free>
  return err;
 800d646:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3718      	adds	r7, #24
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	08012d54 	.word	0x08012d54
 800d658:	080134ac 	.word	0x080134ac
 800d65c:	08012da8 	.word	0x08012da8

0800d660 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d660:	b590      	push	{r4, r7, lr}
 800d662:	b08b      	sub	sp, #44	; 0x2c
 800d664:	af04      	add	r7, sp, #16
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
 800d66c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d106      	bne.n	800d682 <tcp_rst+0x22>
 800d674:	4b1f      	ldr	r3, [pc, #124]	; (800d6f4 <tcp_rst+0x94>)
 800d676:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d67a:	491f      	ldr	r1, [pc, #124]	; (800d6f8 <tcp_rst+0x98>)
 800d67c:	481f      	ldr	r0, [pc, #124]	; (800d6fc <tcp_rst+0x9c>)
 800d67e:	f002 ffb3 	bl	80105e8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d684:	2b00      	cmp	r3, #0
 800d686:	d106      	bne.n	800d696 <tcp_rst+0x36>
 800d688:	4b1a      	ldr	r3, [pc, #104]	; (800d6f4 <tcp_rst+0x94>)
 800d68a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d68e:	491c      	ldr	r1, [pc, #112]	; (800d700 <tcp_rst+0xa0>)
 800d690:	481a      	ldr	r0, [pc, #104]	; (800d6fc <tcp_rst+0x9c>)
 800d692:	f002 ffa9 	bl	80105e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d696:	2300      	movs	r3, #0
 800d698:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d69a:	f246 0308 	movw	r3, #24584	; 0x6008
 800d69e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d6a0:	7dfb      	ldrb	r3, [r7, #23]
 800d6a2:	b29c      	uxth	r4, r3
 800d6a4:	68b8      	ldr	r0, [r7, #8]
 800d6a6:	f7f8 fbe2 	bl	8005e6e <lwip_htonl>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	8abb      	ldrh	r3, [r7, #20]
 800d6ae:	9303      	str	r3, [sp, #12]
 800d6b0:	2314      	movs	r3, #20
 800d6b2:	9302      	str	r3, [sp, #8]
 800d6b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d6b6:	9301      	str	r3, [sp, #4]
 800d6b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	4613      	mov	r3, r2
 800d6be:	2200      	movs	r2, #0
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f7ff fe90 	bl	800d3e8 <tcp_output_alloc_header_common>
 800d6c8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00c      	beq.n	800d6ea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d6d0:	7dfb      	ldrb	r3, [r7, #23]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	6939      	ldr	r1, [r7, #16]
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f7ff ff38 	bl	800d54c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6de:	683a      	ldr	r2, [r7, #0]
 800d6e0:	6939      	ldr	r1, [r7, #16]
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f7ff ff72 	bl	800d5cc <tcp_output_control_segment>
 800d6e8:	e000      	b.n	800d6ec <tcp_rst+0x8c>
    return;
 800d6ea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d6ec:	371c      	adds	r7, #28
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd90      	pop	{r4, r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	08012d54 	.word	0x08012d54
 800d6f8:	080134d8 	.word	0x080134d8
 800d6fc:	08012da8 	.word	0x08012da8
 800d700:	080134f4 	.word	0x080134f4

0800d704 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d704:	b590      	push	{r4, r7, lr}
 800d706:	b087      	sub	sp, #28
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d70c:	2300      	movs	r3, #0
 800d70e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d710:	2300      	movs	r3, #0
 800d712:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d106      	bne.n	800d728 <tcp_send_empty_ack+0x24>
 800d71a:	4b28      	ldr	r3, [pc, #160]	; (800d7bc <tcp_send_empty_ack+0xb8>)
 800d71c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d720:	4927      	ldr	r1, [pc, #156]	; (800d7c0 <tcp_send_empty_ack+0xbc>)
 800d722:	4828      	ldr	r0, [pc, #160]	; (800d7c4 <tcp_send_empty_ack+0xc0>)
 800d724:	f002 ff60 	bl	80105e8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d728:	7dfb      	ldrb	r3, [r7, #23]
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	f003 0304 	and.w	r3, r3, #4
 800d732:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d734:	7d7b      	ldrb	r3, [r7, #21]
 800d736:	b29c      	uxth	r4, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7f8 fb96 	bl	8005e6e <lwip_htonl>
 800d742:	4603      	mov	r3, r0
 800d744:	2200      	movs	r2, #0
 800d746:	4621      	mov	r1, r4
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f7ff fec1 	bl	800d4d0 <tcp_output_alloc_header>
 800d74e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d109      	bne.n	800d76a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	8b5b      	ldrh	r3, [r3, #26]
 800d75a:	f043 0303 	orr.w	r3, r3, #3
 800d75e:	b29a      	uxth	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d764:	f06f 0301 	mvn.w	r3, #1
 800d768:	e023      	b.n	800d7b2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d76a:	7dbb      	ldrb	r3, [r7, #22]
 800d76c:	7dfa      	ldrb	r2, [r7, #23]
 800d76e:	6939      	ldr	r1, [r7, #16]
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f7ff feeb 	bl	800d54c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	3304      	adds	r3, #4
 800d77c:	6939      	ldr	r1, [r7, #16]
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f7ff ff24 	bl	800d5cc <tcp_output_control_segment>
 800d784:	4603      	mov	r3, r0
 800d786:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d007      	beq.n	800d7a0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	8b5b      	ldrh	r3, [r3, #26]
 800d794:	f043 0303 	orr.w	r3, r3, #3
 800d798:	b29a      	uxth	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	835a      	strh	r2, [r3, #26]
 800d79e:	e006      	b.n	800d7ae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	8b5b      	ldrh	r3, [r3, #26]
 800d7a4:	f023 0303 	bic.w	r3, r3, #3
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d7ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	371c      	adds	r7, #28
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd90      	pop	{r4, r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	08012d54 	.word	0x08012d54
 800d7c0:	08013510 	.word	0x08013510
 800d7c4:	08012da8 	.word	0x08012da8

0800d7c8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d7c8:	b590      	push	{r4, r7, lr}
 800d7ca:	b087      	sub	sp, #28
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d106      	bne.n	800d7e8 <tcp_keepalive+0x20>
 800d7da:	4b18      	ldr	r3, [pc, #96]	; (800d83c <tcp_keepalive+0x74>)
 800d7dc:	f640 0224 	movw	r2, #2084	; 0x824
 800d7e0:	4917      	ldr	r1, [pc, #92]	; (800d840 <tcp_keepalive+0x78>)
 800d7e2:	4818      	ldr	r0, [pc, #96]	; (800d844 <tcp_keepalive+0x7c>)
 800d7e4:	f002 ff00 	bl	80105e8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ea:	b29c      	uxth	r4, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7f8 fb3b 	bl	8005e6e <lwip_htonl>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	4621      	mov	r1, r4
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7ff fe66 	bl	800d4d0 <tcp_output_alloc_header>
 800d804:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d102      	bne.n	800d812 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d80c:	f04f 33ff 	mov.w	r3, #4294967295
 800d810:	e010      	b.n	800d834 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d812:	7dfb      	ldrb	r3, [r7, #23]
 800d814:	2200      	movs	r2, #0
 800d816:	6939      	ldr	r1, [r7, #16]
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7ff fe97 	bl	800d54c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	3304      	adds	r3, #4
 800d824:	6939      	ldr	r1, [r7, #16]
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7ff fed0 	bl	800d5cc <tcp_output_control_segment>
 800d82c:	4603      	mov	r3, r0
 800d82e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d830:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d834:	4618      	mov	r0, r3
 800d836:	371c      	adds	r7, #28
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd90      	pop	{r4, r7, pc}
 800d83c:	08012d54 	.word	0x08012d54
 800d840:	08013530 	.word	0x08013530
 800d844:	08012da8 	.word	0x08012da8

0800d848 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d848:	b590      	push	{r4, r7, lr}
 800d84a:	b08b      	sub	sp, #44	; 0x2c
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d850:	2300      	movs	r3, #0
 800d852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d106      	bne.n	800d86a <tcp_zero_window_probe+0x22>
 800d85c:	4b4c      	ldr	r3, [pc, #304]	; (800d990 <tcp_zero_window_probe+0x148>)
 800d85e:	f640 024f 	movw	r2, #2127	; 0x84f
 800d862:	494c      	ldr	r1, [pc, #304]	; (800d994 <tcp_zero_window_probe+0x14c>)
 800d864:	484c      	ldr	r0, [pc, #304]	; (800d998 <tcp_zero_window_probe+0x150>)
 800d866:	f002 febf 	bl	80105e8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d86e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d870:	6a3b      	ldr	r3, [r7, #32]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d101      	bne.n	800d87a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d876:	2300      	movs	r3, #0
 800d878:	e086      	b.n	800d988 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d880:	2bff      	cmp	r3, #255	; 0xff
 800d882:	d007      	beq.n	800d894 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d88a:	3301      	adds	r3, #1
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d894:	6a3b      	ldr	r3, [r7, #32]
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	899b      	ldrh	r3, [r3, #12]
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7f8 fad1 	bl	8005e44 <lwip_htons>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	f003 0301 	and.w	r3, r3, #1
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d005      	beq.n	800d8ba <tcp_zero_window_probe+0x72>
 800d8ae:	6a3b      	ldr	r3, [r7, #32]
 800d8b0:	891b      	ldrh	r3, [r3, #8]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d101      	bne.n	800d8ba <tcp_zero_window_probe+0x72>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e000      	b.n	800d8bc <tcp_zero_window_probe+0x74>
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d8be:	7ffb      	ldrb	r3, [r7, #31]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	bf0c      	ite	eq
 800d8c4:	2301      	moveq	r3, #1
 800d8c6:	2300      	movne	r3, #0
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8d0:	b299      	uxth	r1, r3
 800d8d2:	6a3b      	ldr	r3, [r7, #32]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	8bba      	ldrh	r2, [r7, #28]
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f7ff fdf8 	bl	800d4d0 <tcp_output_alloc_header>
 800d8e0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d102      	bne.n	800d8ee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d8e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ec:	e04c      	b.n	800d988 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d8f4:	7ffb      	ldrb	r3, [r7, #31]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d011      	beq.n	800d91e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	899b      	ldrh	r3, [r3, #12]
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	b21b      	sxth	r3, r3
 800d902:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d906:	b21c      	sxth	r4, r3
 800d908:	2011      	movs	r0, #17
 800d90a:	f7f8 fa9b 	bl	8005e44 <lwip_htons>
 800d90e:	4603      	mov	r3, r0
 800d910:	b21b      	sxth	r3, r3
 800d912:	4323      	orrs	r3, r4
 800d914:	b21b      	sxth	r3, r3
 800d916:	b29a      	uxth	r2, r3
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	819a      	strh	r2, [r3, #12]
 800d91c:	e010      	b.n	800d940 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	3314      	adds	r3, #20
 800d924:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d926:	6a3b      	ldr	r3, [r7, #32]
 800d928:	6858      	ldr	r0, [r3, #4]
 800d92a:	6a3b      	ldr	r3, [r7, #32]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	891a      	ldrh	r2, [r3, #8]
 800d930:	6a3b      	ldr	r3, [r7, #32]
 800d932:	891b      	ldrh	r3, [r3, #8]
 800d934:	1ad3      	subs	r3, r2, r3
 800d936:	b29b      	uxth	r3, r3
 800d938:	2201      	movs	r2, #1
 800d93a:	6939      	ldr	r1, [r7, #16]
 800d93c:	f7f9 ff52 	bl	80077e4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d940:	6a3b      	ldr	r3, [r7, #32]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	4618      	mov	r0, r3
 800d948:	f7f8 fa91 	bl	8005e6e <lwip_htonl>
 800d94c:	4603      	mov	r3, r0
 800d94e:	3301      	adds	r3, #1
 800d950:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	da02      	bge.n	800d964 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d968:	2200      	movs	r2, #0
 800d96a:	69b9      	ldr	r1, [r7, #24]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f7ff fded 	bl	800d54c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3304      	adds	r3, #4
 800d978:	69b9      	ldr	r1, [r7, #24]
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7ff fe26 	bl	800d5cc <tcp_output_control_segment>
 800d980:	4603      	mov	r3, r0
 800d982:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d984:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d988:	4618      	mov	r0, r3
 800d98a:	372c      	adds	r7, #44	; 0x2c
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd90      	pop	{r4, r7, pc}
 800d990:	08012d54 	.word	0x08012d54
 800d994:	0801354c 	.word	0x0801354c
 800d998:	08012da8 	.word	0x08012da8

0800d99c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d9a4:	f7fa f80c 	bl	80079c0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d9a8:	4b0a      	ldr	r3, [pc, #40]	; (800d9d4 <tcpip_tcp_timer+0x38>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d103      	bne.n	800d9b8 <tcpip_tcp_timer+0x1c>
 800d9b0:	4b09      	ldr	r3, [pc, #36]	; (800d9d8 <tcpip_tcp_timer+0x3c>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d005      	beq.n	800d9c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	4908      	ldr	r1, [pc, #32]	; (800d9dc <tcpip_tcp_timer+0x40>)
 800d9bc:	20fa      	movs	r0, #250	; 0xfa
 800d9be:	f000 f8f1 	bl	800dba4 <sys_timeout>
 800d9c2:	e002      	b.n	800d9ca <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d9c4:	4b06      	ldr	r3, [pc, #24]	; (800d9e0 <tcpip_tcp_timer+0x44>)
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	601a      	str	r2, [r3, #0]
  }
}
 800d9ca:	bf00      	nop
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	20007150 	.word	0x20007150
 800d9d8:	20007160 	.word	0x20007160
 800d9dc:	0800d99d 	.word	0x0800d99d
 800d9e0:	20000548 	.word	0x20000548

0800d9e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d9e8:	4b0a      	ldr	r3, [pc, #40]	; (800da14 <tcp_timer_needed+0x30>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10f      	bne.n	800da10 <tcp_timer_needed+0x2c>
 800d9f0:	4b09      	ldr	r3, [pc, #36]	; (800da18 <tcp_timer_needed+0x34>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d103      	bne.n	800da00 <tcp_timer_needed+0x1c>
 800d9f8:	4b08      	ldr	r3, [pc, #32]	; (800da1c <tcp_timer_needed+0x38>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d007      	beq.n	800da10 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800da00:	4b04      	ldr	r3, [pc, #16]	; (800da14 <tcp_timer_needed+0x30>)
 800da02:	2201      	movs	r2, #1
 800da04:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800da06:	2200      	movs	r2, #0
 800da08:	4905      	ldr	r1, [pc, #20]	; (800da20 <tcp_timer_needed+0x3c>)
 800da0a:	20fa      	movs	r0, #250	; 0xfa
 800da0c:	f000 f8ca 	bl	800dba4 <sys_timeout>
  }
}
 800da10:	bf00      	nop
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20000548 	.word	0x20000548
 800da18:	20007150 	.word	0x20007150
 800da1c:	20007160 	.word	0x20007160
 800da20:	0800d99d 	.word	0x0800d99d

0800da24 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800da30:	2006      	movs	r0, #6
 800da32:	f7f8 fe93 	bl	800675c <memp_malloc>
 800da36:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d109      	bne.n	800da52 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d151      	bne.n	800dae8 <sys_timeout_abs+0xc4>
 800da44:	4b2a      	ldr	r3, [pc, #168]	; (800daf0 <sys_timeout_abs+0xcc>)
 800da46:	22be      	movs	r2, #190	; 0xbe
 800da48:	492a      	ldr	r1, [pc, #168]	; (800daf4 <sys_timeout_abs+0xd0>)
 800da4a:	482b      	ldr	r0, [pc, #172]	; (800daf8 <sys_timeout_abs+0xd4>)
 800da4c:	f002 fdcc 	bl	80105e8 <iprintf>
    return;
 800da50:	e04a      	b.n	800dae8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	2200      	movs	r2, #0
 800da56:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	68ba      	ldr	r2, [r7, #8]
 800da5c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800da6a:	4b24      	ldr	r3, [pc, #144]	; (800dafc <sys_timeout_abs+0xd8>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d103      	bne.n	800da7a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800da72:	4a22      	ldr	r2, [pc, #136]	; (800dafc <sys_timeout_abs+0xd8>)
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	6013      	str	r3, [r2, #0]
    return;
 800da78:	e037      	b.n	800daea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	685a      	ldr	r2, [r3, #4]
 800da7e:	4b1f      	ldr	r3, [pc, #124]	; (800dafc <sys_timeout_abs+0xd8>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	0fdb      	lsrs	r3, r3, #31
 800da88:	f003 0301 	and.w	r3, r3, #1
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d007      	beq.n	800daa2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800da92:	4b1a      	ldr	r3, [pc, #104]	; (800dafc <sys_timeout_abs+0xd8>)
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800da9a:	4a18      	ldr	r2, [pc, #96]	; (800dafc <sys_timeout_abs+0xd8>)
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	6013      	str	r3, [r2, #0]
 800daa0:	e023      	b.n	800daea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800daa2:	4b16      	ldr	r3, [pc, #88]	; (800dafc <sys_timeout_abs+0xd8>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	617b      	str	r3, [r7, #20]
 800daa8:	e01a      	b.n	800dae0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00b      	beq.n	800daca <sys_timeout_abs+0xa6>
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	685a      	ldr	r2, [r3, #4]
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	1ad3      	subs	r3, r2, r3
 800dabe:	0fdb      	lsrs	r3, r3, #31
 800dac0:	f003 0301 	and.w	r3, r3, #1
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d007      	beq.n	800dada <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	693a      	ldr	r2, [r7, #16]
 800dad6:	601a      	str	r2, [r3, #0]
        break;
 800dad8:	e007      	b.n	800daea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	617b      	str	r3, [r7, #20]
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1e1      	bne.n	800daaa <sys_timeout_abs+0x86>
 800dae6:	e000      	b.n	800daea <sys_timeout_abs+0xc6>
    return;
 800dae8:	bf00      	nop
      }
    }
  }
}
 800daea:	3718      	adds	r7, #24
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	08013570 	.word	0x08013570
 800daf4:	080135a4 	.word	0x080135a4
 800daf8:	080135e4 	.word	0x080135e4
 800dafc:	20000540 	.word	0x20000540

0800db00 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b086      	sub	sp, #24
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	4798      	blx	r3

  now = sys_now();
 800db12:	f7f7 faef 	bl	80050f4 <sys_now>
 800db16:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	4b0f      	ldr	r3, [pc, #60]	; (800db5c <lwip_cyclic_timer+0x5c>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4413      	add	r3, r2
 800db22:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800db24:	68fa      	ldr	r2, [r7, #12]
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	1ad3      	subs	r3, r2, r3
 800db2a:	0fdb      	lsrs	r3, r3, #31
 800db2c:	f003 0301 	and.w	r3, r3, #1
 800db30:	b2db      	uxtb	r3, r3
 800db32:	2b00      	cmp	r3, #0
 800db34:	d009      	beq.n	800db4a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	4413      	add	r3, r2
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	4907      	ldr	r1, [pc, #28]	; (800db60 <lwip_cyclic_timer+0x60>)
 800db42:	4618      	mov	r0, r3
 800db44:	f7ff ff6e 	bl	800da24 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800db48:	e004      	b.n	800db54 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	4904      	ldr	r1, [pc, #16]	; (800db60 <lwip_cyclic_timer+0x60>)
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7ff ff68 	bl	800da24 <sys_timeout_abs>
}
 800db54:	bf00      	nop
 800db56:	3718      	adds	r7, #24
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	20000544 	.word	0x20000544
 800db60:	0800db01 	.word	0x0800db01

0800db64 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800db6a:	2301      	movs	r3, #1
 800db6c:	607b      	str	r3, [r7, #4]
 800db6e:	e00e      	b.n	800db8e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800db70:	4a0a      	ldr	r2, [pc, #40]	; (800db9c <sys_timeouts_init+0x38>)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	00db      	lsls	r3, r3, #3
 800db7c:	4a07      	ldr	r2, [pc, #28]	; (800db9c <sys_timeouts_init+0x38>)
 800db7e:	4413      	add	r3, r2
 800db80:	461a      	mov	r2, r3
 800db82:	4907      	ldr	r1, [pc, #28]	; (800dba0 <sys_timeouts_init+0x3c>)
 800db84:	f000 f80e 	bl	800dba4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	3301      	adds	r3, #1
 800db8c:	607b      	str	r3, [r7, #4]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2b02      	cmp	r3, #2
 800db92:	d9ed      	bls.n	800db70 <sys_timeouts_init+0xc>
  }
}
 800db94:	bf00      	nop
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	08014384 	.word	0x08014384
 800dba0:	0800db01 	.word	0x0800db01

0800dba4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b086      	sub	sp, #24
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbb6:	d306      	bcc.n	800dbc6 <sys_timeout+0x22>
 800dbb8:	4b0a      	ldr	r3, [pc, #40]	; (800dbe4 <sys_timeout+0x40>)
 800dbba:	f240 1229 	movw	r2, #297	; 0x129
 800dbbe:	490a      	ldr	r1, [pc, #40]	; (800dbe8 <sys_timeout+0x44>)
 800dbc0:	480a      	ldr	r0, [pc, #40]	; (800dbec <sys_timeout+0x48>)
 800dbc2:	f002 fd11 	bl	80105e8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dbc6:	f7f7 fa95 	bl	80050f4 <sys_now>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	4413      	add	r3, r2
 800dbd0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	68b9      	ldr	r1, [r7, #8]
 800dbd6:	6978      	ldr	r0, [r7, #20]
 800dbd8:	f7ff ff24 	bl	800da24 <sys_timeout_abs>
#endif
}
 800dbdc:	bf00      	nop
 800dbde:	3718      	adds	r7, #24
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	08013570 	.word	0x08013570
 800dbe8:	0801360c 	.word	0x0801360c
 800dbec:	080135e4 	.word	0x080135e4

0800dbf0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800dbf6:	f7f7 fa7d 	bl	80050f4 <sys_now>
 800dbfa:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800dbfc:	4b1a      	ldr	r3, [pc, #104]	; (800dc68 <sys_check_timeouts+0x78>)
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d001      	beq.n	800dc0a <sys_check_timeouts+0x1a>
 800dc06:	f7f9 f8cd 	bl	8006da4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800dc0a:	4b18      	ldr	r3, [pc, #96]	; (800dc6c <sys_check_timeouts+0x7c>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d022      	beq.n	800dc5c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	68fa      	ldr	r2, [r7, #12]
 800dc1c:	1ad3      	subs	r3, r2, r3
 800dc1e:	0fdb      	lsrs	r3, r3, #31
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d11a      	bne.n	800dc60 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4a0f      	ldr	r2, [pc, #60]	; (800dc6c <sys_check_timeouts+0x7c>)
 800dc30:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	4a0b      	ldr	r2, [pc, #44]	; (800dc70 <sys_check_timeouts+0x80>)
 800dc44:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dc46:	68b9      	ldr	r1, [r7, #8]
 800dc48:	2006      	movs	r0, #6
 800dc4a:	f7f8 fdd3 	bl	80067f4 <memp_free>
    if (handler != NULL) {
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d0d3      	beq.n	800dbfc <sys_check_timeouts+0xc>
      handler(arg);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6838      	ldr	r0, [r7, #0]
 800dc58:	4798      	blx	r3
  do {
 800dc5a:	e7cf      	b.n	800dbfc <sys_check_timeouts+0xc>
      return;
 800dc5c:	bf00      	nop
 800dc5e:	e000      	b.n	800dc62 <sys_check_timeouts+0x72>
      return;
 800dc60:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	20007148 	.word	0x20007148
 800dc6c:	20000540 	.word	0x20000540
 800dc70:	20000544 	.word	0x20000544

0800dc74 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dc78:	f002 fcce 	bl	8010618 <rand>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dc8a:	b29a      	uxth	r2, r3
 800dc8c:	4b01      	ldr	r3, [pc, #4]	; (800dc94 <udp_init+0x20>)
 800dc8e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dc90:	bf00      	nop
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	20000010 	.word	0x20000010

0800dc98 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	4613      	mov	r3, r2
 800dca4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d105      	bne.n	800dcb8 <udp_input_local_match+0x20>
 800dcac:	4b27      	ldr	r3, [pc, #156]	; (800dd4c <udp_input_local_match+0xb4>)
 800dcae:	2287      	movs	r2, #135	; 0x87
 800dcb0:	4927      	ldr	r1, [pc, #156]	; (800dd50 <udp_input_local_match+0xb8>)
 800dcb2:	4828      	ldr	r0, [pc, #160]	; (800dd54 <udp_input_local_match+0xbc>)
 800dcb4:	f002 fc98 	bl	80105e8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d105      	bne.n	800dcca <udp_input_local_match+0x32>
 800dcbe:	4b23      	ldr	r3, [pc, #140]	; (800dd4c <udp_input_local_match+0xb4>)
 800dcc0:	2288      	movs	r2, #136	; 0x88
 800dcc2:	4925      	ldr	r1, [pc, #148]	; (800dd58 <udp_input_local_match+0xc0>)
 800dcc4:	4823      	ldr	r0, [pc, #140]	; (800dd54 <udp_input_local_match+0xbc>)
 800dcc6:	f002 fc8f 	bl	80105e8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	7a1b      	ldrb	r3, [r3, #8]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00b      	beq.n	800dcea <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	7a1a      	ldrb	r2, [r3, #8]
 800dcd6:	4b21      	ldr	r3, [pc, #132]	; (800dd5c <udp_input_local_match+0xc4>)
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcde:	3301      	adds	r3, #1
 800dce0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d001      	beq.n	800dcea <udp_input_local_match+0x52>
    return 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	e02b      	b.n	800dd42 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800dcea:	79fb      	ldrb	r3, [r7, #7]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d018      	beq.n	800dd22 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d013      	beq.n	800dd1e <udp_input_local_match+0x86>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00f      	beq.n	800dd1e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dcfe:	4b17      	ldr	r3, [pc, #92]	; (800dd5c <udp_input_local_match+0xc4>)
 800dd00:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd06:	d00a      	beq.n	800dd1e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	4b13      	ldr	r3, [pc, #76]	; (800dd5c <udp_input_local_match+0xc4>)
 800dd0e:	695b      	ldr	r3, [r3, #20]
 800dd10:	405a      	eors	r2, r3
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	3308      	adds	r3, #8
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d110      	bne.n	800dd40 <udp_input_local_match+0xa8>
          return 1;
 800dd1e:	2301      	movs	r3, #1
 800dd20:	e00f      	b.n	800dd42 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d009      	beq.n	800dd3c <udp_input_local_match+0xa4>
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d005      	beq.n	800dd3c <udp_input_local_match+0xa4>
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	4b09      	ldr	r3, [pc, #36]	; (800dd5c <udp_input_local_match+0xc4>)
 800dd36:	695b      	ldr	r3, [r3, #20]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d101      	bne.n	800dd40 <udp_input_local_match+0xa8>
        return 1;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	e000      	b.n	800dd42 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	08013658 	.word	0x08013658
 800dd50:	08013688 	.word	0x08013688
 800dd54:	080136ac 	.word	0x080136ac
 800dd58:	080136d4 	.word	0x080136d4
 800dd5c:	20003c0c 	.word	0x20003c0c

0800dd60 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800dd60:	b590      	push	{r4, r7, lr}
 800dd62:	b08d      	sub	sp, #52	; 0x34
 800dd64:	af02      	add	r7, sp, #8
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d105      	bne.n	800dd80 <udp_input+0x20>
 800dd74:	4b7c      	ldr	r3, [pc, #496]	; (800df68 <udp_input+0x208>)
 800dd76:	22cf      	movs	r2, #207	; 0xcf
 800dd78:	497c      	ldr	r1, [pc, #496]	; (800df6c <udp_input+0x20c>)
 800dd7a:	487d      	ldr	r0, [pc, #500]	; (800df70 <udp_input+0x210>)
 800dd7c:	f002 fc34 	bl	80105e8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d105      	bne.n	800dd92 <udp_input+0x32>
 800dd86:	4b78      	ldr	r3, [pc, #480]	; (800df68 <udp_input+0x208>)
 800dd88:	22d0      	movs	r2, #208	; 0xd0
 800dd8a:	497a      	ldr	r1, [pc, #488]	; (800df74 <udp_input+0x214>)
 800dd8c:	4878      	ldr	r0, [pc, #480]	; (800df70 <udp_input+0x210>)
 800dd8e:	f002 fc2b 	bl	80105e8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	895b      	ldrh	r3, [r3, #10]
 800dd96:	2b07      	cmp	r3, #7
 800dd98:	d803      	bhi.n	800dda2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7f9 fb38 	bl	8007410 <pbuf_free>
    goto end;
 800dda0:	e0de      	b.n	800df60 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dda8:	4b73      	ldr	r3, [pc, #460]	; (800df78 <udp_input+0x218>)
 800ddaa:	695a      	ldr	r2, [r3, #20]
 800ddac:	4b72      	ldr	r3, [pc, #456]	; (800df78 <udp_input+0x218>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	4610      	mov	r0, r2
 800ddb4:	f001 fc86 	bl	800f6c4 <ip4_addr_isbroadcast_u32>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	881b      	ldrh	r3, [r3, #0]
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7f8 f83e 	bl	8005e44 <lwip_htons>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	885b      	ldrh	r3, [r3, #2]
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7f8 f836 	bl	8005e44 <lwip_htons>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800dddc:	2300      	movs	r3, #0
 800ddde:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800dde0:	2300      	movs	r3, #0
 800dde2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800dde4:	2300      	movs	r3, #0
 800dde6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dde8:	4b64      	ldr	r3, [pc, #400]	; (800df7c <udp_input+0x21c>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	627b      	str	r3, [r7, #36]	; 0x24
 800ddee:	e054      	b.n	800de9a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ddf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf2:	8a5b      	ldrh	r3, [r3, #18]
 800ddf4:	89fa      	ldrh	r2, [r7, #14]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d14a      	bne.n	800de90 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ddfa:	7cfb      	ldrb	r3, [r7, #19]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	6839      	ldr	r1, [r7, #0]
 800de00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de02:	f7ff ff49 	bl	800dc98 <udp_input_local_match>
 800de06:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d041      	beq.n	800de90 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0e:	7c1b      	ldrb	r3, [r3, #16]
 800de10:	f003 0304 	and.w	r3, r3, #4
 800de14:	2b00      	cmp	r3, #0
 800de16:	d11d      	bne.n	800de54 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d102      	bne.n	800de24 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800de1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de20:	61fb      	str	r3, [r7, #28]
 800de22:	e017      	b.n	800de54 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800de24:	7cfb      	ldrb	r3, [r7, #19]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d014      	beq.n	800de54 <udp_input+0xf4>
 800de2a:	4b53      	ldr	r3, [pc, #332]	; (800df78 <udp_input+0x218>)
 800de2c:	695b      	ldr	r3, [r3, #20]
 800de2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de32:	d10f      	bne.n	800de54 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	3304      	adds	r3, #4
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d008      	beq.n	800de54 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800de42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de44:	681a      	ldr	r2, [r3, #0]
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	3304      	adds	r3, #4
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d101      	bne.n	800de54 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800de50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de52:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800de54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de56:	8a9b      	ldrh	r3, [r3, #20]
 800de58:	8a3a      	ldrh	r2, [r7, #16]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d118      	bne.n	800de90 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800de62:	2b00      	cmp	r3, #0
 800de64:	d005      	beq.n	800de72 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800de66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	4b43      	ldr	r3, [pc, #268]	; (800df78 <udp_input+0x218>)
 800de6c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800de6e:	429a      	cmp	r2, r3
 800de70:	d10e      	bne.n	800de90 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800de72:	6a3b      	ldr	r3, [r7, #32]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d014      	beq.n	800dea2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	68da      	ldr	r2, [r3, #12]
 800de7c:	6a3b      	ldr	r3, [r7, #32]
 800de7e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800de80:	4b3e      	ldr	r3, [pc, #248]	; (800df7c <udp_input+0x21c>)
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de86:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800de88:	4a3c      	ldr	r2, [pc, #240]	; (800df7c <udp_input+0x21c>)
 800de8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800de8e:	e008      	b.n	800dea2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800de90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de92:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	627b      	str	r3, [r7, #36]	; 0x24
 800de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d1a7      	bne.n	800ddf0 <udp_input+0x90>
 800dea0:	e000      	b.n	800dea4 <udp_input+0x144>
        break;
 800dea2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800dea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d101      	bne.n	800deae <udp_input+0x14e>
    pcb = uncon_pcb;
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800deae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <udp_input+0x15a>
    for_us = 1;
 800deb4:	2301      	movs	r3, #1
 800deb6:	76fb      	strb	r3, [r7, #27]
 800deb8:	e00a      	b.n	800ded0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	3304      	adds	r3, #4
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	4b2d      	ldr	r3, [pc, #180]	; (800df78 <udp_input+0x218>)
 800dec2:	695b      	ldr	r3, [r3, #20]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	bf0c      	ite	eq
 800dec8:	2301      	moveq	r3, #1
 800deca:	2300      	movne	r3, #0
 800decc:	b2db      	uxtb	r3, r3
 800dece:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ded0:	7efb      	ldrb	r3, [r7, #27]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d041      	beq.n	800df5a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ded6:	2108      	movs	r1, #8
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7f9 fa13 	bl	8007304 <pbuf_remove_header>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d00a      	beq.n	800defa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800dee4:	4b20      	ldr	r3, [pc, #128]	; (800df68 <udp_input+0x208>)
 800dee6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800deea:	4925      	ldr	r1, [pc, #148]	; (800df80 <udp_input+0x220>)
 800deec:	4820      	ldr	r0, [pc, #128]	; (800df70 <udp_input+0x210>)
 800deee:	f002 fb7b 	bl	80105e8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f7f9 fa8c 	bl	8007410 <pbuf_free>
      goto end;
 800def8:	e032      	b.n	800df60 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800defa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defc:	2b00      	cmp	r3, #0
 800defe:	d012      	beq.n	800df26 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800df00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df02:	699b      	ldr	r3, [r3, #24]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00a      	beq.n	800df1e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0a:	699c      	ldr	r4, [r3, #24]
 800df0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0e:	69d8      	ldr	r0, [r3, #28]
 800df10:	8a3b      	ldrh	r3, [r7, #16]
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	4b1b      	ldr	r3, [pc, #108]	; (800df84 <udp_input+0x224>)
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df1a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800df1c:	e021      	b.n	800df62 <udp_input+0x202>
        pbuf_free(p);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7f9 fa76 	bl	8007410 <pbuf_free>
        goto end;
 800df24:	e01c      	b.n	800df60 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800df26:	7cfb      	ldrb	r3, [r7, #19]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d112      	bne.n	800df52 <udp_input+0x1f2>
 800df2c:	4b12      	ldr	r3, [pc, #72]	; (800df78 <udp_input+0x218>)
 800df2e:	695b      	ldr	r3, [r3, #20]
 800df30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df34:	2be0      	cmp	r3, #224	; 0xe0
 800df36:	d00c      	beq.n	800df52 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800df38:	4b0f      	ldr	r3, [pc, #60]	; (800df78 <udp_input+0x218>)
 800df3a:	899b      	ldrh	r3, [r3, #12]
 800df3c:	3308      	adds	r3, #8
 800df3e:	b29b      	uxth	r3, r3
 800df40:	b21b      	sxth	r3, r3
 800df42:	4619      	mov	r1, r3
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f7f9 fa50 	bl	80073ea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800df4a:	2103      	movs	r1, #3
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f001 f89b 	bl	800f088 <icmp_dest_unreach>
      pbuf_free(p);
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f7f9 fa5c 	bl	8007410 <pbuf_free>
  return;
 800df58:	e003      	b.n	800df62 <udp_input+0x202>
    pbuf_free(p);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7f9 fa58 	bl	8007410 <pbuf_free>
  return;
 800df60:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800df62:	372c      	adds	r7, #44	; 0x2c
 800df64:	46bd      	mov	sp, r7
 800df66:	bd90      	pop	{r4, r7, pc}
 800df68:	08013658 	.word	0x08013658
 800df6c:	080136fc 	.word	0x080136fc
 800df70:	080136ac 	.word	0x080136ac
 800df74:	08013714 	.word	0x08013714
 800df78:	20003c0c 	.word	0x20003c0c
 800df7c:	20007168 	.word	0x20007168
 800df80:	08013730 	.word	0x08013730
 800df84:	20003c1c 	.word	0x20003c1c

0800df88 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800df88:	b480      	push	{r7}
 800df8a:	b085      	sub	sp, #20
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d01e      	beq.n	800dfd6 <udp_netif_ip_addr_changed+0x4e>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d01a      	beq.n	800dfd6 <udp_netif_ip_addr_changed+0x4e>
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d017      	beq.n	800dfd6 <udp_netif_ip_addr_changed+0x4e>
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d013      	beq.n	800dfd6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dfae:	4b0d      	ldr	r3, [pc, #52]	; (800dfe4 <udp_netif_ip_addr_changed+0x5c>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	60fb      	str	r3, [r7, #12]
 800dfb4:	e00c      	b.n	800dfd0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d103      	bne.n	800dfca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	60fb      	str	r3, [r7, #12]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d1ef      	bne.n	800dfb6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800dfd6:	bf00      	nop
 800dfd8:	3714      	adds	r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	20007168 	.word	0x20007168

0800dfe8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800dff0:	4915      	ldr	r1, [pc, #84]	; (800e048 <etharp_free_entry+0x60>)
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	4613      	mov	r3, r2
 800dff6:	005b      	lsls	r3, r3, #1
 800dff8:	4413      	add	r3, r2
 800dffa:	00db      	lsls	r3, r3, #3
 800dffc:	440b      	add	r3, r1
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d013      	beq.n	800e02c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e004:	4910      	ldr	r1, [pc, #64]	; (800e048 <etharp_free_entry+0x60>)
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	4613      	mov	r3, r2
 800e00a:	005b      	lsls	r3, r3, #1
 800e00c:	4413      	add	r3, r2
 800e00e:	00db      	lsls	r3, r3, #3
 800e010:	440b      	add	r3, r1
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4618      	mov	r0, r3
 800e016:	f7f9 f9fb 	bl	8007410 <pbuf_free>
    arp_table[i].q = NULL;
 800e01a:	490b      	ldr	r1, [pc, #44]	; (800e048 <etharp_free_entry+0x60>)
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	4613      	mov	r3, r2
 800e020:	005b      	lsls	r3, r3, #1
 800e022:	4413      	add	r3, r2
 800e024:	00db      	lsls	r3, r3, #3
 800e026:	440b      	add	r3, r1
 800e028:	2200      	movs	r2, #0
 800e02a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e02c:	4906      	ldr	r1, [pc, #24]	; (800e048 <etharp_free_entry+0x60>)
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	4613      	mov	r3, r2
 800e032:	005b      	lsls	r3, r3, #1
 800e034:	4413      	add	r3, r2
 800e036:	00db      	lsls	r3, r3, #3
 800e038:	440b      	add	r3, r1
 800e03a:	3314      	adds	r3, #20
 800e03c:	2200      	movs	r2, #0
 800e03e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	2000054c 	.word	0x2000054c

0800e04c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e052:	2300      	movs	r3, #0
 800e054:	607b      	str	r3, [r7, #4]
 800e056:	e096      	b.n	800e186 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e058:	494f      	ldr	r1, [pc, #316]	; (800e198 <etharp_tmr+0x14c>)
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	4613      	mov	r3, r2
 800e05e:	005b      	lsls	r3, r3, #1
 800e060:	4413      	add	r3, r2
 800e062:	00db      	lsls	r3, r3, #3
 800e064:	440b      	add	r3, r1
 800e066:	3314      	adds	r3, #20
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e06c:	78fb      	ldrb	r3, [r7, #3]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f000 8086 	beq.w	800e180 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e074:	4948      	ldr	r1, [pc, #288]	; (800e198 <etharp_tmr+0x14c>)
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	4613      	mov	r3, r2
 800e07a:	005b      	lsls	r3, r3, #1
 800e07c:	4413      	add	r3, r2
 800e07e:	00db      	lsls	r3, r3, #3
 800e080:	440b      	add	r3, r1
 800e082:	3312      	adds	r3, #18
 800e084:	881b      	ldrh	r3, [r3, #0]
 800e086:	3301      	adds	r3, #1
 800e088:	b298      	uxth	r0, r3
 800e08a:	4943      	ldr	r1, [pc, #268]	; (800e198 <etharp_tmr+0x14c>)
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	4613      	mov	r3, r2
 800e090:	005b      	lsls	r3, r3, #1
 800e092:	4413      	add	r3, r2
 800e094:	00db      	lsls	r3, r3, #3
 800e096:	440b      	add	r3, r1
 800e098:	3312      	adds	r3, #18
 800e09a:	4602      	mov	r2, r0
 800e09c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e09e:	493e      	ldr	r1, [pc, #248]	; (800e198 <etharp_tmr+0x14c>)
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	005b      	lsls	r3, r3, #1
 800e0a6:	4413      	add	r3, r2
 800e0a8:	00db      	lsls	r3, r3, #3
 800e0aa:	440b      	add	r3, r1
 800e0ac:	3312      	adds	r3, #18
 800e0ae:	881b      	ldrh	r3, [r3, #0]
 800e0b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e0b4:	d215      	bcs.n	800e0e2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e0b6:	4938      	ldr	r1, [pc, #224]	; (800e198 <etharp_tmr+0x14c>)
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	005b      	lsls	r3, r3, #1
 800e0be:	4413      	add	r3, r2
 800e0c0:	00db      	lsls	r3, r3, #3
 800e0c2:	440b      	add	r3, r1
 800e0c4:	3314      	adds	r3, #20
 800e0c6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d10e      	bne.n	800e0ea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e0cc:	4932      	ldr	r1, [pc, #200]	; (800e198 <etharp_tmr+0x14c>)
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	4413      	add	r3, r2
 800e0d6:	00db      	lsls	r3, r3, #3
 800e0d8:	440b      	add	r3, r1
 800e0da:	3312      	adds	r3, #18
 800e0dc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e0de:	2b04      	cmp	r3, #4
 800e0e0:	d903      	bls.n	800e0ea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f7ff ff80 	bl	800dfe8 <etharp_free_entry>
 800e0e8:	e04a      	b.n	800e180 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e0ea:	492b      	ldr	r1, [pc, #172]	; (800e198 <etharp_tmr+0x14c>)
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	005b      	lsls	r3, r3, #1
 800e0f2:	4413      	add	r3, r2
 800e0f4:	00db      	lsls	r3, r3, #3
 800e0f6:	440b      	add	r3, r1
 800e0f8:	3314      	adds	r3, #20
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	2b03      	cmp	r3, #3
 800e0fe:	d10a      	bne.n	800e116 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e100:	4925      	ldr	r1, [pc, #148]	; (800e198 <etharp_tmr+0x14c>)
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	4613      	mov	r3, r2
 800e106:	005b      	lsls	r3, r3, #1
 800e108:	4413      	add	r3, r2
 800e10a:	00db      	lsls	r3, r3, #3
 800e10c:	440b      	add	r3, r1
 800e10e:	3314      	adds	r3, #20
 800e110:	2204      	movs	r2, #4
 800e112:	701a      	strb	r2, [r3, #0]
 800e114:	e034      	b.n	800e180 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e116:	4920      	ldr	r1, [pc, #128]	; (800e198 <etharp_tmr+0x14c>)
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	4613      	mov	r3, r2
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	4413      	add	r3, r2
 800e120:	00db      	lsls	r3, r3, #3
 800e122:	440b      	add	r3, r1
 800e124:	3314      	adds	r3, #20
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	2b04      	cmp	r3, #4
 800e12a:	d10a      	bne.n	800e142 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e12c:	491a      	ldr	r1, [pc, #104]	; (800e198 <etharp_tmr+0x14c>)
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	4613      	mov	r3, r2
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	4413      	add	r3, r2
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	440b      	add	r3, r1
 800e13a:	3314      	adds	r3, #20
 800e13c:	2202      	movs	r2, #2
 800e13e:	701a      	strb	r2, [r3, #0]
 800e140:	e01e      	b.n	800e180 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e142:	4915      	ldr	r1, [pc, #84]	; (800e198 <etharp_tmr+0x14c>)
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	4613      	mov	r3, r2
 800e148:	005b      	lsls	r3, r3, #1
 800e14a:	4413      	add	r3, r2
 800e14c:	00db      	lsls	r3, r3, #3
 800e14e:	440b      	add	r3, r1
 800e150:	3314      	adds	r3, #20
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	2b01      	cmp	r3, #1
 800e156:	d113      	bne.n	800e180 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e158:	490f      	ldr	r1, [pc, #60]	; (800e198 <etharp_tmr+0x14c>)
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	4613      	mov	r3, r2
 800e15e:	005b      	lsls	r3, r3, #1
 800e160:	4413      	add	r3, r2
 800e162:	00db      	lsls	r3, r3, #3
 800e164:	440b      	add	r3, r1
 800e166:	3308      	adds	r3, #8
 800e168:	6818      	ldr	r0, [r3, #0]
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	4613      	mov	r3, r2
 800e16e:	005b      	lsls	r3, r3, #1
 800e170:	4413      	add	r3, r2
 800e172:	00db      	lsls	r3, r3, #3
 800e174:	4a08      	ldr	r2, [pc, #32]	; (800e198 <etharp_tmr+0x14c>)
 800e176:	4413      	add	r3, r2
 800e178:	3304      	adds	r3, #4
 800e17a:	4619      	mov	r1, r3
 800e17c:	f000 fe6e 	bl	800ee5c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	3301      	adds	r3, #1
 800e184:	607b      	str	r3, [r7, #4]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b09      	cmp	r3, #9
 800e18a:	f77f af65 	ble.w	800e058 <etharp_tmr+0xc>
      }
    }
  }
}
 800e18e:	bf00      	nop
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	2000054c 	.word	0x2000054c

0800e19c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b08a      	sub	sp, #40	; 0x28
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	607a      	str	r2, [r7, #4]
 800e1a8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e1aa:	230a      	movs	r3, #10
 800e1ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e1ae:	230a      	movs	r3, #10
 800e1b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e1b2:	230a      	movs	r3, #10
 800e1b4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e1ba:	230a      	movs	r3, #10
 800e1bc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	83bb      	strh	r3, [r7, #28]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	837b      	strh	r3, [r7, #26]
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	843b      	strh	r3, [r7, #32]
 800e1ce:	e0ae      	b.n	800e32e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e1d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e1d4:	49a6      	ldr	r1, [pc, #664]	; (800e470 <etharp_find_entry+0x2d4>)
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	005b      	lsls	r3, r3, #1
 800e1da:	4413      	add	r3, r2
 800e1dc:	00db      	lsls	r3, r3, #3
 800e1de:	440b      	add	r3, r1
 800e1e0:	3314      	adds	r3, #20
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e1e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e1ea:	2b0a      	cmp	r3, #10
 800e1ec:	d105      	bne.n	800e1fa <etharp_find_entry+0x5e>
 800e1ee:	7dfb      	ldrb	r3, [r7, #23]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d102      	bne.n	800e1fa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e1f4:	8c3b      	ldrh	r3, [r7, #32]
 800e1f6:	847b      	strh	r3, [r7, #34]	; 0x22
 800e1f8:	e095      	b.n	800e326 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e1fa:	7dfb      	ldrb	r3, [r7, #23]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	f000 8092 	beq.w	800e326 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e202:	7dfb      	ldrb	r3, [r7, #23]
 800e204:	2b01      	cmp	r3, #1
 800e206:	d009      	beq.n	800e21c <etharp_find_entry+0x80>
 800e208:	7dfb      	ldrb	r3, [r7, #23]
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d806      	bhi.n	800e21c <etharp_find_entry+0x80>
 800e20e:	4b99      	ldr	r3, [pc, #612]	; (800e474 <etharp_find_entry+0x2d8>)
 800e210:	f44f 7292 	mov.w	r2, #292	; 0x124
 800e214:	4998      	ldr	r1, [pc, #608]	; (800e478 <etharp_find_entry+0x2dc>)
 800e216:	4899      	ldr	r0, [pc, #612]	; (800e47c <etharp_find_entry+0x2e0>)
 800e218:	f002 f9e6 	bl	80105e8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d020      	beq.n	800e264 <etharp_find_entry+0xc8>
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	6819      	ldr	r1, [r3, #0]
 800e226:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e22a:	4891      	ldr	r0, [pc, #580]	; (800e470 <etharp_find_entry+0x2d4>)
 800e22c:	4613      	mov	r3, r2
 800e22e:	005b      	lsls	r3, r3, #1
 800e230:	4413      	add	r3, r2
 800e232:	00db      	lsls	r3, r3, #3
 800e234:	4403      	add	r3, r0
 800e236:	3304      	adds	r3, #4
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4299      	cmp	r1, r3
 800e23c:	d112      	bne.n	800e264 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00c      	beq.n	800e25e <etharp_find_entry+0xc2>
 800e244:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e248:	4989      	ldr	r1, [pc, #548]	; (800e470 <etharp_find_entry+0x2d4>)
 800e24a:	4613      	mov	r3, r2
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	4413      	add	r3, r2
 800e250:	00db      	lsls	r3, r3, #3
 800e252:	440b      	add	r3, r1
 800e254:	3308      	adds	r3, #8
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d102      	bne.n	800e264 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e25e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e262:	e100      	b.n	800e466 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e264:	7dfb      	ldrb	r3, [r7, #23]
 800e266:	2b01      	cmp	r3, #1
 800e268:	d140      	bne.n	800e2ec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e26a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e26e:	4980      	ldr	r1, [pc, #512]	; (800e470 <etharp_find_entry+0x2d4>)
 800e270:	4613      	mov	r3, r2
 800e272:	005b      	lsls	r3, r3, #1
 800e274:	4413      	add	r3, r2
 800e276:	00db      	lsls	r3, r3, #3
 800e278:	440b      	add	r3, r1
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d01a      	beq.n	800e2b6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e280:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e284:	497a      	ldr	r1, [pc, #488]	; (800e470 <etharp_find_entry+0x2d4>)
 800e286:	4613      	mov	r3, r2
 800e288:	005b      	lsls	r3, r3, #1
 800e28a:	4413      	add	r3, r2
 800e28c:	00db      	lsls	r3, r3, #3
 800e28e:	440b      	add	r3, r1
 800e290:	3312      	adds	r3, #18
 800e292:	881b      	ldrh	r3, [r3, #0]
 800e294:	8bba      	ldrh	r2, [r7, #28]
 800e296:	429a      	cmp	r2, r3
 800e298:	d845      	bhi.n	800e326 <etharp_find_entry+0x18a>
            old_queue = i;
 800e29a:	8c3b      	ldrh	r3, [r7, #32]
 800e29c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e29e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2a2:	4973      	ldr	r1, [pc, #460]	; (800e470 <etharp_find_entry+0x2d4>)
 800e2a4:	4613      	mov	r3, r2
 800e2a6:	005b      	lsls	r3, r3, #1
 800e2a8:	4413      	add	r3, r2
 800e2aa:	00db      	lsls	r3, r3, #3
 800e2ac:	440b      	add	r3, r1
 800e2ae:	3312      	adds	r3, #18
 800e2b0:	881b      	ldrh	r3, [r3, #0]
 800e2b2:	83bb      	strh	r3, [r7, #28]
 800e2b4:	e037      	b.n	800e326 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e2b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2ba:	496d      	ldr	r1, [pc, #436]	; (800e470 <etharp_find_entry+0x2d4>)
 800e2bc:	4613      	mov	r3, r2
 800e2be:	005b      	lsls	r3, r3, #1
 800e2c0:	4413      	add	r3, r2
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	440b      	add	r3, r1
 800e2c6:	3312      	adds	r3, #18
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	8b7a      	ldrh	r2, [r7, #26]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d82a      	bhi.n	800e326 <etharp_find_entry+0x18a>
            old_pending = i;
 800e2d0:	8c3b      	ldrh	r3, [r7, #32]
 800e2d2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e2d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2d8:	4965      	ldr	r1, [pc, #404]	; (800e470 <etharp_find_entry+0x2d4>)
 800e2da:	4613      	mov	r3, r2
 800e2dc:	005b      	lsls	r3, r3, #1
 800e2de:	4413      	add	r3, r2
 800e2e0:	00db      	lsls	r3, r3, #3
 800e2e2:	440b      	add	r3, r1
 800e2e4:	3312      	adds	r3, #18
 800e2e6:	881b      	ldrh	r3, [r3, #0]
 800e2e8:	837b      	strh	r3, [r7, #26]
 800e2ea:	e01c      	b.n	800e326 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e2ec:	7dfb      	ldrb	r3, [r7, #23]
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d919      	bls.n	800e326 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e2f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2f6:	495e      	ldr	r1, [pc, #376]	; (800e470 <etharp_find_entry+0x2d4>)
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	005b      	lsls	r3, r3, #1
 800e2fc:	4413      	add	r3, r2
 800e2fe:	00db      	lsls	r3, r3, #3
 800e300:	440b      	add	r3, r1
 800e302:	3312      	adds	r3, #18
 800e304:	881b      	ldrh	r3, [r3, #0]
 800e306:	8b3a      	ldrh	r2, [r7, #24]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d80c      	bhi.n	800e326 <etharp_find_entry+0x18a>
            old_stable = i;
 800e30c:	8c3b      	ldrh	r3, [r7, #32]
 800e30e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e310:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e314:	4956      	ldr	r1, [pc, #344]	; (800e470 <etharp_find_entry+0x2d4>)
 800e316:	4613      	mov	r3, r2
 800e318:	005b      	lsls	r3, r3, #1
 800e31a:	4413      	add	r3, r2
 800e31c:	00db      	lsls	r3, r3, #3
 800e31e:	440b      	add	r3, r1
 800e320:	3312      	adds	r3, #18
 800e322:	881b      	ldrh	r3, [r3, #0]
 800e324:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e326:	8c3b      	ldrh	r3, [r7, #32]
 800e328:	3301      	adds	r3, #1
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	843b      	strh	r3, [r7, #32]
 800e32e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e332:	2b09      	cmp	r3, #9
 800e334:	f77f af4c 	ble.w	800e1d0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e338:	7afb      	ldrb	r3, [r7, #11]
 800e33a:	f003 0302 	and.w	r3, r3, #2
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d108      	bne.n	800e354 <etharp_find_entry+0x1b8>
 800e342:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e346:	2b0a      	cmp	r3, #10
 800e348:	d107      	bne.n	800e35a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e34a:	7afb      	ldrb	r3, [r7, #11]
 800e34c:	f003 0301 	and.w	r3, r3, #1
 800e350:	2b00      	cmp	r3, #0
 800e352:	d102      	bne.n	800e35a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e354:	f04f 33ff 	mov.w	r3, #4294967295
 800e358:	e085      	b.n	800e466 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e35a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e35e:	2b09      	cmp	r3, #9
 800e360:	dc02      	bgt.n	800e368 <etharp_find_entry+0x1cc>
    i = empty;
 800e362:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e364:	843b      	strh	r3, [r7, #32]
 800e366:	e039      	b.n	800e3dc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e368:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e36c:	2b09      	cmp	r3, #9
 800e36e:	dc14      	bgt.n	800e39a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e372:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e374:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e378:	493d      	ldr	r1, [pc, #244]	; (800e470 <etharp_find_entry+0x2d4>)
 800e37a:	4613      	mov	r3, r2
 800e37c:	005b      	lsls	r3, r3, #1
 800e37e:	4413      	add	r3, r2
 800e380:	00db      	lsls	r3, r3, #3
 800e382:	440b      	add	r3, r1
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d018      	beq.n	800e3bc <etharp_find_entry+0x220>
 800e38a:	4b3a      	ldr	r3, [pc, #232]	; (800e474 <etharp_find_entry+0x2d8>)
 800e38c:	f240 126d 	movw	r2, #365	; 0x16d
 800e390:	493b      	ldr	r1, [pc, #236]	; (800e480 <etharp_find_entry+0x2e4>)
 800e392:	483a      	ldr	r0, [pc, #232]	; (800e47c <etharp_find_entry+0x2e0>)
 800e394:	f002 f928 	bl	80105e8 <iprintf>
 800e398:	e010      	b.n	800e3bc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e39a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e39e:	2b09      	cmp	r3, #9
 800e3a0:	dc02      	bgt.n	800e3a8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e3a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3a4:	843b      	strh	r3, [r7, #32]
 800e3a6:	e009      	b.n	800e3bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e3a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e3ac:	2b09      	cmp	r3, #9
 800e3ae:	dc02      	bgt.n	800e3b6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e3b0:	8bfb      	ldrh	r3, [r7, #30]
 800e3b2:	843b      	strh	r3, [r7, #32]
 800e3b4:	e002      	b.n	800e3bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ba:	e054      	b.n	800e466 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e3bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e3c0:	2b09      	cmp	r3, #9
 800e3c2:	dd06      	ble.n	800e3d2 <etharp_find_entry+0x236>
 800e3c4:	4b2b      	ldr	r3, [pc, #172]	; (800e474 <etharp_find_entry+0x2d8>)
 800e3c6:	f240 127f 	movw	r2, #383	; 0x17f
 800e3ca:	492e      	ldr	r1, [pc, #184]	; (800e484 <etharp_find_entry+0x2e8>)
 800e3cc:	482b      	ldr	r0, [pc, #172]	; (800e47c <etharp_find_entry+0x2e0>)
 800e3ce:	f002 f90b 	bl	80105e8 <iprintf>
    etharp_free_entry(i);
 800e3d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff fe06 	bl	800dfe8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e3dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e3e0:	2b09      	cmp	r3, #9
 800e3e2:	dd06      	ble.n	800e3f2 <etharp_find_entry+0x256>
 800e3e4:	4b23      	ldr	r3, [pc, #140]	; (800e474 <etharp_find_entry+0x2d8>)
 800e3e6:	f240 1283 	movw	r2, #387	; 0x183
 800e3ea:	4926      	ldr	r1, [pc, #152]	; (800e484 <etharp_find_entry+0x2e8>)
 800e3ec:	4823      	ldr	r0, [pc, #140]	; (800e47c <etharp_find_entry+0x2e0>)
 800e3ee:	f002 f8fb 	bl	80105e8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e3f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e3f6:	491e      	ldr	r1, [pc, #120]	; (800e470 <etharp_find_entry+0x2d4>)
 800e3f8:	4613      	mov	r3, r2
 800e3fa:	005b      	lsls	r3, r3, #1
 800e3fc:	4413      	add	r3, r2
 800e3fe:	00db      	lsls	r3, r3, #3
 800e400:	440b      	add	r3, r1
 800e402:	3314      	adds	r3, #20
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d006      	beq.n	800e418 <etharp_find_entry+0x27c>
 800e40a:	4b1a      	ldr	r3, [pc, #104]	; (800e474 <etharp_find_entry+0x2d8>)
 800e40c:	f240 1285 	movw	r2, #389	; 0x185
 800e410:	491d      	ldr	r1, [pc, #116]	; (800e488 <etharp_find_entry+0x2ec>)
 800e412:	481a      	ldr	r0, [pc, #104]	; (800e47c <etharp_find_entry+0x2e0>)
 800e414:	f002 f8e8 	bl	80105e8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d00b      	beq.n	800e436 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e41e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6819      	ldr	r1, [r3, #0]
 800e426:	4812      	ldr	r0, [pc, #72]	; (800e470 <etharp_find_entry+0x2d4>)
 800e428:	4613      	mov	r3, r2
 800e42a:	005b      	lsls	r3, r3, #1
 800e42c:	4413      	add	r3, r2
 800e42e:	00db      	lsls	r3, r3, #3
 800e430:	4403      	add	r3, r0
 800e432:	3304      	adds	r3, #4
 800e434:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e436:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e43a:	490d      	ldr	r1, [pc, #52]	; (800e470 <etharp_find_entry+0x2d4>)
 800e43c:	4613      	mov	r3, r2
 800e43e:	005b      	lsls	r3, r3, #1
 800e440:	4413      	add	r3, r2
 800e442:	00db      	lsls	r3, r3, #3
 800e444:	440b      	add	r3, r1
 800e446:	3312      	adds	r3, #18
 800e448:	2200      	movs	r2, #0
 800e44a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e44c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e450:	4907      	ldr	r1, [pc, #28]	; (800e470 <etharp_find_entry+0x2d4>)
 800e452:	4613      	mov	r3, r2
 800e454:	005b      	lsls	r3, r3, #1
 800e456:	4413      	add	r3, r2
 800e458:	00db      	lsls	r3, r3, #3
 800e45a:	440b      	add	r3, r1
 800e45c:	3308      	adds	r3, #8
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e462:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e466:	4618      	mov	r0, r3
 800e468:	3728      	adds	r7, #40	; 0x28
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	2000054c 	.word	0x2000054c
 800e474:	080139bc 	.word	0x080139bc
 800e478:	080139f4 	.word	0x080139f4
 800e47c:	08013a34 	.word	0x08013a34
 800e480:	08013a5c 	.word	0x08013a5c
 800e484:	08013a74 	.word	0x08013a74
 800e488:	08013a88 	.word	0x08013a88

0800e48c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b088      	sub	sp, #32
 800e490:	af02      	add	r7, sp, #8
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
 800e498:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e4a0:	2b06      	cmp	r3, #6
 800e4a2:	d006      	beq.n	800e4b2 <etharp_update_arp_entry+0x26>
 800e4a4:	4b48      	ldr	r3, [pc, #288]	; (800e5c8 <etharp_update_arp_entry+0x13c>)
 800e4a6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e4aa:	4948      	ldr	r1, [pc, #288]	; (800e5cc <etharp_update_arp_entry+0x140>)
 800e4ac:	4848      	ldr	r0, [pc, #288]	; (800e5d0 <etharp_update_arp_entry+0x144>)
 800e4ae:	f002 f89b 	bl	80105e8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d012      	beq.n	800e4de <etharp_update_arp_entry+0x52>
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00e      	beq.n	800e4de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	68f9      	ldr	r1, [r7, #12]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f001 f8fc 	bl	800f6c4 <ip4_addr_isbroadcast_u32>
 800e4cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d105      	bne.n	800e4de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e4da:	2be0      	cmp	r3, #224	; 0xe0
 800e4dc:	d102      	bne.n	800e4e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e4de:	f06f 030f 	mvn.w	r3, #15
 800e4e2:	e06c      	b.n	800e5be <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e4e4:	78fb      	ldrb	r3, [r7, #3]
 800e4e6:	68fa      	ldr	r2, [r7, #12]
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	68b8      	ldr	r0, [r7, #8]
 800e4ec:	f7ff fe56 	bl	800e19c <etharp_find_entry>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e4f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	da02      	bge.n	800e502 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e4fc:	8afb      	ldrh	r3, [r7, #22]
 800e4fe:	b25b      	sxtb	r3, r3
 800e500:	e05d      	b.n	800e5be <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e502:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e506:	4933      	ldr	r1, [pc, #204]	; (800e5d4 <etharp_update_arp_entry+0x148>)
 800e508:	4613      	mov	r3, r2
 800e50a:	005b      	lsls	r3, r3, #1
 800e50c:	4413      	add	r3, r2
 800e50e:	00db      	lsls	r3, r3, #3
 800e510:	440b      	add	r3, r1
 800e512:	3314      	adds	r3, #20
 800e514:	2202      	movs	r2, #2
 800e516:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e518:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e51c:	492d      	ldr	r1, [pc, #180]	; (800e5d4 <etharp_update_arp_entry+0x148>)
 800e51e:	4613      	mov	r3, r2
 800e520:	005b      	lsls	r3, r3, #1
 800e522:	4413      	add	r3, r2
 800e524:	00db      	lsls	r3, r3, #3
 800e526:	440b      	add	r3, r1
 800e528:	3308      	adds	r3, #8
 800e52a:	68fa      	ldr	r2, [r7, #12]
 800e52c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e52e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e532:	4613      	mov	r3, r2
 800e534:	005b      	lsls	r3, r3, #1
 800e536:	4413      	add	r3, r2
 800e538:	00db      	lsls	r3, r3, #3
 800e53a:	3308      	adds	r3, #8
 800e53c:	4a25      	ldr	r2, [pc, #148]	; (800e5d4 <etharp_update_arp_entry+0x148>)
 800e53e:	4413      	add	r3, r2
 800e540:	3304      	adds	r3, #4
 800e542:	2206      	movs	r2, #6
 800e544:	6879      	ldr	r1, [r7, #4]
 800e546:	4618      	mov	r0, r3
 800e548:	f002 f83b 	bl	80105c2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e54c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e550:	4920      	ldr	r1, [pc, #128]	; (800e5d4 <etharp_update_arp_entry+0x148>)
 800e552:	4613      	mov	r3, r2
 800e554:	005b      	lsls	r3, r3, #1
 800e556:	4413      	add	r3, r2
 800e558:	00db      	lsls	r3, r3, #3
 800e55a:	440b      	add	r3, r1
 800e55c:	3312      	adds	r3, #18
 800e55e:	2200      	movs	r2, #0
 800e560:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e562:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e566:	491b      	ldr	r1, [pc, #108]	; (800e5d4 <etharp_update_arp_entry+0x148>)
 800e568:	4613      	mov	r3, r2
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	4413      	add	r3, r2
 800e56e:	00db      	lsls	r3, r3, #3
 800e570:	440b      	add	r3, r1
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d021      	beq.n	800e5bc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e578:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e57c:	4915      	ldr	r1, [pc, #84]	; (800e5d4 <etharp_update_arp_entry+0x148>)
 800e57e:	4613      	mov	r3, r2
 800e580:	005b      	lsls	r3, r3, #1
 800e582:	4413      	add	r3, r2
 800e584:	00db      	lsls	r3, r3, #3
 800e586:	440b      	add	r3, r1
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e58c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e590:	4910      	ldr	r1, [pc, #64]	; (800e5d4 <etharp_update_arp_entry+0x148>)
 800e592:	4613      	mov	r3, r2
 800e594:	005b      	lsls	r3, r3, #1
 800e596:	4413      	add	r3, r2
 800e598:	00db      	lsls	r3, r3, #3
 800e59a:	440b      	add	r3, r1
 800e59c:	2200      	movs	r2, #0
 800e59e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e5a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5aa:	9300      	str	r3, [sp, #0]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6939      	ldr	r1, [r7, #16]
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f001 ff8b 	bl	80104cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e5b6:	6938      	ldr	r0, [r7, #16]
 800e5b8:	f7f8 ff2a 	bl	8007410 <pbuf_free>
  }
  return ERR_OK;
 800e5bc:	2300      	movs	r3, #0
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3718      	adds	r7, #24
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	080139bc 	.word	0x080139bc
 800e5cc:	08013ab4 	.word	0x08013ab4
 800e5d0:	08013a34 	.word	0x08013a34
 800e5d4:	2000054c 	.word	0x2000054c

0800e5d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	60fb      	str	r3, [r7, #12]
 800e5e4:	e01e      	b.n	800e624 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e5e6:	4913      	ldr	r1, [pc, #76]	; (800e634 <etharp_cleanup_netif+0x5c>)
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	005b      	lsls	r3, r3, #1
 800e5ee:	4413      	add	r3, r2
 800e5f0:	00db      	lsls	r3, r3, #3
 800e5f2:	440b      	add	r3, r1
 800e5f4:	3314      	adds	r3, #20
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e5fa:	7afb      	ldrb	r3, [r7, #11]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00e      	beq.n	800e61e <etharp_cleanup_netif+0x46>
 800e600:	490c      	ldr	r1, [pc, #48]	; (800e634 <etharp_cleanup_netif+0x5c>)
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	4613      	mov	r3, r2
 800e606:	005b      	lsls	r3, r3, #1
 800e608:	4413      	add	r3, r2
 800e60a:	00db      	lsls	r3, r3, #3
 800e60c:	440b      	add	r3, r1
 800e60e:	3308      	adds	r3, #8
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	429a      	cmp	r2, r3
 800e616:	d102      	bne.n	800e61e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f7ff fce5 	bl	800dfe8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	3301      	adds	r3, #1
 800e622:	60fb      	str	r3, [r7, #12]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2b09      	cmp	r3, #9
 800e628:	dddd      	ble.n	800e5e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e62a:	bf00      	nop
 800e62c:	3710      	adds	r7, #16
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	2000054c 	.word	0x2000054c

0800e638 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e638:	b5b0      	push	{r4, r5, r7, lr}
 800e63a:	b08a      	sub	sp, #40	; 0x28
 800e63c:	af04      	add	r7, sp, #16
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d107      	bne.n	800e658 <etharp_input+0x20>
 800e648:	4b3d      	ldr	r3, [pc, #244]	; (800e740 <etharp_input+0x108>)
 800e64a:	f240 228a 	movw	r2, #650	; 0x28a
 800e64e:	493d      	ldr	r1, [pc, #244]	; (800e744 <etharp_input+0x10c>)
 800e650:	483d      	ldr	r0, [pc, #244]	; (800e748 <etharp_input+0x110>)
 800e652:	f001 ffc9 	bl	80105e8 <iprintf>
 800e656:	e06f      	b.n	800e738 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	881b      	ldrh	r3, [r3, #0]
 800e662:	b29b      	uxth	r3, r3
 800e664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e668:	d10c      	bne.n	800e684 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e66e:	2b06      	cmp	r3, #6
 800e670:	d108      	bne.n	800e684 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e676:	2b04      	cmp	r3, #4
 800e678:	d104      	bne.n	800e684 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	885b      	ldrh	r3, [r3, #2]
 800e67e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e680:	2b08      	cmp	r3, #8
 800e682:	d003      	beq.n	800e68c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7f8 fec3 	bl	8007410 <pbuf_free>
    return;
 800e68a:	e055      	b.n	800e738 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	330e      	adds	r3, #14
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	3318      	adds	r3, #24
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	3304      	adds	r3, #4
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d102      	bne.n	800e6ac <etharp_input+0x74>
    for_us = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	75fb      	strb	r3, [r7, #23]
 800e6aa:	e009      	b.n	800e6c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	3304      	adds	r3, #4
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	bf0c      	ite	eq
 800e6b8:	2301      	moveq	r3, #1
 800e6ba:	2300      	movne	r3, #0
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	f103 0208 	add.w	r2, r3, #8
 800e6c6:	7dfb      	ldrb	r3, [r7, #23]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <etharp_input+0x98>
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	e000      	b.n	800e6d2 <etharp_input+0x9a>
 800e6d0:	2302      	movs	r3, #2
 800e6d2:	f107 010c 	add.w	r1, r7, #12
 800e6d6:	6838      	ldr	r0, [r7, #0]
 800e6d8:	f7ff fed8 	bl	800e48c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	88db      	ldrh	r3, [r3, #6]
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6e6:	d003      	beq.n	800e6f0 <etharp_input+0xb8>
 800e6e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6ec:	d01e      	beq.n	800e72c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e6ee:	e020      	b.n	800e732 <etharp_input+0xfa>
      if (for_us) {
 800e6f0:	7dfb      	ldrb	r3, [r7, #23]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d01c      	beq.n	800e730 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e70c:	693a      	ldr	r2, [r7, #16]
 800e70e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e710:	2102      	movs	r1, #2
 800e712:	9103      	str	r1, [sp, #12]
 800e714:	f107 010c 	add.w	r1, r7, #12
 800e718:	9102      	str	r1, [sp, #8]
 800e71a:	9201      	str	r2, [sp, #4]
 800e71c:	9300      	str	r3, [sp, #0]
 800e71e:	462b      	mov	r3, r5
 800e720:	4622      	mov	r2, r4
 800e722:	4601      	mov	r1, r0
 800e724:	6838      	ldr	r0, [r7, #0]
 800e726:	f000 faeb 	bl	800ed00 <etharp_raw>
      break;
 800e72a:	e001      	b.n	800e730 <etharp_input+0xf8>
      break;
 800e72c:	bf00      	nop
 800e72e:	e000      	b.n	800e732 <etharp_input+0xfa>
      break;
 800e730:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f7f8 fe6c 	bl	8007410 <pbuf_free>
}
 800e738:	3718      	adds	r7, #24
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bdb0      	pop	{r4, r5, r7, pc}
 800e73e:	bf00      	nop
 800e740:	080139bc 	.word	0x080139bc
 800e744:	08013b0c 	.word	0x08013b0c
 800e748:	08013a34 	.word	0x08013a34

0800e74c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b086      	sub	sp, #24
 800e750:	af02      	add	r7, sp, #8
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	4613      	mov	r3, r2
 800e758:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e75a:	79fa      	ldrb	r2, [r7, #7]
 800e75c:	4944      	ldr	r1, [pc, #272]	; (800e870 <etharp_output_to_arp_index+0x124>)
 800e75e:	4613      	mov	r3, r2
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	4413      	add	r3, r2
 800e764:	00db      	lsls	r3, r3, #3
 800e766:	440b      	add	r3, r1
 800e768:	3314      	adds	r3, #20
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d806      	bhi.n	800e77e <etharp_output_to_arp_index+0x32>
 800e770:	4b40      	ldr	r3, [pc, #256]	; (800e874 <etharp_output_to_arp_index+0x128>)
 800e772:	f240 22ef 	movw	r2, #751	; 0x2ef
 800e776:	4940      	ldr	r1, [pc, #256]	; (800e878 <etharp_output_to_arp_index+0x12c>)
 800e778:	4840      	ldr	r0, [pc, #256]	; (800e87c <etharp_output_to_arp_index+0x130>)
 800e77a:	f001 ff35 	bl	80105e8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e77e:	79fa      	ldrb	r2, [r7, #7]
 800e780:	493b      	ldr	r1, [pc, #236]	; (800e870 <etharp_output_to_arp_index+0x124>)
 800e782:	4613      	mov	r3, r2
 800e784:	005b      	lsls	r3, r3, #1
 800e786:	4413      	add	r3, r2
 800e788:	00db      	lsls	r3, r3, #3
 800e78a:	440b      	add	r3, r1
 800e78c:	3314      	adds	r3, #20
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	2b02      	cmp	r3, #2
 800e792:	d153      	bne.n	800e83c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e794:	79fa      	ldrb	r2, [r7, #7]
 800e796:	4936      	ldr	r1, [pc, #216]	; (800e870 <etharp_output_to_arp_index+0x124>)
 800e798:	4613      	mov	r3, r2
 800e79a:	005b      	lsls	r3, r3, #1
 800e79c:	4413      	add	r3, r2
 800e79e:	00db      	lsls	r3, r3, #3
 800e7a0:	440b      	add	r3, r1
 800e7a2:	3312      	adds	r3, #18
 800e7a4:	881b      	ldrh	r3, [r3, #0]
 800e7a6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e7aa:	d919      	bls.n	800e7e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e7ac:	79fa      	ldrb	r2, [r7, #7]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	005b      	lsls	r3, r3, #1
 800e7b2:	4413      	add	r3, r2
 800e7b4:	00db      	lsls	r3, r3, #3
 800e7b6:	4a2e      	ldr	r2, [pc, #184]	; (800e870 <etharp_output_to_arp_index+0x124>)
 800e7b8:	4413      	add	r3, r2
 800e7ba:	3304      	adds	r3, #4
 800e7bc:	4619      	mov	r1, r3
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f000 fb4c 	bl	800ee5c <etharp_request>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d138      	bne.n	800e83c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e7ca:	79fa      	ldrb	r2, [r7, #7]
 800e7cc:	4928      	ldr	r1, [pc, #160]	; (800e870 <etharp_output_to_arp_index+0x124>)
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	005b      	lsls	r3, r3, #1
 800e7d2:	4413      	add	r3, r2
 800e7d4:	00db      	lsls	r3, r3, #3
 800e7d6:	440b      	add	r3, r1
 800e7d8:	3314      	adds	r3, #20
 800e7da:	2203      	movs	r2, #3
 800e7dc:	701a      	strb	r2, [r3, #0]
 800e7de:	e02d      	b.n	800e83c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e7e0:	79fa      	ldrb	r2, [r7, #7]
 800e7e2:	4923      	ldr	r1, [pc, #140]	; (800e870 <etharp_output_to_arp_index+0x124>)
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	005b      	lsls	r3, r3, #1
 800e7e8:	4413      	add	r3, r2
 800e7ea:	00db      	lsls	r3, r3, #3
 800e7ec:	440b      	add	r3, r1
 800e7ee:	3312      	adds	r3, #18
 800e7f0:	881b      	ldrh	r3, [r3, #0]
 800e7f2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e7f6:	d321      	bcc.n	800e83c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e7f8:	79fa      	ldrb	r2, [r7, #7]
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	005b      	lsls	r3, r3, #1
 800e7fe:	4413      	add	r3, r2
 800e800:	00db      	lsls	r3, r3, #3
 800e802:	4a1b      	ldr	r2, [pc, #108]	; (800e870 <etharp_output_to_arp_index+0x124>)
 800e804:	4413      	add	r3, r2
 800e806:	1d19      	adds	r1, r3, #4
 800e808:	79fa      	ldrb	r2, [r7, #7]
 800e80a:	4613      	mov	r3, r2
 800e80c:	005b      	lsls	r3, r3, #1
 800e80e:	4413      	add	r3, r2
 800e810:	00db      	lsls	r3, r3, #3
 800e812:	3308      	adds	r3, #8
 800e814:	4a16      	ldr	r2, [pc, #88]	; (800e870 <etharp_output_to_arp_index+0x124>)
 800e816:	4413      	add	r3, r2
 800e818:	3304      	adds	r3, #4
 800e81a:	461a      	mov	r2, r3
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	f000 fafb 	bl	800ee18 <etharp_request_dst>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d109      	bne.n	800e83c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e828:	79fa      	ldrb	r2, [r7, #7]
 800e82a:	4911      	ldr	r1, [pc, #68]	; (800e870 <etharp_output_to_arp_index+0x124>)
 800e82c:	4613      	mov	r3, r2
 800e82e:	005b      	lsls	r3, r3, #1
 800e830:	4413      	add	r3, r2
 800e832:	00db      	lsls	r3, r3, #3
 800e834:	440b      	add	r3, r1
 800e836:	3314      	adds	r3, #20
 800e838:	2203      	movs	r2, #3
 800e83a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e842:	79fa      	ldrb	r2, [r7, #7]
 800e844:	4613      	mov	r3, r2
 800e846:	005b      	lsls	r3, r3, #1
 800e848:	4413      	add	r3, r2
 800e84a:	00db      	lsls	r3, r3, #3
 800e84c:	3308      	adds	r3, #8
 800e84e:	4a08      	ldr	r2, [pc, #32]	; (800e870 <etharp_output_to_arp_index+0x124>)
 800e850:	4413      	add	r3, r2
 800e852:	1d1a      	adds	r2, r3, #4
 800e854:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	4613      	mov	r3, r2
 800e85c:	460a      	mov	r2, r1
 800e85e:	68b9      	ldr	r1, [r7, #8]
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f001 fe33 	bl	80104cc <ethernet_output>
 800e866:	4603      	mov	r3, r0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	2000054c 	.word	0x2000054c
 800e874:	080139bc 	.word	0x080139bc
 800e878:	08013b2c 	.word	0x08013b2c
 800e87c:	08013a34 	.word	0x08013a34

0800e880 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b08a      	sub	sp, #40	; 0x28
 800e884:	af02      	add	r7, sp, #8
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d106      	bne.n	800e8a4 <etharp_output+0x24>
 800e896:	4b73      	ldr	r3, [pc, #460]	; (800ea64 <etharp_output+0x1e4>)
 800e898:	f240 321e 	movw	r2, #798	; 0x31e
 800e89c:	4972      	ldr	r1, [pc, #456]	; (800ea68 <etharp_output+0x1e8>)
 800e89e:	4873      	ldr	r0, [pc, #460]	; (800ea6c <etharp_output+0x1ec>)
 800e8a0:	f001 fea2 	bl	80105e8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d106      	bne.n	800e8b8 <etharp_output+0x38>
 800e8aa:	4b6e      	ldr	r3, [pc, #440]	; (800ea64 <etharp_output+0x1e4>)
 800e8ac:	f240 321f 	movw	r2, #799	; 0x31f
 800e8b0:	496f      	ldr	r1, [pc, #444]	; (800ea70 <etharp_output+0x1f0>)
 800e8b2:	486e      	ldr	r0, [pc, #440]	; (800ea6c <etharp_output+0x1ec>)
 800e8b4:	f001 fe98 	bl	80105e8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d106      	bne.n	800e8cc <etharp_output+0x4c>
 800e8be:	4b69      	ldr	r3, [pc, #420]	; (800ea64 <etharp_output+0x1e4>)
 800e8c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e8c4:	496b      	ldr	r1, [pc, #428]	; (800ea74 <etharp_output+0x1f4>)
 800e8c6:	4869      	ldr	r0, [pc, #420]	; (800ea6c <etharp_output+0x1ec>)
 800e8c8:	f001 fe8e 	bl	80105e8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68f9      	ldr	r1, [r7, #12]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fef6 	bl	800f6c4 <ip4_addr_isbroadcast_u32>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d002      	beq.n	800e8e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e8de:	4b66      	ldr	r3, [pc, #408]	; (800ea78 <etharp_output+0x1f8>)
 800e8e0:	61fb      	str	r3, [r7, #28]
 800e8e2:	e0af      	b.n	800ea44 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e8ec:	2be0      	cmp	r3, #224	; 0xe0
 800e8ee:	d118      	bne.n	800e922 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e8f8:	235e      	movs	r3, #94	; 0x5e
 800e8fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	3301      	adds	r3, #1
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e906:	b2db      	uxtb	r3, r3
 800e908:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	3302      	adds	r3, #2
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	3303      	adds	r3, #3
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e91a:	f107 0310 	add.w	r3, r7, #16
 800e91e:	61fb      	str	r3, [r7, #28]
 800e920:	e090      	b.n	800ea44 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	3304      	adds	r3, #4
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	405a      	eors	r2, r3
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	3308      	adds	r3, #8
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	4013      	ands	r3, r2
 800e936:	2b00      	cmp	r3, #0
 800e938:	d012      	beq.n	800e960 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e940:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e944:	4293      	cmp	r3, r2
 800e946:	d00b      	beq.n	800e960 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	330c      	adds	r3, #12
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d003      	beq.n	800e95a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	330c      	adds	r3, #12
 800e956:	61bb      	str	r3, [r7, #24]
 800e958:	e002      	b.n	800e960 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e95a:	f06f 0303 	mvn.w	r3, #3
 800e95e:	e07d      	b.n	800ea5c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e960:	4b46      	ldr	r3, [pc, #280]	; (800ea7c <etharp_output+0x1fc>)
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	4619      	mov	r1, r3
 800e966:	4a46      	ldr	r2, [pc, #280]	; (800ea80 <etharp_output+0x200>)
 800e968:	460b      	mov	r3, r1
 800e96a:	005b      	lsls	r3, r3, #1
 800e96c:	440b      	add	r3, r1
 800e96e:	00db      	lsls	r3, r3, #3
 800e970:	4413      	add	r3, r2
 800e972:	3314      	adds	r3, #20
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	2b01      	cmp	r3, #1
 800e978:	d925      	bls.n	800e9c6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e97a:	4b40      	ldr	r3, [pc, #256]	; (800ea7c <etharp_output+0x1fc>)
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	4619      	mov	r1, r3
 800e980:	4a3f      	ldr	r2, [pc, #252]	; (800ea80 <etharp_output+0x200>)
 800e982:	460b      	mov	r3, r1
 800e984:	005b      	lsls	r3, r3, #1
 800e986:	440b      	add	r3, r1
 800e988:	00db      	lsls	r3, r3, #3
 800e98a:	4413      	add	r3, r2
 800e98c:	3308      	adds	r3, #8
 800e98e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e990:	68fa      	ldr	r2, [r7, #12]
 800e992:	429a      	cmp	r2, r3
 800e994:	d117      	bne.n	800e9c6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	4b38      	ldr	r3, [pc, #224]	; (800ea7c <etharp_output+0x1fc>)
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	4618      	mov	r0, r3
 800e9a0:	4937      	ldr	r1, [pc, #220]	; (800ea80 <etharp_output+0x200>)
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	005b      	lsls	r3, r3, #1
 800e9a6:	4403      	add	r3, r0
 800e9a8:	00db      	lsls	r3, r3, #3
 800e9aa:	440b      	add	r3, r1
 800e9ac:	3304      	adds	r3, #4
 800e9ae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d108      	bne.n	800e9c6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e9b4:	4b31      	ldr	r3, [pc, #196]	; (800ea7c <etharp_output+0x1fc>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	68b9      	ldr	r1, [r7, #8]
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f7ff fec5 	bl	800e74c <etharp_output_to_arp_index>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	e04a      	b.n	800ea5c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	75fb      	strb	r3, [r7, #23]
 800e9ca:	e031      	b.n	800ea30 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e9cc:	7dfa      	ldrb	r2, [r7, #23]
 800e9ce:	492c      	ldr	r1, [pc, #176]	; (800ea80 <etharp_output+0x200>)
 800e9d0:	4613      	mov	r3, r2
 800e9d2:	005b      	lsls	r3, r3, #1
 800e9d4:	4413      	add	r3, r2
 800e9d6:	00db      	lsls	r3, r3, #3
 800e9d8:	440b      	add	r3, r1
 800e9da:	3314      	adds	r3, #20
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d923      	bls.n	800ea2a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e9e2:	7dfa      	ldrb	r2, [r7, #23]
 800e9e4:	4926      	ldr	r1, [pc, #152]	; (800ea80 <etharp_output+0x200>)
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	005b      	lsls	r3, r3, #1
 800e9ea:	4413      	add	r3, r2
 800e9ec:	00db      	lsls	r3, r3, #3
 800e9ee:	440b      	add	r3, r1
 800e9f0:	3308      	adds	r3, #8
 800e9f2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d117      	bne.n	800ea2a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	6819      	ldr	r1, [r3, #0]
 800e9fe:	7dfa      	ldrb	r2, [r7, #23]
 800ea00:	481f      	ldr	r0, [pc, #124]	; (800ea80 <etharp_output+0x200>)
 800ea02:	4613      	mov	r3, r2
 800ea04:	005b      	lsls	r3, r3, #1
 800ea06:	4413      	add	r3, r2
 800ea08:	00db      	lsls	r3, r3, #3
 800ea0a:	4403      	add	r3, r0
 800ea0c:	3304      	adds	r3, #4
 800ea0e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ea10:	4299      	cmp	r1, r3
 800ea12:	d10a      	bne.n	800ea2a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ea14:	4a19      	ldr	r2, [pc, #100]	; (800ea7c <etharp_output+0x1fc>)
 800ea16:	7dfb      	ldrb	r3, [r7, #23]
 800ea18:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ea1a:	7dfb      	ldrb	r3, [r7, #23]
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	68b9      	ldr	r1, [r7, #8]
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	f7ff fe93 	bl	800e74c <etharp_output_to_arp_index>
 800ea26:	4603      	mov	r3, r0
 800ea28:	e018      	b.n	800ea5c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ea2a:	7dfb      	ldrb	r3, [r7, #23]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	75fb      	strb	r3, [r7, #23]
 800ea30:	7dfb      	ldrb	r3, [r7, #23]
 800ea32:	2b09      	cmp	r3, #9
 800ea34:	d9ca      	bls.n	800e9cc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ea36:	68ba      	ldr	r2, [r7, #8]
 800ea38:	69b9      	ldr	r1, [r7, #24]
 800ea3a:	68f8      	ldr	r0, [r7, #12]
 800ea3c:	f000 f822 	bl	800ea84 <etharp_query>
 800ea40:	4603      	mov	r3, r0
 800ea42:	e00b      	b.n	800ea5c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ea4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	68b9      	ldr	r1, [r7, #8]
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f001 fd39 	bl	80104cc <ethernet_output>
 800ea5a:	4603      	mov	r3, r0
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3720      	adds	r7, #32
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	080139bc 	.word	0x080139bc
 800ea68:	08013b0c 	.word	0x08013b0c
 800ea6c:	08013a34 	.word	0x08013a34
 800ea70:	08013b5c 	.word	0x08013b5c
 800ea74:	08013afc 	.word	0x08013afc
 800ea78:	080143a0 	.word	0x080143a0
 800ea7c:	2000063c 	.word	0x2000063c
 800ea80:	2000054c 	.word	0x2000054c

0800ea84 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b08c      	sub	sp, #48	; 0x30
 800ea88:	af02      	add	r7, sp, #8
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	3326      	adds	r3, #38	; 0x26
 800ea94:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ea96:	23ff      	movs	r3, #255	; 0xff
 800ea98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	68f9      	ldr	r1, [r7, #12]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f000 fe0c 	bl	800f6c4 <ip4_addr_isbroadcast_u32>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d10c      	bne.n	800eacc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eaba:	2be0      	cmp	r3, #224	; 0xe0
 800eabc:	d006      	beq.n	800eacc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d003      	beq.n	800eacc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d102      	bne.n	800ead2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eacc:	f06f 030f 	mvn.w	r3, #15
 800ead0:	e102      	b.n	800ecd8 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ead2:	68fa      	ldr	r2, [r7, #12]
 800ead4:	2101      	movs	r1, #1
 800ead6:	68b8      	ldr	r0, [r7, #8]
 800ead8:	f7ff fb60 	bl	800e19c <etharp_find_entry>
 800eadc:	4603      	mov	r3, r0
 800eade:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800eae0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	da02      	bge.n	800eaee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800eae8:	8a7b      	ldrh	r3, [r7, #18]
 800eaea:	b25b      	sxtb	r3, r3
 800eaec:	e0f4      	b.n	800ecd8 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800eaee:	8a7b      	ldrh	r3, [r7, #18]
 800eaf0:	2b7e      	cmp	r3, #126	; 0x7e
 800eaf2:	d906      	bls.n	800eb02 <etharp_query+0x7e>
 800eaf4:	4b7a      	ldr	r3, [pc, #488]	; (800ece0 <etharp_query+0x25c>)
 800eaf6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800eafa:	497a      	ldr	r1, [pc, #488]	; (800ece4 <etharp_query+0x260>)
 800eafc:	487a      	ldr	r0, [pc, #488]	; (800ece8 <etharp_query+0x264>)
 800eafe:	f001 fd73 	bl	80105e8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800eb02:	8a7b      	ldrh	r3, [r7, #18]
 800eb04:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800eb06:	7c7a      	ldrb	r2, [r7, #17]
 800eb08:	4978      	ldr	r1, [pc, #480]	; (800ecec <etharp_query+0x268>)
 800eb0a:	4613      	mov	r3, r2
 800eb0c:	005b      	lsls	r3, r3, #1
 800eb0e:	4413      	add	r3, r2
 800eb10:	00db      	lsls	r3, r3, #3
 800eb12:	440b      	add	r3, r1
 800eb14:	3314      	adds	r3, #20
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d115      	bne.n	800eb48 <etharp_query+0xc4>
    is_new_entry = 1;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800eb20:	7c7a      	ldrb	r2, [r7, #17]
 800eb22:	4972      	ldr	r1, [pc, #456]	; (800ecec <etharp_query+0x268>)
 800eb24:	4613      	mov	r3, r2
 800eb26:	005b      	lsls	r3, r3, #1
 800eb28:	4413      	add	r3, r2
 800eb2a:	00db      	lsls	r3, r3, #3
 800eb2c:	440b      	add	r3, r1
 800eb2e:	3314      	adds	r3, #20
 800eb30:	2201      	movs	r2, #1
 800eb32:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800eb34:	7c7a      	ldrb	r2, [r7, #17]
 800eb36:	496d      	ldr	r1, [pc, #436]	; (800ecec <etharp_query+0x268>)
 800eb38:	4613      	mov	r3, r2
 800eb3a:	005b      	lsls	r3, r3, #1
 800eb3c:	4413      	add	r3, r2
 800eb3e:	00db      	lsls	r3, r3, #3
 800eb40:	440b      	add	r3, r1
 800eb42:	3308      	adds	r3, #8
 800eb44:	68fa      	ldr	r2, [r7, #12]
 800eb46:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800eb48:	7c7a      	ldrb	r2, [r7, #17]
 800eb4a:	4968      	ldr	r1, [pc, #416]	; (800ecec <etharp_query+0x268>)
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	4413      	add	r3, r2
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	440b      	add	r3, r1
 800eb56:	3314      	adds	r3, #20
 800eb58:	781b      	ldrb	r3, [r3, #0]
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d011      	beq.n	800eb82 <etharp_query+0xfe>
 800eb5e:	7c7a      	ldrb	r2, [r7, #17]
 800eb60:	4962      	ldr	r1, [pc, #392]	; (800ecec <etharp_query+0x268>)
 800eb62:	4613      	mov	r3, r2
 800eb64:	005b      	lsls	r3, r3, #1
 800eb66:	4413      	add	r3, r2
 800eb68:	00db      	lsls	r3, r3, #3
 800eb6a:	440b      	add	r3, r1
 800eb6c:	3314      	adds	r3, #20
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d806      	bhi.n	800eb82 <etharp_query+0xfe>
 800eb74:	4b5a      	ldr	r3, [pc, #360]	; (800ece0 <etharp_query+0x25c>)
 800eb76:	f240 32cf 	movw	r2, #975	; 0x3cf
 800eb7a:	495d      	ldr	r1, [pc, #372]	; (800ecf0 <etharp_query+0x26c>)
 800eb7c:	485a      	ldr	r0, [pc, #360]	; (800ece8 <etharp_query+0x264>)
 800eb7e:	f001 fd33 	bl	80105e8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800eb82:	6a3b      	ldr	r3, [r7, #32]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d102      	bne.n	800eb8e <etharp_query+0x10a>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d10c      	bne.n	800eba8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800eb8e:	68b9      	ldr	r1, [r7, #8]
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f000 f963 	bl	800ee5c <etharp_request>
 800eb96:	4603      	mov	r3, r0
 800eb98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d102      	bne.n	800eba8 <etharp_query+0x124>
      return result;
 800eba2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eba6:	e097      	b.n	800ecd8 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d106      	bne.n	800ebbc <etharp_query+0x138>
 800ebae:	4b4c      	ldr	r3, [pc, #304]	; (800ece0 <etharp_query+0x25c>)
 800ebb0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ebb4:	494f      	ldr	r1, [pc, #316]	; (800ecf4 <etharp_query+0x270>)
 800ebb6:	484c      	ldr	r0, [pc, #304]	; (800ece8 <etharp_query+0x264>)
 800ebb8:	f001 fd16 	bl	80105e8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ebbc:	7c7a      	ldrb	r2, [r7, #17]
 800ebbe:	494b      	ldr	r1, [pc, #300]	; (800ecec <etharp_query+0x268>)
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	005b      	lsls	r3, r3, #1
 800ebc4:	4413      	add	r3, r2
 800ebc6:	00db      	lsls	r3, r3, #3
 800ebc8:	440b      	add	r3, r1
 800ebca:	3314      	adds	r3, #20
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d918      	bls.n	800ec04 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ebd2:	4a49      	ldr	r2, [pc, #292]	; (800ecf8 <etharp_query+0x274>)
 800ebd4:	7c7b      	ldrb	r3, [r7, #17]
 800ebd6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ebd8:	7c7a      	ldrb	r2, [r7, #17]
 800ebda:	4613      	mov	r3, r2
 800ebdc:	005b      	lsls	r3, r3, #1
 800ebde:	4413      	add	r3, r2
 800ebe0:	00db      	lsls	r3, r3, #3
 800ebe2:	3308      	adds	r3, #8
 800ebe4:	4a41      	ldr	r2, [pc, #260]	; (800ecec <etharp_query+0x268>)
 800ebe6:	4413      	add	r3, r2
 800ebe8:	1d1a      	adds	r2, r3, #4
 800ebea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebee:	9300      	str	r3, [sp, #0]
 800ebf0:	4613      	mov	r3, r2
 800ebf2:	697a      	ldr	r2, [r7, #20]
 800ebf4:	6879      	ldr	r1, [r7, #4]
 800ebf6:	68f8      	ldr	r0, [r7, #12]
 800ebf8:	f001 fc68 	bl	80104cc <ethernet_output>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec02:	e067      	b.n	800ecd4 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ec04:	7c7a      	ldrb	r2, [r7, #17]
 800ec06:	4939      	ldr	r1, [pc, #228]	; (800ecec <etharp_query+0x268>)
 800ec08:	4613      	mov	r3, r2
 800ec0a:	005b      	lsls	r3, r3, #1
 800ec0c:	4413      	add	r3, r2
 800ec0e:	00db      	lsls	r3, r3, #3
 800ec10:	440b      	add	r3, r1
 800ec12:	3314      	adds	r3, #20
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	d15c      	bne.n	800ecd4 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ec22:	e01c      	b.n	800ec5e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	895a      	ldrh	r2, [r3, #10]
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	891b      	ldrh	r3, [r3, #8]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d10a      	bne.n	800ec46 <etharp_query+0x1c2>
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d006      	beq.n	800ec46 <etharp_query+0x1c2>
 800ec38:	4b29      	ldr	r3, [pc, #164]	; (800ece0 <etharp_query+0x25c>)
 800ec3a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ec3e:	492f      	ldr	r1, [pc, #188]	; (800ecfc <etharp_query+0x278>)
 800ec40:	4829      	ldr	r0, [pc, #164]	; (800ece8 <etharp_query+0x264>)
 800ec42:	f001 fcd1 	bl	80105e8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	7b1b      	ldrb	r3, [r3, #12]
 800ec4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d002      	beq.n	800ec58 <etharp_query+0x1d4>
        copy_needed = 1;
 800ec52:	2301      	movs	r3, #1
 800ec54:	61bb      	str	r3, [r7, #24]
        break;
 800ec56:	e005      	b.n	800ec64 <etharp_query+0x1e0>
      }
      p = p->next;
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d1df      	bne.n	800ec24 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800ec64:	69bb      	ldr	r3, [r7, #24]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d007      	beq.n	800ec7a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ec70:	200e      	movs	r0, #14
 800ec72:	f7f8 fe29 	bl	80078c8 <pbuf_clone>
 800ec76:	61f8      	str	r0, [r7, #28]
 800ec78:	e004      	b.n	800ec84 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ec7e:	69f8      	ldr	r0, [r7, #28]
 800ec80:	f7f8 fc66 	bl	8007550 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d021      	beq.n	800ecce <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ec8a:	7c7a      	ldrb	r2, [r7, #17]
 800ec8c:	4917      	ldr	r1, [pc, #92]	; (800ecec <etharp_query+0x268>)
 800ec8e:	4613      	mov	r3, r2
 800ec90:	005b      	lsls	r3, r3, #1
 800ec92:	4413      	add	r3, r2
 800ec94:	00db      	lsls	r3, r3, #3
 800ec96:	440b      	add	r3, r1
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00a      	beq.n	800ecb4 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ec9e:	7c7a      	ldrb	r2, [r7, #17]
 800eca0:	4912      	ldr	r1, [pc, #72]	; (800ecec <etharp_query+0x268>)
 800eca2:	4613      	mov	r3, r2
 800eca4:	005b      	lsls	r3, r3, #1
 800eca6:	4413      	add	r3, r2
 800eca8:	00db      	lsls	r3, r3, #3
 800ecaa:	440b      	add	r3, r1
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7f8 fbae 	bl	8007410 <pbuf_free>
      }
      arp_table[i].q = p;
 800ecb4:	7c7a      	ldrb	r2, [r7, #17]
 800ecb6:	490d      	ldr	r1, [pc, #52]	; (800ecec <etharp_query+0x268>)
 800ecb8:	4613      	mov	r3, r2
 800ecba:	005b      	lsls	r3, r3, #1
 800ecbc:	4413      	add	r3, r2
 800ecbe:	00db      	lsls	r3, r3, #3
 800ecc0:	440b      	add	r3, r1
 800ecc2:	69fa      	ldr	r2, [r7, #28]
 800ecc4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eccc:	e002      	b.n	800ecd4 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ecce:	23ff      	movs	r3, #255	; 0xff
 800ecd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ecd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3728      	adds	r7, #40	; 0x28
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	080139bc 	.word	0x080139bc
 800ece4:	08013b68 	.word	0x08013b68
 800ece8:	08013a34 	.word	0x08013a34
 800ecec:	2000054c 	.word	0x2000054c
 800ecf0:	08013b78 	.word	0x08013b78
 800ecf4:	08013b5c 	.word	0x08013b5c
 800ecf8:	2000063c 	.word	0x2000063c
 800ecfc:	08013ba0 	.word	0x08013ba0

0800ed00 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b08a      	sub	sp, #40	; 0x28
 800ed04:	af02      	add	r7, sp, #8
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	60b9      	str	r1, [r7, #8]
 800ed0a:	607a      	str	r2, [r7, #4]
 800ed0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d106      	bne.n	800ed26 <etharp_raw+0x26>
 800ed18:	4b3a      	ldr	r3, [pc, #232]	; (800ee04 <etharp_raw+0x104>)
 800ed1a:	f240 4257 	movw	r2, #1111	; 0x457
 800ed1e:	493a      	ldr	r1, [pc, #232]	; (800ee08 <etharp_raw+0x108>)
 800ed20:	483a      	ldr	r0, [pc, #232]	; (800ee0c <etharp_raw+0x10c>)
 800ed22:	f001 fc61 	bl	80105e8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ed26:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed2a:	211c      	movs	r1, #28
 800ed2c:	200e      	movs	r0, #14
 800ed2e:	f7f8 f88f 	bl	8006e50 <pbuf_alloc>
 800ed32:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d102      	bne.n	800ed40 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ed3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed3e:	e05d      	b.n	800edfc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	895b      	ldrh	r3, [r3, #10]
 800ed44:	2b1b      	cmp	r3, #27
 800ed46:	d806      	bhi.n	800ed56 <etharp_raw+0x56>
 800ed48:	4b2e      	ldr	r3, [pc, #184]	; (800ee04 <etharp_raw+0x104>)
 800ed4a:	f240 4263 	movw	r2, #1123	; 0x463
 800ed4e:	4930      	ldr	r1, [pc, #192]	; (800ee10 <etharp_raw+0x110>)
 800ed50:	482e      	ldr	r0, [pc, #184]	; (800ee0c <etharp_raw+0x10c>)
 800ed52:	f001 fc49 	bl	80105e8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ed56:	69bb      	ldr	r3, [r7, #24]
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ed5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7f7 f870 	bl	8005e44 <lwip_htons>
 800ed64:	4603      	mov	r3, r0
 800ed66:	461a      	mov	r2, r3
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ed72:	2b06      	cmp	r3, #6
 800ed74:	d006      	beq.n	800ed84 <etharp_raw+0x84>
 800ed76:	4b23      	ldr	r3, [pc, #140]	; (800ee04 <etharp_raw+0x104>)
 800ed78:	f240 426a 	movw	r2, #1130	; 0x46a
 800ed7c:	4925      	ldr	r1, [pc, #148]	; (800ee14 <etharp_raw+0x114>)
 800ed7e:	4823      	ldr	r0, [pc, #140]	; (800ee0c <etharp_raw+0x10c>)
 800ed80:	f001 fc32 	bl	80105e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	3308      	adds	r3, #8
 800ed88:	2206      	movs	r2, #6
 800ed8a:	6839      	ldr	r1, [r7, #0]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f001 fc18 	bl	80105c2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	3312      	adds	r3, #18
 800ed96:	2206      	movs	r2, #6
 800ed98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f001 fc11 	bl	80105c2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	330e      	adds	r3, #14
 800eda4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eda6:	6812      	ldr	r2, [r2, #0]
 800eda8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	3318      	adds	r3, #24
 800edae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edb0:	6812      	ldr	r2, [r2, #0]
 800edb2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	2200      	movs	r2, #0
 800edb8:	701a      	strb	r2, [r3, #0]
 800edba:	2200      	movs	r2, #0
 800edbc:	f042 0201 	orr.w	r2, r2, #1
 800edc0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f042 0208 	orr.w	r2, r2, #8
 800edca:	709a      	strb	r2, [r3, #2]
 800edcc:	2200      	movs	r2, #0
 800edce:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	2206      	movs	r2, #6
 800edd4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	2204      	movs	r2, #4
 800edda:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800eddc:	f640 0306 	movw	r3, #2054	; 0x806
 800ede0:	9300      	str	r3, [sp, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	69b9      	ldr	r1, [r7, #24]
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f001 fb6f 	bl	80104cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800edee:	69b8      	ldr	r0, [r7, #24]
 800edf0:	f7f8 fb0e 	bl	8007410 <pbuf_free>
  p = NULL;
 800edf4:	2300      	movs	r3, #0
 800edf6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800edf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3720      	adds	r7, #32
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	080139bc 	.word	0x080139bc
 800ee08:	08013b0c 	.word	0x08013b0c
 800ee0c:	08013a34 	.word	0x08013a34
 800ee10:	08013bbc 	.word	0x08013bbc
 800ee14:	08013bf0 	.word	0x08013bf0

0800ee18 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b088      	sub	sp, #32
 800ee1c:	af04      	add	r7, sp, #16
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ee34:	2201      	movs	r2, #1
 800ee36:	9203      	str	r2, [sp, #12]
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	9202      	str	r2, [sp, #8]
 800ee3c:	4a06      	ldr	r2, [pc, #24]	; (800ee58 <etharp_request_dst+0x40>)
 800ee3e:	9201      	str	r2, [sp, #4]
 800ee40:	9300      	str	r3, [sp, #0]
 800ee42:	4603      	mov	r3, r0
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f7ff ff5a 	bl	800ed00 <etharp_raw>
 800ee4c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	080143a8 	.word	0x080143a8

0800ee5c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ee66:	4a05      	ldr	r2, [pc, #20]	; (800ee7c <etharp_request+0x20>)
 800ee68:	6839      	ldr	r1, [r7, #0]
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f7ff ffd4 	bl	800ee18 <etharp_request_dst>
 800ee70:	4603      	mov	r3, r0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	080143a0 	.word	0x080143a0

0800ee80 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b08e      	sub	sp, #56	; 0x38
 800ee84:	af04      	add	r7, sp, #16
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ee8a:	4b79      	ldr	r3, [pc, #484]	; (800f070 <icmp_input+0x1f0>)
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ee90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	f003 030f 	and.w	r3, r3, #15
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800eea0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eea2:	2b13      	cmp	r3, #19
 800eea4:	f240 80cd 	bls.w	800f042 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	895b      	ldrh	r3, [r3, #10]
 800eeac:	2b03      	cmp	r3, #3
 800eeae:	f240 80ca 	bls.w	800f046 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800eebc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	f000 80b7 	beq.w	800f034 <icmp_input+0x1b4>
 800eec6:	2b08      	cmp	r3, #8
 800eec8:	f040 80b7 	bne.w	800f03a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800eecc:	4b69      	ldr	r3, [pc, #420]	; (800f074 <icmp_input+0x1f4>)
 800eece:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eed0:	4b67      	ldr	r3, [pc, #412]	; (800f070 <icmp_input+0x1f0>)
 800eed2:	695b      	ldr	r3, [r3, #20]
 800eed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eed8:	2be0      	cmp	r3, #224	; 0xe0
 800eeda:	f000 80bb 	beq.w	800f054 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800eede:	4b64      	ldr	r3, [pc, #400]	; (800f070 <icmp_input+0x1f0>)
 800eee0:	695a      	ldr	r2, [r3, #20]
 800eee2:	4b63      	ldr	r3, [pc, #396]	; (800f070 <icmp_input+0x1f0>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4619      	mov	r1, r3
 800eee8:	4610      	mov	r0, r2
 800eeea:	f000 fbeb 	bl	800f6c4 <ip4_addr_isbroadcast_u32>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	f040 80b1 	bne.w	800f058 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	891b      	ldrh	r3, [r3, #8]
 800eefa:	2b07      	cmp	r3, #7
 800eefc:	f240 80a5 	bls.w	800f04a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ef00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef02:	330e      	adds	r3, #14
 800ef04:	4619      	mov	r1, r3
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f7f8 f9ec 	bl	80072e4 <pbuf_add_header>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d04b      	beq.n	800efaa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	891a      	ldrh	r2, [r3, #8]
 800ef16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef18:	4413      	add	r3, r2
 800ef1a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	891b      	ldrh	r3, [r3, #8]
 800ef20:	8b7a      	ldrh	r2, [r7, #26]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	f0c0 809a 	bcc.w	800f05c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ef28:	8b7b      	ldrh	r3, [r7, #26]
 800ef2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef2e:	4619      	mov	r1, r3
 800ef30:	200e      	movs	r0, #14
 800ef32:	f7f7 ff8d 	bl	8006e50 <pbuf_alloc>
 800ef36:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	f000 8090 	beq.w	800f060 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	895b      	ldrh	r3, [r3, #10]
 800ef44:	461a      	mov	r2, r3
 800ef46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef48:	3308      	adds	r3, #8
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d203      	bcs.n	800ef56 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ef4e:	6978      	ldr	r0, [r7, #20]
 800ef50:	f7f8 fa5e 	bl	8007410 <pbuf_free>
          goto icmperr;
 800ef54:	e085      	b.n	800f062 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ef5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f001 fb2f 	bl	80105c2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ef64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef66:	4619      	mov	r1, r3
 800ef68:	6978      	ldr	r0, [r7, #20]
 800ef6a:	f7f8 f9cb 	bl	8007304 <pbuf_remove_header>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d009      	beq.n	800ef88 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ef74:	4b40      	ldr	r3, [pc, #256]	; (800f078 <icmp_input+0x1f8>)
 800ef76:	22b6      	movs	r2, #182	; 0xb6
 800ef78:	4940      	ldr	r1, [pc, #256]	; (800f07c <icmp_input+0x1fc>)
 800ef7a:	4841      	ldr	r0, [pc, #260]	; (800f080 <icmp_input+0x200>)
 800ef7c:	f001 fb34 	bl	80105e8 <iprintf>
          pbuf_free(r);
 800ef80:	6978      	ldr	r0, [r7, #20]
 800ef82:	f7f8 fa45 	bl	8007410 <pbuf_free>
          goto icmperr;
 800ef86:	e06c      	b.n	800f062 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ef88:	6879      	ldr	r1, [r7, #4]
 800ef8a:	6978      	ldr	r0, [r7, #20]
 800ef8c:	f7f8 fb58 	bl	8007640 <pbuf_copy>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d003      	beq.n	800ef9e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ef96:	6978      	ldr	r0, [r7, #20]
 800ef98:	f7f8 fa3a 	bl	8007410 <pbuf_free>
          goto icmperr;
 800ef9c:	e061      	b.n	800f062 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f7f8 fa36 	bl	8007410 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	607b      	str	r3, [r7, #4]
 800efa8:	e00f      	b.n	800efca <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800efaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efac:	330e      	adds	r3, #14
 800efae:	4619      	mov	r1, r3
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f7f8 f9a7 	bl	8007304 <pbuf_remove_header>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d006      	beq.n	800efca <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800efbc:	4b2e      	ldr	r3, [pc, #184]	; (800f078 <icmp_input+0x1f8>)
 800efbe:	22c7      	movs	r2, #199	; 0xc7
 800efc0:	4930      	ldr	r1, [pc, #192]	; (800f084 <icmp_input+0x204>)
 800efc2:	482f      	ldr	r0, [pc, #188]	; (800f080 <icmp_input+0x200>)
 800efc4:	f001 fb10 	bl	80105e8 <iprintf>
          goto icmperr;
 800efc8:	e04b      	b.n	800f062 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800efd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efd2:	4619      	mov	r1, r3
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f7f8 f985 	bl	80072e4 <pbuf_add_header>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d12b      	bne.n	800f038 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800efe6:	69fb      	ldr	r3, [r7, #28]
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800efee:	4b20      	ldr	r3, [pc, #128]	; (800f070 <icmp_input+0x1f0>)
 800eff0:	691a      	ldr	r2, [r3, #16]
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	2200      	movs	r2, #0
 800effa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	2200      	movs	r2, #0
 800f000:	709a      	strb	r2, [r3, #2]
 800f002:	2200      	movs	r2, #0
 800f004:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	22ff      	movs	r2, #255	; 0xff
 800f00a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2200      	movs	r2, #0
 800f010:	729a      	strb	r2, [r3, #10]
 800f012:	2200      	movs	r2, #0
 800f014:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	9302      	str	r3, [sp, #8]
 800f01a:	2301      	movs	r3, #1
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	2300      	movs	r3, #0
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	23ff      	movs	r3, #255	; 0xff
 800f024:	2200      	movs	r2, #0
 800f026:	69f9      	ldr	r1, [r7, #28]
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 fa73 	bl	800f514 <ip4_output_if>
 800f02e:	4603      	mov	r3, r0
 800f030:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f032:	e001      	b.n	800f038 <icmp_input+0x1b8>
      break;
 800f034:	bf00      	nop
 800f036:	e000      	b.n	800f03a <icmp_input+0x1ba>
      break;
 800f038:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7f8 f9e8 	bl	8007410 <pbuf_free>
  return;
 800f040:	e013      	b.n	800f06a <icmp_input+0x1ea>
    goto lenerr;
 800f042:	bf00      	nop
 800f044:	e002      	b.n	800f04c <icmp_input+0x1cc>
    goto lenerr;
 800f046:	bf00      	nop
 800f048:	e000      	b.n	800f04c <icmp_input+0x1cc>
        goto lenerr;
 800f04a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f7f8 f9df 	bl	8007410 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f052:	e00a      	b.n	800f06a <icmp_input+0x1ea>
        goto icmperr;
 800f054:	bf00      	nop
 800f056:	e004      	b.n	800f062 <icmp_input+0x1e2>
        goto icmperr;
 800f058:	bf00      	nop
 800f05a:	e002      	b.n	800f062 <icmp_input+0x1e2>
          goto icmperr;
 800f05c:	bf00      	nop
 800f05e:	e000      	b.n	800f062 <icmp_input+0x1e2>
          goto icmperr;
 800f060:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7f8 f9d4 	bl	8007410 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f068:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f06a:	3728      	adds	r7, #40	; 0x28
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	20003c0c 	.word	0x20003c0c
 800f074:	20003c20 	.word	0x20003c20
 800f078:	08013c34 	.word	0x08013c34
 800f07c:	08013c6c 	.word	0x08013c6c
 800f080:	08013ca4 	.word	0x08013ca4
 800f084:	08013ccc 	.word	0x08013ccc

0800f088 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	460b      	mov	r3, r1
 800f092:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f094:	78fb      	ldrb	r3, [r7, #3]
 800f096:	461a      	mov	r2, r3
 800f098:	2103      	movs	r1, #3
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 f814 	bl	800f0c8 <icmp_send_response>
}
 800f0a0:	bf00      	nop
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f0b4:	78fb      	ldrb	r3, [r7, #3]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	210b      	movs	r1, #11
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 f804 	bl	800f0c8 <icmp_send_response>
}
 800f0c0:	bf00      	nop
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b08c      	sub	sp, #48	; 0x30
 800f0cc:	af04      	add	r7, sp, #16
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	70fb      	strb	r3, [r7, #3]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f0d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f0dc:	2124      	movs	r1, #36	; 0x24
 800f0de:	2022      	movs	r0, #34	; 0x22
 800f0e0:	f7f7 feb6 	bl	8006e50 <pbuf_alloc>
 800f0e4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d04c      	beq.n	800f186 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	895b      	ldrh	r3, [r3, #10]
 800f0f0:	2b23      	cmp	r3, #35	; 0x23
 800f0f2:	d806      	bhi.n	800f102 <icmp_send_response+0x3a>
 800f0f4:	4b26      	ldr	r3, [pc, #152]	; (800f190 <icmp_send_response+0xc8>)
 800f0f6:	f240 1269 	movw	r2, #361	; 0x169
 800f0fa:	4926      	ldr	r1, [pc, #152]	; (800f194 <icmp_send_response+0xcc>)
 800f0fc:	4826      	ldr	r0, [pc, #152]	; (800f198 <icmp_send_response+0xd0>)
 800f0fe:	f001 fa73 	bl	80105e8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	78fa      	ldrb	r2, [r7, #3]
 800f112:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	78ba      	ldrb	r2, [r7, #2]
 800f118:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	2200      	movs	r2, #0
 800f11e:	711a      	strb	r2, [r3, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	2200      	movs	r2, #0
 800f128:	719a      	strb	r2, [r3, #6]
 800f12a:	2200      	movs	r2, #0
 800f12c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f12e:	69fb      	ldr	r3, [r7, #28]
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	f103 0008 	add.w	r0, r3, #8
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	221c      	movs	r2, #28
 800f13c:	4619      	mov	r1, r3
 800f13e:	f001 fa40 	bl	80105c2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f148:	f107 030c 	add.w	r3, r7, #12
 800f14c:	4618      	mov	r0, r3
 800f14e:	f000 f825 	bl	800f19c <ip4_route>
 800f152:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d011      	beq.n	800f17e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	2200      	movs	r2, #0
 800f15e:	709a      	strb	r2, [r3, #2]
 800f160:	2200      	movs	r2, #0
 800f162:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f164:	f107 020c 	add.w	r2, r7, #12
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	9302      	str	r3, [sp, #8]
 800f16c:	2301      	movs	r3, #1
 800f16e:	9301      	str	r3, [sp, #4]
 800f170:	2300      	movs	r3, #0
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	23ff      	movs	r3, #255	; 0xff
 800f176:	2100      	movs	r1, #0
 800f178:	69f8      	ldr	r0, [r7, #28]
 800f17a:	f000 f9cb 	bl	800f514 <ip4_output_if>
  }
  pbuf_free(q);
 800f17e:	69f8      	ldr	r0, [r7, #28]
 800f180:	f7f8 f946 	bl	8007410 <pbuf_free>
 800f184:	e000      	b.n	800f188 <icmp_send_response+0xc0>
    return;
 800f186:	bf00      	nop
}
 800f188:	3720      	adds	r7, #32
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	08013c34 	.word	0x08013c34
 800f194:	08013d00 	.word	0x08013d00
 800f198:	08013ca4 	.word	0x08013ca4

0800f19c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b085      	sub	sp, #20
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f1a4:	4b33      	ldr	r3, [pc, #204]	; (800f274 <ip4_route+0xd8>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	60fb      	str	r3, [r7, #12]
 800f1aa:	e036      	b.n	800f21a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1b2:	f003 0301 	and.w	r3, r3, #1
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d02b      	beq.n	800f214 <ip4_route+0x78>
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1c2:	089b      	lsrs	r3, r3, #2
 800f1c4:	f003 0301 	and.w	r3, r3, #1
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d022      	beq.n	800f214 <ip4_route+0x78>
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	3304      	adds	r3, #4
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d01d      	beq.n	800f214 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	3304      	adds	r3, #4
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	405a      	eors	r2, r3
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	3308      	adds	r3, #8
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4013      	ands	r3, r2
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d101      	bne.n	800f1f4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	e038      	b.n	800f266 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1fa:	f003 0302 	and.w	r3, r3, #2
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d108      	bne.n	800f214 <ip4_route+0x78>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	330c      	adds	r3, #12
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d101      	bne.n	800f214 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	e028      	b.n	800f266 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	60fb      	str	r3, [r7, #12]
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d1c5      	bne.n	800f1ac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f220:	4b15      	ldr	r3, [pc, #84]	; (800f278 <ip4_route+0xdc>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d01a      	beq.n	800f25e <ip4_route+0xc2>
 800f228:	4b13      	ldr	r3, [pc, #76]	; (800f278 <ip4_route+0xdc>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f230:	f003 0301 	and.w	r3, r3, #1
 800f234:	2b00      	cmp	r3, #0
 800f236:	d012      	beq.n	800f25e <ip4_route+0xc2>
 800f238:	4b0f      	ldr	r3, [pc, #60]	; (800f278 <ip4_route+0xdc>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f240:	f003 0304 	and.w	r3, r3, #4
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00a      	beq.n	800f25e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f248:	4b0b      	ldr	r3, [pc, #44]	; (800f278 <ip4_route+0xdc>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	3304      	adds	r3, #4
 800f24e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f250:	2b00      	cmp	r3, #0
 800f252:	d004      	beq.n	800f25e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	2b7f      	cmp	r3, #127	; 0x7f
 800f25c:	d101      	bne.n	800f262 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f25e:	2300      	movs	r3, #0
 800f260:	e001      	b.n	800f266 <ip4_route+0xca>
  }

  return netif_default;
 800f262:	4b05      	ldr	r3, [pc, #20]	; (800f278 <ip4_route+0xdc>)
 800f264:	681b      	ldr	r3, [r3, #0]
}
 800f266:	4618      	mov	r0, r3
 800f268:	3714      	adds	r7, #20
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop
 800f274:	20007140 	.word	0x20007140
 800f278:	20007144 	.word	0x20007144

0800f27c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f28a:	f003 0301 	and.w	r3, r3, #1
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	2b00      	cmp	r3, #0
 800f292:	d016      	beq.n	800f2c2 <ip4_input_accept+0x46>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	3304      	adds	r3, #4
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d011      	beq.n	800f2c2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f29e:	4b0b      	ldr	r3, [pc, #44]	; (800f2cc <ip4_input_accept+0x50>)
 800f2a0:	695a      	ldr	r2, [r3, #20]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	3304      	adds	r3, #4
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d008      	beq.n	800f2be <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f2ac:	4b07      	ldr	r3, [pc, #28]	; (800f2cc <ip4_input_accept+0x50>)
 800f2ae:	695b      	ldr	r3, [r3, #20]
 800f2b0:	6879      	ldr	r1, [r7, #4]
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f000 fa06 	bl	800f6c4 <ip4_addr_isbroadcast_u32>
 800f2b8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d001      	beq.n	800f2c2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e000      	b.n	800f2c4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f2c2:	2300      	movs	r3, #0
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3708      	adds	r7, #8
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	20003c0c 	.word	0x20003c0c

0800f2d0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b086      	sub	sp, #24
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	091b      	lsrs	r3, r3, #4
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	2b04      	cmp	r3, #4
 800f2ea:	d004      	beq.n	800f2f6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7f8 f88f 	bl	8007410 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	e105      	b.n	800f502 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	f003 030f 	and.w	r3, r3, #15
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	b2db      	uxtb	r3, r3
 800f304:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	885b      	ldrh	r3, [r3, #2]
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7f6 fd99 	bl	8005e44 <lwip_htons>
 800f312:	4603      	mov	r3, r0
 800f314:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	891b      	ldrh	r3, [r3, #8]
 800f31a:	89ba      	ldrh	r2, [r7, #12]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d204      	bcs.n	800f32a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f320:	89bb      	ldrh	r3, [r7, #12]
 800f322:	4619      	mov	r1, r3
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7f7 feed 	bl	8007104 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	895b      	ldrh	r3, [r3, #10]
 800f32e:	89fa      	ldrh	r2, [r7, #14]
 800f330:	429a      	cmp	r2, r3
 800f332:	d807      	bhi.n	800f344 <ip4_input+0x74>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	891b      	ldrh	r3, [r3, #8]
 800f338:	89ba      	ldrh	r2, [r7, #12]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d802      	bhi.n	800f344 <ip4_input+0x74>
 800f33e:	89fb      	ldrh	r3, [r7, #14]
 800f340:	2b13      	cmp	r3, #19
 800f342:	d804      	bhi.n	800f34e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7f8 f863 	bl	8007410 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f34a:	2300      	movs	r3, #0
 800f34c:	e0d9      	b.n	800f502 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	691b      	ldr	r3, [r3, #16]
 800f352:	4a6e      	ldr	r2, [pc, #440]	; (800f50c <ip4_input+0x23c>)
 800f354:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	4a6c      	ldr	r2, [pc, #432]	; (800f50c <ip4_input+0x23c>)
 800f35c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f35e:	4b6b      	ldr	r3, [pc, #428]	; (800f50c <ip4_input+0x23c>)
 800f360:	695b      	ldr	r3, [r3, #20]
 800f362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f366:	2be0      	cmp	r3, #224	; 0xe0
 800f368:	d112      	bne.n	800f390 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f370:	f003 0301 	and.w	r3, r3, #1
 800f374:	b2db      	uxtb	r3, r3
 800f376:	2b00      	cmp	r3, #0
 800f378:	d007      	beq.n	800f38a <ip4_input+0xba>
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	3304      	adds	r3, #4
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d002      	beq.n	800f38a <ip4_input+0xba>
      netif = inp;
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	613b      	str	r3, [r7, #16]
 800f388:	e02a      	b.n	800f3e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f38a:	2300      	movs	r3, #0
 800f38c:	613b      	str	r3, [r7, #16]
 800f38e:	e027      	b.n	800f3e0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f390:	6838      	ldr	r0, [r7, #0]
 800f392:	f7ff ff73 	bl	800f27c <ip4_input_accept>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d002      	beq.n	800f3a2 <ip4_input+0xd2>
      netif = inp;
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	613b      	str	r3, [r7, #16]
 800f3a0:	e01e      	b.n	800f3e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f3a6:	4b59      	ldr	r3, [pc, #356]	; (800f50c <ip4_input+0x23c>)
 800f3a8:	695b      	ldr	r3, [r3, #20]
 800f3aa:	b2db      	uxtb	r3, r3
 800f3ac:	2b7f      	cmp	r3, #127	; 0x7f
 800f3ae:	d017      	beq.n	800f3e0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f3b0:	4b57      	ldr	r3, [pc, #348]	; (800f510 <ip4_input+0x240>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	613b      	str	r3, [r7, #16]
 800f3b6:	e00e      	b.n	800f3d6 <ip4_input+0x106>
          if (netif == inp) {
 800f3b8:	693a      	ldr	r2, [r7, #16]
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d006      	beq.n	800f3ce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f3c0:	6938      	ldr	r0, [r7, #16]
 800f3c2:	f7ff ff5b 	bl	800f27c <ip4_input_accept>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d108      	bne.n	800f3de <ip4_input+0x10e>
 800f3cc:	e000      	b.n	800f3d0 <ip4_input+0x100>
            continue;
 800f3ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	613b      	str	r3, [r7, #16]
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d1ed      	bne.n	800f3b8 <ip4_input+0xe8>
 800f3dc:	e000      	b.n	800f3e0 <ip4_input+0x110>
            break;
 800f3de:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f3e0:	4b4a      	ldr	r3, [pc, #296]	; (800f50c <ip4_input+0x23c>)
 800f3e2:	691b      	ldr	r3, [r3, #16]
 800f3e4:	6839      	ldr	r1, [r7, #0]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f000 f96c 	bl	800f6c4 <ip4_addr_isbroadcast_u32>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d105      	bne.n	800f3fe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f3f2:	4b46      	ldr	r3, [pc, #280]	; (800f50c <ip4_input+0x23c>)
 800f3f4:	691b      	ldr	r3, [r3, #16]
 800f3f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f3fa:	2be0      	cmp	r3, #224	; 0xe0
 800f3fc:	d104      	bne.n	800f408 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f7f8 f806 	bl	8007410 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f404:	2300      	movs	r3, #0
 800f406:	e07c      	b.n	800f502 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d104      	bne.n	800f418 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f7f7 fffe 	bl	8007410 <pbuf_free>
    return ERR_OK;
 800f414:	2300      	movs	r3, #0
 800f416:	e074      	b.n	800f502 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	88db      	ldrh	r3, [r3, #6]
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	461a      	mov	r2, r3
 800f420:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f424:	4013      	ands	r3, r2
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00b      	beq.n	800f442 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 fc90 	bl	800fd50 <ip4_reass>
 800f430:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d101      	bne.n	800f43c <ip4_input+0x16c>
      return ERR_OK;
 800f438:	2300      	movs	r3, #0
 800f43a:	e062      	b.n	800f502 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f442:	4a32      	ldr	r2, [pc, #200]	; (800f50c <ip4_input+0x23c>)
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f448:	4a30      	ldr	r2, [pc, #192]	; (800f50c <ip4_input+0x23c>)
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f44e:	4a2f      	ldr	r2, [pc, #188]	; (800f50c <ip4_input+0x23c>)
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	f003 030f 	and.w	r3, r3, #15
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	b2db      	uxtb	r3, r3
 800f462:	b29a      	uxth	r2, r3
 800f464:	4b29      	ldr	r3, [pc, #164]	; (800f50c <ip4_input+0x23c>)
 800f466:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f468:	89fb      	ldrh	r3, [r7, #14]
 800f46a:	4619      	mov	r1, r3
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f7f7 ff49 	bl	8007304 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	7a5b      	ldrb	r3, [r3, #9]
 800f476:	2b06      	cmp	r3, #6
 800f478:	d009      	beq.n	800f48e <ip4_input+0x1be>
 800f47a:	2b11      	cmp	r3, #17
 800f47c:	d002      	beq.n	800f484 <ip4_input+0x1b4>
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d00a      	beq.n	800f498 <ip4_input+0x1c8>
 800f482:	e00e      	b.n	800f4a2 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f484:	6839      	ldr	r1, [r7, #0]
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f7fe fc6a 	bl	800dd60 <udp_input>
        break;
 800f48c:	e026      	b.n	800f4dc <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f48e:	6839      	ldr	r1, [r7, #0]
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f7fa f87f 	bl	8009594 <tcp_input>
        break;
 800f496:	e021      	b.n	800f4dc <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f498:	6839      	ldr	r1, [r7, #0]
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7ff fcf0 	bl	800ee80 <icmp_input>
        break;
 800f4a0:	e01c      	b.n	800f4dc <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f4a2:	4b1a      	ldr	r3, [pc, #104]	; (800f50c <ip4_input+0x23c>)
 800f4a4:	695b      	ldr	r3, [r3, #20]
 800f4a6:	6939      	ldr	r1, [r7, #16]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f000 f90b 	bl	800f6c4 <ip4_addr_isbroadcast_u32>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d10f      	bne.n	800f4d4 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f4b4:	4b15      	ldr	r3, [pc, #84]	; (800f50c <ip4_input+0x23c>)
 800f4b6:	695b      	ldr	r3, [r3, #20]
 800f4b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f4bc:	2be0      	cmp	r3, #224	; 0xe0
 800f4be:	d009      	beq.n	800f4d4 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f4c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f7f7 ff8f 	bl	80073ea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f4cc:	2102      	movs	r1, #2
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff fdda 	bl	800f088 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f7f7 ff9b 	bl	8007410 <pbuf_free>
        break;
 800f4da:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f4dc:	4b0b      	ldr	r3, [pc, #44]	; (800f50c <ip4_input+0x23c>)
 800f4de:	2200      	movs	r2, #0
 800f4e0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f4e2:	4b0a      	ldr	r3, [pc, #40]	; (800f50c <ip4_input+0x23c>)
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f4e8:	4b08      	ldr	r3, [pc, #32]	; (800f50c <ip4_input+0x23c>)
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f4ee:	4b07      	ldr	r3, [pc, #28]	; (800f50c <ip4_input+0x23c>)
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f4f4:	4b05      	ldr	r3, [pc, #20]	; (800f50c <ip4_input+0x23c>)
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f4fa:	4b04      	ldr	r3, [pc, #16]	; (800f50c <ip4_input+0x23c>)
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f500:	2300      	movs	r3, #0
}
 800f502:	4618      	mov	r0, r3
 800f504:	3718      	adds	r7, #24
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	20003c0c 	.word	0x20003c0c
 800f510:	20007140 	.word	0x20007140

0800f514 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b08a      	sub	sp, #40	; 0x28
 800f518:	af04      	add	r7, sp, #16
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	607a      	str	r2, [r7, #4]
 800f520:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d009      	beq.n	800f540 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d003      	beq.n	800f53a <ip4_output_if+0x26>
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d102      	bne.n	800f540 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53c:	3304      	adds	r3, #4
 800f53e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f540:	78fa      	ldrb	r2, [r7, #3]
 800f542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f544:	9302      	str	r3, [sp, #8]
 800f546:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f54a:	9301      	str	r3, [sp, #4]
 800f54c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f550:	9300      	str	r3, [sp, #0]
 800f552:	4613      	mov	r3, r2
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	6979      	ldr	r1, [r7, #20]
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	f000 f805 	bl	800f568 <ip4_output_if_src>
 800f55e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f560:	4618      	mov	r0, r3
 800f562:	3718      	adds	r7, #24
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b088      	sub	sp, #32
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	607a      	str	r2, [r7, #4]
 800f574:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	7b9b      	ldrb	r3, [r3, #14]
 800f57a:	2b01      	cmp	r3, #1
 800f57c:	d006      	beq.n	800f58c <ip4_output_if_src+0x24>
 800f57e:	4b4b      	ldr	r3, [pc, #300]	; (800f6ac <ip4_output_if_src+0x144>)
 800f580:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f584:	494a      	ldr	r1, [pc, #296]	; (800f6b0 <ip4_output_if_src+0x148>)
 800f586:	484b      	ldr	r0, [pc, #300]	; (800f6b4 <ip4_output_if_src+0x14c>)
 800f588:	f001 f82e 	bl	80105e8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d060      	beq.n	800f654 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f592:	2314      	movs	r3, #20
 800f594:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f596:	2114      	movs	r1, #20
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f7f7 fea3 	bl	80072e4 <pbuf_add_header>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d002      	beq.n	800f5aa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f5a4:	f06f 0301 	mvn.w	r3, #1
 800f5a8:	e07c      	b.n	800f6a4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	895b      	ldrh	r3, [r3, #10]
 800f5b4:	2b13      	cmp	r3, #19
 800f5b6:	d806      	bhi.n	800f5c6 <ip4_output_if_src+0x5e>
 800f5b8:	4b3c      	ldr	r3, [pc, #240]	; (800f6ac <ip4_output_if_src+0x144>)
 800f5ba:	f240 3289 	movw	r2, #905	; 0x389
 800f5be:	493e      	ldr	r1, [pc, #248]	; (800f6b8 <ip4_output_if_src+0x150>)
 800f5c0:	483c      	ldr	r0, [pc, #240]	; (800f6b4 <ip4_output_if_src+0x14c>)
 800f5c2:	f001 f811 	bl	80105e8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	78fa      	ldrb	r2, [r7, #3]
 800f5ca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f5d2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f5dc:	8b7b      	ldrh	r3, [r7, #26]
 800f5de:	089b      	lsrs	r3, r3, #2
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5e8:	b2da      	uxtb	r2, r3
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f5f4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	891b      	ldrh	r3, [r3, #8]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7f6 fc22 	bl	8005e44 <lwip_htons>
 800f600:	4603      	mov	r3, r0
 800f602:	461a      	mov	r2, r3
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	2200      	movs	r2, #0
 800f60c:	719a      	strb	r2, [r3, #6]
 800f60e:	2200      	movs	r2, #0
 800f610:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f612:	4b2a      	ldr	r3, [pc, #168]	; (800f6bc <ip4_output_if_src+0x154>)
 800f614:	881b      	ldrh	r3, [r3, #0]
 800f616:	4618      	mov	r0, r3
 800f618:	f7f6 fc14 	bl	8005e44 <lwip_htons>
 800f61c:	4603      	mov	r3, r0
 800f61e:	461a      	mov	r2, r3
 800f620:	69fb      	ldr	r3, [r7, #28]
 800f622:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f624:	4b25      	ldr	r3, [pc, #148]	; (800f6bc <ip4_output_if_src+0x154>)
 800f626:	881b      	ldrh	r3, [r3, #0]
 800f628:	3301      	adds	r3, #1
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	4b23      	ldr	r3, [pc, #140]	; (800f6bc <ip4_output_if_src+0x154>)
 800f62e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d104      	bne.n	800f640 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f636:	4b22      	ldr	r3, [pc, #136]	; (800f6c0 <ip4_output_if_src+0x158>)
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	60da      	str	r2, [r3, #12]
 800f63e:	e003      	b.n	800f648 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	2200      	movs	r2, #0
 800f64c:	729a      	strb	r2, [r3, #10]
 800f64e:	2200      	movs	r2, #0
 800f650:	72da      	strb	r2, [r3, #11]
 800f652:	e00f      	b.n	800f674 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	895b      	ldrh	r3, [r3, #10]
 800f658:	2b13      	cmp	r3, #19
 800f65a:	d802      	bhi.n	800f662 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f65c:	f06f 0301 	mvn.w	r3, #1
 800f660:	e020      	b.n	800f6a4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	691b      	ldr	r3, [r3, #16]
 800f66c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f66e:	f107 0314 	add.w	r3, r7, #20
 800f672:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f676:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00c      	beq.n	800f696 <ip4_output_if_src+0x12e>
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	891a      	ldrh	r2, [r3, #8]
 800f680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f682:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f684:	429a      	cmp	r2, r3
 800f686:	d906      	bls.n	800f696 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f68c:	68f8      	ldr	r0, [r7, #12]
 800f68e:	f000 fd4b 	bl	8010128 <ip4_frag>
 800f692:	4603      	mov	r3, r0
 800f694:	e006      	b.n	800f6a4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f698:	695b      	ldr	r3, [r3, #20]
 800f69a:	687a      	ldr	r2, [r7, #4]
 800f69c:	68f9      	ldr	r1, [r7, #12]
 800f69e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6a0:	4798      	blx	r3
 800f6a2:	4603      	mov	r3, r0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3720      	adds	r7, #32
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	08013d2c 	.word	0x08013d2c
 800f6b0:	08013d60 	.word	0x08013d60
 800f6b4:	08013d6c 	.word	0x08013d6c
 800f6b8:	08013d94 	.word	0x08013d94
 800f6bc:	2000063e 	.word	0x2000063e
 800f6c0:	0801439c 	.word	0x0801439c

0800f6c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b085      	sub	sp, #20
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6d8:	d002      	beq.n	800f6e0 <ip4_addr_isbroadcast_u32+0x1c>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d101      	bne.n	800f6e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	e02a      	b.n	800f73a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f6ea:	f003 0302 	and.w	r3, r3, #2
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d101      	bne.n	800f6f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	e021      	b.n	800f73a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	3304      	adds	r3, #4
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d101      	bne.n	800f706 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f702:	2300      	movs	r3, #0
 800f704:	e019      	b.n	800f73a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	3304      	adds	r3, #4
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	405a      	eors	r2, r3
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	3308      	adds	r3, #8
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4013      	ands	r3, r2
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d10d      	bne.n	800f738 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	3308      	adds	r3, #8
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	43da      	mvns	r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	3308      	adds	r3, #8
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f730:	429a      	cmp	r2, r3
 800f732:	d101      	bne.n	800f738 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f734:	2301      	movs	r3, #1
 800f736:	e000      	b.n	800f73a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f738:	2300      	movs	r3, #0
  }
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3714      	adds	r7, #20
 800f73e:	46bd      	mov	sp, r7
 800f740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f744:	4770      	bx	lr
	...

0800f748 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f74e:	2300      	movs	r3, #0
 800f750:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f752:	4b12      	ldr	r3, [pc, #72]	; (800f79c <ip_reass_tmr+0x54>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f758:	e018      	b.n	800f78c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	7fdb      	ldrb	r3, [r3, #31]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d00b      	beq.n	800f77a <ip_reass_tmr+0x32>
      r->timer--;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	7fdb      	ldrb	r3, [r3, #31]
 800f766:	3b01      	subs	r3, #1
 800f768:	b2da      	uxtb	r2, r3
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	60fb      	str	r3, [r7, #12]
 800f778:	e008      	b.n	800f78c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f784:	68b9      	ldr	r1, [r7, #8]
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 f80a 	bl	800f7a0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d1e3      	bne.n	800f75a <ip_reass_tmr+0x12>
    }
  }
}
 800f792:	bf00      	nop
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	20000640 	.word	0x20000640

0800f7a0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b088      	sub	sp, #32
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f7ae:	683a      	ldr	r2, [r7, #0]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d105      	bne.n	800f7c2 <ip_reass_free_complete_datagram+0x22>
 800f7b6:	4b45      	ldr	r3, [pc, #276]	; (800f8cc <ip_reass_free_complete_datagram+0x12c>)
 800f7b8:	22ab      	movs	r2, #171	; 0xab
 800f7ba:	4945      	ldr	r1, [pc, #276]	; (800f8d0 <ip_reass_free_complete_datagram+0x130>)
 800f7bc:	4845      	ldr	r0, [pc, #276]	; (800f8d4 <ip_reass_free_complete_datagram+0x134>)
 800f7be:	f000 ff13 	bl	80105e8 <iprintf>
  if (prev != NULL) {
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d00a      	beq.n	800f7de <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	687a      	ldr	r2, [r7, #4]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d005      	beq.n	800f7de <ip_reass_free_complete_datagram+0x3e>
 800f7d2:	4b3e      	ldr	r3, [pc, #248]	; (800f8cc <ip_reass_free_complete_datagram+0x12c>)
 800f7d4:	22ad      	movs	r2, #173	; 0xad
 800f7d6:	4940      	ldr	r1, [pc, #256]	; (800f8d8 <ip_reass_free_complete_datagram+0x138>)
 800f7d8:	483e      	ldr	r0, [pc, #248]	; (800f8d4 <ip_reass_free_complete_datagram+0x134>)
 800f7da:	f000 ff05 	bl	80105e8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	889b      	ldrh	r3, [r3, #4]
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d12a      	bne.n	800f846 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f7fe:	69bb      	ldr	r3, [r7, #24]
 800f800:	6858      	ldr	r0, [r3, #4]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	3308      	adds	r3, #8
 800f806:	2214      	movs	r2, #20
 800f808:	4619      	mov	r1, r3
 800f80a:	f000 feda 	bl	80105c2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f80e:	2101      	movs	r1, #1
 800f810:	69b8      	ldr	r0, [r7, #24]
 800f812:	f7ff fc49 	bl	800f0a8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f816:	69b8      	ldr	r0, [r7, #24]
 800f818:	f7f7 fe82 	bl	8007520 <pbuf_clen>
 800f81c:	4603      	mov	r3, r0
 800f81e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f820:	8bfa      	ldrh	r2, [r7, #30]
 800f822:	8a7b      	ldrh	r3, [r7, #18]
 800f824:	4413      	add	r3, r2
 800f826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f82a:	db05      	blt.n	800f838 <ip_reass_free_complete_datagram+0x98>
 800f82c:	4b27      	ldr	r3, [pc, #156]	; (800f8cc <ip_reass_free_complete_datagram+0x12c>)
 800f82e:	22bc      	movs	r2, #188	; 0xbc
 800f830:	492a      	ldr	r1, [pc, #168]	; (800f8dc <ip_reass_free_complete_datagram+0x13c>)
 800f832:	4828      	ldr	r0, [pc, #160]	; (800f8d4 <ip_reass_free_complete_datagram+0x134>)
 800f834:	f000 fed8 	bl	80105e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f838:	8bfa      	ldrh	r2, [r7, #30]
 800f83a:	8a7b      	ldrh	r3, [r7, #18]
 800f83c:	4413      	add	r3, r2
 800f83e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f840:	69b8      	ldr	r0, [r7, #24]
 800f842:	f7f7 fde5 	bl	8007410 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f84c:	e01f      	b.n	800f88e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f84e:	69bb      	ldr	r3, [r7, #24]
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f854:	69bb      	ldr	r3, [r7, #24]
 800f856:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f7f7 fe5e 	bl	8007520 <pbuf_clen>
 800f864:	4603      	mov	r3, r0
 800f866:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f868:	8bfa      	ldrh	r2, [r7, #30]
 800f86a:	8a7b      	ldrh	r3, [r7, #18]
 800f86c:	4413      	add	r3, r2
 800f86e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f872:	db05      	blt.n	800f880 <ip_reass_free_complete_datagram+0xe0>
 800f874:	4b15      	ldr	r3, [pc, #84]	; (800f8cc <ip_reass_free_complete_datagram+0x12c>)
 800f876:	22cc      	movs	r2, #204	; 0xcc
 800f878:	4918      	ldr	r1, [pc, #96]	; (800f8dc <ip_reass_free_complete_datagram+0x13c>)
 800f87a:	4816      	ldr	r0, [pc, #88]	; (800f8d4 <ip_reass_free_complete_datagram+0x134>)
 800f87c:	f000 feb4 	bl	80105e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f880:	8bfa      	ldrh	r2, [r7, #30]
 800f882:	8a7b      	ldrh	r3, [r7, #18]
 800f884:	4413      	add	r3, r2
 800f886:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	f7f7 fdc1 	bl	8007410 <pbuf_free>
  while (p != NULL) {
 800f88e:	69bb      	ldr	r3, [r7, #24]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d1dc      	bne.n	800f84e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f894:	6839      	ldr	r1, [r7, #0]
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 f8c2 	bl	800fa20 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f89c:	4b10      	ldr	r3, [pc, #64]	; (800f8e0 <ip_reass_free_complete_datagram+0x140>)
 800f89e:	881b      	ldrh	r3, [r3, #0]
 800f8a0:	8bfa      	ldrh	r2, [r7, #30]
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d905      	bls.n	800f8b2 <ip_reass_free_complete_datagram+0x112>
 800f8a6:	4b09      	ldr	r3, [pc, #36]	; (800f8cc <ip_reass_free_complete_datagram+0x12c>)
 800f8a8:	22d2      	movs	r2, #210	; 0xd2
 800f8aa:	490e      	ldr	r1, [pc, #56]	; (800f8e4 <ip_reass_free_complete_datagram+0x144>)
 800f8ac:	4809      	ldr	r0, [pc, #36]	; (800f8d4 <ip_reass_free_complete_datagram+0x134>)
 800f8ae:	f000 fe9b 	bl	80105e8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f8b2:	4b0b      	ldr	r3, [pc, #44]	; (800f8e0 <ip_reass_free_complete_datagram+0x140>)
 800f8b4:	881a      	ldrh	r2, [r3, #0]
 800f8b6:	8bfb      	ldrh	r3, [r7, #30]
 800f8b8:	1ad3      	subs	r3, r2, r3
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	4b08      	ldr	r3, [pc, #32]	; (800f8e0 <ip_reass_free_complete_datagram+0x140>)
 800f8be:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f8c0:	8bfb      	ldrh	r3, [r7, #30]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3720      	adds	r7, #32
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	08013dc4 	.word	0x08013dc4
 800f8d0:	08013e00 	.word	0x08013e00
 800f8d4:	08013e0c 	.word	0x08013e0c
 800f8d8:	08013e34 	.word	0x08013e34
 800f8dc:	08013e48 	.word	0x08013e48
 800f8e0:	20000644 	.word	0x20000644
 800f8e4:	08013e68 	.word	0x08013e68

0800f8e8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b08a      	sub	sp, #40	; 0x28
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f8fe:	2300      	movs	r3, #0
 800f900:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f902:	2300      	movs	r3, #0
 800f904:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f906:	4b28      	ldr	r3, [pc, #160]	; (800f9a8 <ip_reass_remove_oldest_datagram+0xc0>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f90c:	e030      	b.n	800f970 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f910:	695a      	ldr	r2, [r3, #20]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	429a      	cmp	r2, r3
 800f918:	d10c      	bne.n	800f934 <ip_reass_remove_oldest_datagram+0x4c>
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	699a      	ldr	r2, [r3, #24]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	691b      	ldr	r3, [r3, #16]
 800f922:	429a      	cmp	r2, r3
 800f924:	d106      	bne.n	800f934 <ip_reass_remove_oldest_datagram+0x4c>
 800f926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f928:	899a      	ldrh	r2, [r3, #12]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	889b      	ldrh	r3, [r3, #4]
 800f92e:	b29b      	uxth	r3, r3
 800f930:	429a      	cmp	r2, r3
 800f932:	d014      	beq.n	800f95e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	3301      	adds	r3, #1
 800f938:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f93a:	6a3b      	ldr	r3, [r7, #32]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d104      	bne.n	800f94a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f942:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	61bb      	str	r3, [r7, #24]
 800f948:	e009      	b.n	800f95e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94c:	7fda      	ldrb	r2, [r3, #31]
 800f94e:	6a3b      	ldr	r3, [r7, #32]
 800f950:	7fdb      	ldrb	r3, [r3, #31]
 800f952:	429a      	cmp	r2, r3
 800f954:	d803      	bhi.n	800f95e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f958:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f95a:	69fb      	ldr	r3, [r7, #28]
 800f95c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d001      	beq.n	800f96a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f968:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1cb      	bne.n	800f90e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f976:	6a3b      	ldr	r3, [r7, #32]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d008      	beq.n	800f98e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f97c:	69b9      	ldr	r1, [r7, #24]
 800f97e:	6a38      	ldr	r0, [r7, #32]
 800f980:	f7ff ff0e 	bl	800f7a0 <ip_reass_free_complete_datagram>
 800f984:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f986:	697a      	ldr	r2, [r7, #20]
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	4413      	add	r3, r2
 800f98c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f98e:	697a      	ldr	r2, [r7, #20]
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	429a      	cmp	r2, r3
 800f994:	da02      	bge.n	800f99c <ip_reass_remove_oldest_datagram+0xb4>
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	2b01      	cmp	r3, #1
 800f99a:	dcac      	bgt.n	800f8f6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f99c:	697b      	ldr	r3, [r7, #20]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3728      	adds	r7, #40	; 0x28
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	20000640 	.word	0x20000640

0800f9ac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f9b6:	2004      	movs	r0, #4
 800f9b8:	f7f6 fed0 	bl	800675c <memp_malloc>
 800f9bc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d110      	bne.n	800f9e6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f9c4:	6839      	ldr	r1, [r7, #0]
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f7ff ff8e 	bl	800f8e8 <ip_reass_remove_oldest_datagram>
 800f9cc:	4602      	mov	r2, r0
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	dc03      	bgt.n	800f9dc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f9d4:	2004      	movs	r0, #4
 800f9d6:	f7f6 fec1 	bl	800675c <memp_malloc>
 800f9da:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d101      	bne.n	800f9e6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	e016      	b.n	800fa14 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f9e6:	2220      	movs	r2, #32
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	f000 fdf4 	bl	80105d8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	220f      	movs	r2, #15
 800f9f4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f9f6:	4b09      	ldr	r3, [pc, #36]	; (800fa1c <ip_reass_enqueue_new_datagram+0x70>)
 800f9f8:	681a      	ldr	r2, [r3, #0]
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f9fe:	4a07      	ldr	r2, [pc, #28]	; (800fa1c <ip_reass_enqueue_new_datagram+0x70>)
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	3308      	adds	r3, #8
 800fa08:	2214      	movs	r2, #20
 800fa0a:	6879      	ldr	r1, [r7, #4]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f000 fdd8 	bl	80105c2 <memcpy>
  return ipr;
 800fa12:	68fb      	ldr	r3, [r7, #12]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}
 800fa1c:	20000640 	.word	0x20000640

0800fa20 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fa2a:	4b10      	ldr	r3, [pc, #64]	; (800fa6c <ip_reass_dequeue_datagram+0x4c>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d104      	bne.n	800fa3e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4a0c      	ldr	r2, [pc, #48]	; (800fa6c <ip_reass_dequeue_datagram+0x4c>)
 800fa3a:	6013      	str	r3, [r2, #0]
 800fa3c:	e00d      	b.n	800fa5a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d106      	bne.n	800fa52 <ip_reass_dequeue_datagram+0x32>
 800fa44:	4b0a      	ldr	r3, [pc, #40]	; (800fa70 <ip_reass_dequeue_datagram+0x50>)
 800fa46:	f240 1245 	movw	r2, #325	; 0x145
 800fa4a:	490a      	ldr	r1, [pc, #40]	; (800fa74 <ip_reass_dequeue_datagram+0x54>)
 800fa4c:	480a      	ldr	r0, [pc, #40]	; (800fa78 <ip_reass_dequeue_datagram+0x58>)
 800fa4e:	f000 fdcb 	bl	80105e8 <iprintf>
    prev->next = ipr->next;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800fa5a:	6879      	ldr	r1, [r7, #4]
 800fa5c:	2004      	movs	r0, #4
 800fa5e:	f7f6 fec9 	bl	80067f4 <memp_free>
}
 800fa62:	bf00      	nop
 800fa64:	3708      	adds	r7, #8
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	20000640 	.word	0x20000640
 800fa70:	08013dc4 	.word	0x08013dc4
 800fa74:	08013e8c 	.word	0x08013e8c
 800fa78:	08013e0c 	.word	0x08013e0c

0800fa7c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b08c      	sub	sp, #48	; 0x30
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	885b      	ldrh	r3, [r3, #2]
 800fa9a:	b29b      	uxth	r3, r3
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7f6 f9d1 	bl	8005e44 <lwip_htons>
 800faa2:	4603      	mov	r3, r0
 800faa4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	f003 030f 	and.w	r3, r3, #15
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	009b      	lsls	r3, r3, #2
 800fab2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800fab4:	7e7b      	ldrb	r3, [r7, #25]
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	8b7a      	ldrh	r2, [r7, #26]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d202      	bcs.n	800fac4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fabe:	f04f 33ff 	mov.w	r3, #4294967295
 800fac2:	e135      	b.n	800fd30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fac4:	7e7b      	ldrb	r3, [r7, #25]
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	8b7a      	ldrh	r2, [r7, #26]
 800faca:	1ad3      	subs	r3, r2, r3
 800facc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	88db      	ldrh	r3, [r3, #6]
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7f6 f9b5 	bl	8005e44 <lwip_htons>
 800fada:	4603      	mov	r3, r0
 800fadc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	00db      	lsls	r3, r3, #3
 800fae4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800faec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faee:	2200      	movs	r2, #0
 800faf0:	701a      	strb	r2, [r3, #0]
 800faf2:	2200      	movs	r2, #0
 800faf4:	705a      	strb	r2, [r3, #1]
 800faf6:	2200      	movs	r2, #0
 800faf8:	709a      	strb	r2, [r3, #2]
 800fafa:	2200      	movs	r2, #0
 800fafc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800fafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb00:	8afa      	ldrh	r2, [r7, #22]
 800fb02:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800fb04:	8afa      	ldrh	r2, [r7, #22]
 800fb06:	8b7b      	ldrh	r3, [r7, #26]
 800fb08:	4413      	add	r3, r2
 800fb0a:	b29a      	uxth	r2, r3
 800fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800fb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb12:	88db      	ldrh	r3, [r3, #6]
 800fb14:	b29b      	uxth	r3, r3
 800fb16:	8afa      	ldrh	r2, [r7, #22]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d902      	bls.n	800fb22 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb1c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb20:	e106      	b.n	800fd30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	627b      	str	r3, [r7, #36]	; 0x24
 800fb28:	e068      	b.n	800fbfc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800fb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800fb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb32:	889b      	ldrh	r3, [r3, #4]
 800fb34:	b29a      	uxth	r2, r3
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	889b      	ldrh	r3, [r3, #4]
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d235      	bcs.n	800fbac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800fb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb44:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800fb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d020      	beq.n	800fb8e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4e:	889b      	ldrh	r3, [r3, #4]
 800fb50:	b29a      	uxth	r2, r3
 800fb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb54:	88db      	ldrh	r3, [r3, #6]
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d307      	bcc.n	800fb6c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5e:	88db      	ldrh	r3, [r3, #6]
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	889b      	ldrh	r3, [r3, #4]
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d902      	bls.n	800fb72 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb6c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb70:	e0de      	b.n	800fd30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800fb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb74:	68ba      	ldr	r2, [r7, #8]
 800fb76:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7a:	88db      	ldrh	r3, [r3, #6]
 800fb7c:	b29a      	uxth	r2, r3
 800fb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb80:	889b      	ldrh	r3, [r3, #4]
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d03d      	beq.n	800fc04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fb8c:	e03a      	b.n	800fc04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb90:	88db      	ldrh	r3, [r3, #6]
 800fb92:	b29a      	uxth	r2, r3
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	889b      	ldrh	r3, [r3, #4]
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d902      	bls.n	800fba4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb9e:	f04f 33ff 	mov.w	r3, #4294967295
 800fba2:	e0c5      	b.n	800fd30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	68ba      	ldr	r2, [r7, #8]
 800fba8:	605a      	str	r2, [r3, #4]
      break;
 800fbaa:	e02b      	b.n	800fc04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbae:	889b      	ldrh	r3, [r3, #4]
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	889b      	ldrh	r3, [r3, #4]
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d102      	bne.n	800fbc2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800fbc0:	e0b6      	b.n	800fd30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc4:	889b      	ldrh	r3, [r3, #4]
 800fbc6:	b29a      	uxth	r2, r3
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	88db      	ldrh	r3, [r3, #6]
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d202      	bcs.n	800fbd8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fbd2:	f04f 33ff 	mov.w	r3, #4294967295
 800fbd6:	e0ab      	b.n	800fd30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d009      	beq.n	800fbf2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe0:	88db      	ldrh	r3, [r3, #6]
 800fbe2:	b29a      	uxth	r2, r3
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	889b      	ldrh	r3, [r3, #4]
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d001      	beq.n	800fbf2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800fbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d193      	bne.n	800fb2a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fc02:	e000      	b.n	800fc06 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fc04:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d12d      	bne.n	800fc68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d01c      	beq.n	800fc4c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc14:	88db      	ldrh	r3, [r3, #6]
 800fc16:	b29a      	uxth	r2, r3
 800fc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1a:	889b      	ldrh	r3, [r3, #4]
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d906      	bls.n	800fc30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fc22:	4b45      	ldr	r3, [pc, #276]	; (800fd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fc24:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800fc28:	4944      	ldr	r1, [pc, #272]	; (800fd3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fc2a:	4845      	ldr	r0, [pc, #276]	; (800fd40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fc2c:	f000 fcdc 	bl	80105e8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc32:	68ba      	ldr	r2, [r7, #8]
 800fc34:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc38:	88db      	ldrh	r3, [r3, #6]
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3e:	889b      	ldrh	r3, [r3, #4]
 800fc40:	b29b      	uxth	r3, r3
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d010      	beq.n	800fc68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fc46:	2300      	movs	r3, #0
 800fc48:	623b      	str	r3, [r7, #32]
 800fc4a:	e00d      	b.n	800fc68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d006      	beq.n	800fc62 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fc54:	4b38      	ldr	r3, [pc, #224]	; (800fd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fc56:	f240 12bf 	movw	r2, #447	; 0x1bf
 800fc5a:	493a      	ldr	r1, [pc, #232]	; (800fd44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fc5c:	4838      	ldr	r0, [pc, #224]	; (800fd40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fc5e:	f000 fcc3 	bl	80105e8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	68ba      	ldr	r2, [r7, #8]
 800fc66:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d105      	bne.n	800fc7a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	7f9b      	ldrb	r3, [r3, #30]
 800fc72:	f003 0301 	and.w	r3, r3, #1
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d059      	beq.n	800fd2e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fc7a:	6a3b      	ldr	r3, [r7, #32]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d04f      	beq.n	800fd20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d006      	beq.n	800fc96 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	889b      	ldrh	r3, [r3, #4]
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d002      	beq.n	800fc9c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fc96:	2300      	movs	r3, #0
 800fc98:	623b      	str	r3, [r7, #32]
 800fc9a:	e041      	b.n	800fd20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800fca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fca6:	e012      	b.n	800fcce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800fcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb0:	88db      	ldrh	r3, [r3, #6]
 800fcb2:	b29a      	uxth	r2, r3
 800fcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb6:	889b      	ldrh	r3, [r3, #4]
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d002      	beq.n	800fcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	623b      	str	r3, [r7, #32]
            break;
 800fcc2:	e007      	b.n	800fcd4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800fcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d1e9      	bne.n	800fca8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fcd4:	6a3b      	ldr	r3, [r7, #32]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d022      	beq.n	800fd20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d106      	bne.n	800fcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fce2:	4b15      	ldr	r3, [pc, #84]	; (800fd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fce4:	f240 12df 	movw	r2, #479	; 0x1df
 800fce8:	4917      	ldr	r1, [pc, #92]	; (800fd48 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fcea:	4815      	ldr	r0, [pc, #84]	; (800fd40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fcec:	f000 fc7c 	bl	80105e8 <iprintf>
          LWIP_ASSERT("sanity check",
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d106      	bne.n	800fd0a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fcfc:	4b0e      	ldr	r3, [pc, #56]	; (800fd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fcfe:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fd02:	4911      	ldr	r1, [pc, #68]	; (800fd48 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fd04:	480e      	ldr	r0, [pc, #56]	; (800fd40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd06:	f000 fc6f 	bl	80105e8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d006      	beq.n	800fd20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fd12:	4b09      	ldr	r3, [pc, #36]	; (800fd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd14:	f240 12e3 	movw	r2, #483	; 0x1e3
 800fd18:	490c      	ldr	r1, [pc, #48]	; (800fd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fd1a:	4809      	ldr	r0, [pc, #36]	; (800fd40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd1c:	f000 fc64 	bl	80105e8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fd20:	6a3b      	ldr	r3, [r7, #32]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	bf14      	ite	ne
 800fd26:	2301      	movne	r3, #1
 800fd28:	2300      	moveq	r3, #0
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	e000      	b.n	800fd30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3730      	adds	r7, #48	; 0x30
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	08013dc4 	.word	0x08013dc4
 800fd3c:	08013ea8 	.word	0x08013ea8
 800fd40:	08013e0c 	.word	0x08013e0c
 800fd44:	08013ec8 	.word	0x08013ec8
 800fd48:	08013f00 	.word	0x08013f00
 800fd4c:	08013f10 	.word	0x08013f10

0800fd50 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b08e      	sub	sp, #56	; 0x38
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	f003 030f 	and.w	r3, r3, #15
 800fd66:	b2db      	uxtb	r3, r3
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	2b14      	cmp	r3, #20
 800fd6e:	f040 8167 	bne.w	8010040 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd74:	88db      	ldrh	r3, [r3, #6]
 800fd76:	b29b      	uxth	r3, r3
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7f6 f863 	bl	8005e44 <lwip_htons>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	00db      	lsls	r3, r3, #3
 800fd88:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8c:	885b      	ldrh	r3, [r3, #2]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7f6 f857 	bl	8005e44 <lwip_htons>
 800fd96:	4603      	mov	r3, r0
 800fd98:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	f003 030f 	and.w	r3, r3, #15
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800fdaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	f0c0 8146 	bcc.w	8010044 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fdb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fdbc:	b29b      	uxth	r3, r3
 800fdbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fdc0:	1ad3      	subs	r3, r2, r3
 800fdc2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7f7 fbab 	bl	8007520 <pbuf_clen>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fdce:	4ba3      	ldr	r3, [pc, #652]	; (801005c <ip4_reass+0x30c>)
 800fdd0:	881b      	ldrh	r3, [r3, #0]
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	8c3b      	ldrh	r3, [r7, #32]
 800fdd6:	4413      	add	r3, r2
 800fdd8:	2b0a      	cmp	r3, #10
 800fdda:	dd10      	ble.n	800fdfe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fddc:	8c3b      	ldrh	r3, [r7, #32]
 800fdde:	4619      	mov	r1, r3
 800fde0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fde2:	f7ff fd81 	bl	800f8e8 <ip_reass_remove_oldest_datagram>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	f000 812d 	beq.w	8010048 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fdee:	4b9b      	ldr	r3, [pc, #620]	; (801005c <ip4_reass+0x30c>)
 800fdf0:	881b      	ldrh	r3, [r3, #0]
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	8c3b      	ldrh	r3, [r7, #32]
 800fdf6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fdf8:	2b0a      	cmp	r3, #10
 800fdfa:	f300 8125 	bgt.w	8010048 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fdfe:	4b98      	ldr	r3, [pc, #608]	; (8010060 <ip4_reass+0x310>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	633b      	str	r3, [r7, #48]	; 0x30
 800fe04:	e015      	b.n	800fe32 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fe06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe08:	695a      	ldr	r2, [r3, #20]
 800fe0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d10c      	bne.n	800fe2c <ip4_reass+0xdc>
 800fe12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe14:	699a      	ldr	r2, [r3, #24]
 800fe16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe18:	691b      	ldr	r3, [r3, #16]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d106      	bne.n	800fe2c <ip4_reass+0xdc>
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe20:	899a      	ldrh	r2, [r3, #12]
 800fe22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe24:	889b      	ldrh	r3, [r3, #4]
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d006      	beq.n	800fe3a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fe2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	633b      	str	r3, [r7, #48]	; 0x30
 800fe32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d1e6      	bne.n	800fe06 <ip4_reass+0xb6>
 800fe38:	e000      	b.n	800fe3c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fe3a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fe3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d109      	bne.n	800fe56 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fe42:	8c3b      	ldrh	r3, [r7, #32]
 800fe44:	4619      	mov	r1, r3
 800fe46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe48:	f7ff fdb0 	bl	800f9ac <ip_reass_enqueue_new_datagram>
 800fe4c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fe4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d11c      	bne.n	800fe8e <ip4_reass+0x13e>
      goto nullreturn;
 800fe54:	e0f9      	b.n	801004a <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fe56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe58:	88db      	ldrh	r3, [r3, #6]
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7f5 fff1 	bl	8005e44 <lwip_htons>
 800fe62:	4603      	mov	r3, r0
 800fe64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d110      	bne.n	800fe8e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fe6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6e:	89db      	ldrh	r3, [r3, #14]
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7f5 ffe7 	bl	8005e44 <lwip_htons>
 800fe76:	4603      	mov	r3, r0
 800fe78:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d006      	beq.n	800fe8e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fe80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe82:	3308      	adds	r3, #8
 800fe84:	2214      	movs	r2, #20
 800fe86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f000 fb9a 	bl	80105c2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fe8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe90:	88db      	ldrh	r3, [r3, #6]
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	f003 0320 	and.w	r3, r3, #32
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	bf0c      	ite	eq
 800fe9c:	2301      	moveq	r3, #1
 800fe9e:	2300      	movne	r3, #0
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fea4:	69fb      	ldr	r3, [r7, #28]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00e      	beq.n	800fec8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800feaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800feac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800feae:	4413      	add	r3, r2
 800feb0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800feb2:	8b7a      	ldrh	r2, [r7, #26]
 800feb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800feb6:	429a      	cmp	r2, r3
 800feb8:	f0c0 80a0 	bcc.w	800fffc <ip4_reass+0x2ac>
 800febc:	8b7b      	ldrh	r3, [r7, #26]
 800febe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800fec2:	4293      	cmp	r3, r2
 800fec4:	f200 809a 	bhi.w	800fffc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fec8:	69fa      	ldr	r2, [r7, #28]
 800feca:	6879      	ldr	r1, [r7, #4]
 800fecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fece:	f7ff fdd5 	bl	800fa7c <ip_reass_chain_frag_into_datagram_and_validate>
 800fed2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feda:	f000 8091 	beq.w	8010000 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fede:	4b5f      	ldr	r3, [pc, #380]	; (801005c <ip4_reass+0x30c>)
 800fee0:	881a      	ldrh	r2, [r3, #0]
 800fee2:	8c3b      	ldrh	r3, [r7, #32]
 800fee4:	4413      	add	r3, r2
 800fee6:	b29a      	uxth	r2, r3
 800fee8:	4b5c      	ldr	r3, [pc, #368]	; (801005c <ip4_reass+0x30c>)
 800feea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00d      	beq.n	800ff0e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800fef2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fef6:	4413      	add	r3, r2
 800fef8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefc:	8a7a      	ldrh	r2, [r7, #18]
 800fefe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ff00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff02:	7f9b      	ldrb	r3, [r3, #30]
 800ff04:	f043 0301 	orr.w	r3, r3, #1
 800ff08:	b2da      	uxtb	r2, r3
 800ff0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d171      	bne.n	800fff8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ff14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff16:	8b9b      	ldrh	r3, [r3, #28]
 800ff18:	3314      	adds	r3, #20
 800ff1a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ff1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ff26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ff2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff30:	3308      	adds	r3, #8
 800ff32:	2214      	movs	r2, #20
 800ff34:	4619      	mov	r1, r3
 800ff36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff38:	f000 fb43 	bl	80105c2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ff3c:	8a3b      	ldrh	r3, [r7, #16]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7f5 ff80 	bl	8005e44 <lwip_htons>
 800ff44:	4603      	mov	r3, r0
 800ff46:	461a      	mov	r2, r3
 800ff48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ff4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4e:	2200      	movs	r2, #0
 800ff50:	719a      	strb	r2, [r3, #6]
 800ff52:	2200      	movs	r2, #0
 800ff54:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ff56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff58:	2200      	movs	r2, #0
 800ff5a:	729a      	strb	r2, [r3, #10]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ff60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ff66:	e00d      	b.n	800ff84 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ff68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ff6e:	2114      	movs	r1, #20
 800ff70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff72:	f7f7 f9c7 	bl	8007304 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ff76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f7f7 fb0b 	bl	8007594 <pbuf_cat>
      r = iprh->next_pbuf;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ff84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d1ee      	bne.n	800ff68 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ff8a:	4b35      	ldr	r3, [pc, #212]	; (8010060 <ip4_reass+0x310>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d102      	bne.n	800ff9a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ff94:	2300      	movs	r3, #0
 800ff96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff98:	e010      	b.n	800ffbc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ff9a:	4b31      	ldr	r3, [pc, #196]	; (8010060 <ip4_reass+0x310>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffa0:	e007      	b.n	800ffb2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ffa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d006      	beq.n	800ffba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ffac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d1f4      	bne.n	800ffa2 <ip4_reass+0x252>
 800ffb8:	e000      	b.n	800ffbc <ip4_reass+0x26c>
          break;
 800ffba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ffbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ffbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffc0:	f7ff fd2e 	bl	800fa20 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7f7 faab 	bl	8007520 <pbuf_clen>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ffce:	4b23      	ldr	r3, [pc, #140]	; (801005c <ip4_reass+0x30c>)
 800ffd0:	881b      	ldrh	r3, [r3, #0]
 800ffd2:	8c3a      	ldrh	r2, [r7, #32]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d906      	bls.n	800ffe6 <ip4_reass+0x296>
 800ffd8:	4b22      	ldr	r3, [pc, #136]	; (8010064 <ip4_reass+0x314>)
 800ffda:	f240 229b 	movw	r2, #667	; 0x29b
 800ffde:	4922      	ldr	r1, [pc, #136]	; (8010068 <ip4_reass+0x318>)
 800ffe0:	4822      	ldr	r0, [pc, #136]	; (801006c <ip4_reass+0x31c>)
 800ffe2:	f000 fb01 	bl	80105e8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ffe6:	4b1d      	ldr	r3, [pc, #116]	; (801005c <ip4_reass+0x30c>)
 800ffe8:	881a      	ldrh	r2, [r3, #0]
 800ffea:	8c3b      	ldrh	r3, [r7, #32]
 800ffec:	1ad3      	subs	r3, r2, r3
 800ffee:	b29a      	uxth	r2, r3
 800fff0:	4b1a      	ldr	r3, [pc, #104]	; (801005c <ip4_reass+0x30c>)
 800fff2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	e02c      	b.n	8010052 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fff8:	2300      	movs	r3, #0
 800fffa:	e02a      	b.n	8010052 <ip4_reass+0x302>

nullreturn_ipr:
 800fffc:	bf00      	nop
 800fffe:	e000      	b.n	8010002 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010000:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010004:	2b00      	cmp	r3, #0
 8010006:	d106      	bne.n	8010016 <ip4_reass+0x2c6>
 8010008:	4b16      	ldr	r3, [pc, #88]	; (8010064 <ip4_reass+0x314>)
 801000a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801000e:	4918      	ldr	r1, [pc, #96]	; (8010070 <ip4_reass+0x320>)
 8010010:	4816      	ldr	r0, [pc, #88]	; (801006c <ip4_reass+0x31c>)
 8010012:	f000 fae9 	bl	80105e8 <iprintf>
  if (ipr->p == NULL) {
 8010016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d114      	bne.n	8010048 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801001e:	4b10      	ldr	r3, [pc, #64]	; (8010060 <ip4_reass+0x310>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010024:	429a      	cmp	r2, r3
 8010026:	d006      	beq.n	8010036 <ip4_reass+0x2e6>
 8010028:	4b0e      	ldr	r3, [pc, #56]	; (8010064 <ip4_reass+0x314>)
 801002a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801002e:	4911      	ldr	r1, [pc, #68]	; (8010074 <ip4_reass+0x324>)
 8010030:	480e      	ldr	r0, [pc, #56]	; (801006c <ip4_reass+0x31c>)
 8010032:	f000 fad9 	bl	80105e8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010036:	2100      	movs	r1, #0
 8010038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801003a:	f7ff fcf1 	bl	800fa20 <ip_reass_dequeue_datagram>
 801003e:	e004      	b.n	801004a <ip4_reass+0x2fa>
    goto nullreturn;
 8010040:	bf00      	nop
 8010042:	e002      	b.n	801004a <ip4_reass+0x2fa>
    goto nullreturn;
 8010044:	bf00      	nop
 8010046:	e000      	b.n	801004a <ip4_reass+0x2fa>
  }

nullreturn:
 8010048:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f7f7 f9e0 	bl	8007410 <pbuf_free>
  return NULL;
 8010050:	2300      	movs	r3, #0
}
 8010052:	4618      	mov	r0, r3
 8010054:	3738      	adds	r7, #56	; 0x38
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	20000644 	.word	0x20000644
 8010060:	20000640 	.word	0x20000640
 8010064:	08013dc4 	.word	0x08013dc4
 8010068:	08013f34 	.word	0x08013f34
 801006c:	08013e0c 	.word	0x08013e0c
 8010070:	08013f50 	.word	0x08013f50
 8010074:	08013f5c 	.word	0x08013f5c

08010078 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801007c:	2005      	movs	r0, #5
 801007e:	f7f6 fb6d 	bl	800675c <memp_malloc>
 8010082:	4603      	mov	r3, r0
}
 8010084:	4618      	mov	r0, r3
 8010086:	bd80      	pop	{r7, pc}

08010088 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d106      	bne.n	80100a4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010096:	4b07      	ldr	r3, [pc, #28]	; (80100b4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010098:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801009c:	4906      	ldr	r1, [pc, #24]	; (80100b8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801009e:	4807      	ldr	r0, [pc, #28]	; (80100bc <ip_frag_free_pbuf_custom_ref+0x34>)
 80100a0:	f000 faa2 	bl	80105e8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80100a4:	6879      	ldr	r1, [r7, #4]
 80100a6:	2005      	movs	r0, #5
 80100a8:	f7f6 fba4 	bl	80067f4 <memp_free>
}
 80100ac:	bf00      	nop
 80100ae:	3708      	adds	r7, #8
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	08013dc4 	.word	0x08013dc4
 80100b8:	08013f7c 	.word	0x08013f7c
 80100bc:	08013e0c 	.word	0x08013e0c

080100c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d106      	bne.n	80100e0 <ipfrag_free_pbuf_custom+0x20>
 80100d2:	4b11      	ldr	r3, [pc, #68]	; (8010118 <ipfrag_free_pbuf_custom+0x58>)
 80100d4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80100d8:	4910      	ldr	r1, [pc, #64]	; (801011c <ipfrag_free_pbuf_custom+0x5c>)
 80100da:	4811      	ldr	r0, [pc, #68]	; (8010120 <ipfrag_free_pbuf_custom+0x60>)
 80100dc:	f000 fa84 	bl	80105e8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80100e0:	68fa      	ldr	r2, [r7, #12]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d006      	beq.n	80100f6 <ipfrag_free_pbuf_custom+0x36>
 80100e8:	4b0b      	ldr	r3, [pc, #44]	; (8010118 <ipfrag_free_pbuf_custom+0x58>)
 80100ea:	f240 22cf 	movw	r2, #719	; 0x2cf
 80100ee:	490d      	ldr	r1, [pc, #52]	; (8010124 <ipfrag_free_pbuf_custom+0x64>)
 80100f0:	480b      	ldr	r0, [pc, #44]	; (8010120 <ipfrag_free_pbuf_custom+0x60>)
 80100f2:	f000 fa79 	bl	80105e8 <iprintf>
  if (pcr->original != NULL) {
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	695b      	ldr	r3, [r3, #20]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d004      	beq.n	8010108 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	695b      	ldr	r3, [r3, #20]
 8010102:	4618      	mov	r0, r3
 8010104:	f7f7 f984 	bl	8007410 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010108:	68f8      	ldr	r0, [r7, #12]
 801010a:	f7ff ffbd 	bl	8010088 <ip_frag_free_pbuf_custom_ref>
}
 801010e:	bf00      	nop
 8010110:	3710      	adds	r7, #16
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	08013dc4 	.word	0x08013dc4
 801011c:	08013f88 	.word	0x08013f88
 8010120:	08013e0c 	.word	0x08013e0c
 8010124:	08013f94 	.word	0x08013f94

08010128 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b094      	sub	sp, #80	; 0x50
 801012c:	af02      	add	r7, sp, #8
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010134:	2300      	movs	r3, #0
 8010136:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801013e:	3b14      	subs	r3, #20
 8010140:	2b00      	cmp	r3, #0
 8010142:	da00      	bge.n	8010146 <ip4_frag+0x1e>
 8010144:	3307      	adds	r3, #7
 8010146:	10db      	asrs	r3, r3, #3
 8010148:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801014a:	2314      	movs	r3, #20
 801014c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010156:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	f003 030f 	and.w	r3, r3, #15
 8010160:	b2db      	uxtb	r3, r3
 8010162:	009b      	lsls	r3, r3, #2
 8010164:	b2db      	uxtb	r3, r3
 8010166:	2b14      	cmp	r3, #20
 8010168:	d002      	beq.n	8010170 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801016a:	f06f 0305 	mvn.w	r3, #5
 801016e:	e10f      	b.n	8010390 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	895b      	ldrh	r3, [r3, #10]
 8010174:	2b13      	cmp	r3, #19
 8010176:	d809      	bhi.n	801018c <ip4_frag+0x64>
 8010178:	4b87      	ldr	r3, [pc, #540]	; (8010398 <ip4_frag+0x270>)
 801017a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801017e:	4987      	ldr	r1, [pc, #540]	; (801039c <ip4_frag+0x274>)
 8010180:	4887      	ldr	r0, [pc, #540]	; (80103a0 <ip4_frag+0x278>)
 8010182:	f000 fa31 	bl	80105e8 <iprintf>
 8010186:	f06f 0305 	mvn.w	r3, #5
 801018a:	e101      	b.n	8010390 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801018c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801018e:	88db      	ldrh	r3, [r3, #6]
 8010190:	b29b      	uxth	r3, r3
 8010192:	4618      	mov	r0, r3
 8010194:	f7f5 fe56 	bl	8005e44 <lwip_htons>
 8010198:	4603      	mov	r3, r0
 801019a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801019c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801019e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80101a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80101a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80101a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80101ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	891b      	ldrh	r3, [r3, #8]
 80101b2:	3b14      	subs	r3, #20
 80101b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80101b8:	e0e0      	b.n	801037c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80101ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80101bc:	00db      	lsls	r3, r3, #3
 80101be:	b29b      	uxth	r3, r3
 80101c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80101c4:	4293      	cmp	r3, r2
 80101c6:	bf28      	it	cs
 80101c8:	4613      	movcs	r3, r2
 80101ca:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80101cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80101d0:	2114      	movs	r1, #20
 80101d2:	200e      	movs	r0, #14
 80101d4:	f7f6 fe3c 	bl	8006e50 <pbuf_alloc>
 80101d8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80101da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101dc:	2b00      	cmp	r3, #0
 80101de:	f000 80d4 	beq.w	801038a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80101e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e4:	895b      	ldrh	r3, [r3, #10]
 80101e6:	2b13      	cmp	r3, #19
 80101e8:	d806      	bhi.n	80101f8 <ip4_frag+0xd0>
 80101ea:	4b6b      	ldr	r3, [pc, #428]	; (8010398 <ip4_frag+0x270>)
 80101ec:	f240 3225 	movw	r2, #805	; 0x325
 80101f0:	496c      	ldr	r1, [pc, #432]	; (80103a4 <ip4_frag+0x27c>)
 80101f2:	486b      	ldr	r0, [pc, #428]	; (80103a0 <ip4_frag+0x278>)
 80101f4:	f000 f9f8 	bl	80105e8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80101f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	2214      	movs	r2, #20
 80101fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010200:	4618      	mov	r0, r3
 8010202:	f000 f9de 	bl	80105c2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801020c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801020e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010212:	e064      	b.n	80102de <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	895a      	ldrh	r2, [r3, #10]
 8010218:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801021a:	1ad3      	subs	r3, r2, r3
 801021c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	895b      	ldrh	r3, [r3, #10]
 8010222:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010224:	429a      	cmp	r2, r3
 8010226:	d906      	bls.n	8010236 <ip4_frag+0x10e>
 8010228:	4b5b      	ldr	r3, [pc, #364]	; (8010398 <ip4_frag+0x270>)
 801022a:	f240 322d 	movw	r2, #813	; 0x32d
 801022e:	495e      	ldr	r1, [pc, #376]	; (80103a8 <ip4_frag+0x280>)
 8010230:	485b      	ldr	r0, [pc, #364]	; (80103a0 <ip4_frag+0x278>)
 8010232:	f000 f9d9 	bl	80105e8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010236:	8bfa      	ldrh	r2, [r7, #30]
 8010238:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801023c:	4293      	cmp	r3, r2
 801023e:	bf28      	it	cs
 8010240:	4613      	movcs	r3, r2
 8010242:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010246:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801024a:	2b00      	cmp	r3, #0
 801024c:	d105      	bne.n	801025a <ip4_frag+0x132>
        poff = 0;
 801024e:	2300      	movs	r3, #0
 8010250:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	60fb      	str	r3, [r7, #12]
        continue;
 8010258:	e041      	b.n	80102de <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801025a:	f7ff ff0d 	bl	8010078 <ip_frag_alloc_pbuf_custom_ref>
 801025e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d103      	bne.n	801026e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010266:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010268:	f7f7 f8d2 	bl	8007410 <pbuf_free>
        goto memerr;
 801026c:	e08e      	b.n	801038c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801026e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010274:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010276:	4413      	add	r3, r2
 8010278:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801027c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010280:	9201      	str	r2, [sp, #4]
 8010282:	9300      	str	r3, [sp, #0]
 8010284:	4603      	mov	r3, r0
 8010286:	2241      	movs	r2, #65	; 0x41
 8010288:	2000      	movs	r0, #0
 801028a:	f7f6 ff07 	bl	800709c <pbuf_alloced_custom>
 801028e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d106      	bne.n	80102a4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010296:	69b8      	ldr	r0, [r7, #24]
 8010298:	f7ff fef6 	bl	8010088 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801029c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801029e:	f7f7 f8b7 	bl	8007410 <pbuf_free>
        goto memerr;
 80102a2:	e073      	b.n	801038c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80102a4:	68f8      	ldr	r0, [r7, #12]
 80102a6:	f7f7 f953 	bl	8007550 <pbuf_ref>
      pcr->original = p;
 80102aa:	69bb      	ldr	r3, [r7, #24]
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80102b0:	69bb      	ldr	r3, [r7, #24]
 80102b2:	4a3e      	ldr	r2, [pc, #248]	; (80103ac <ip4_frag+0x284>)
 80102b4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80102b6:	6979      	ldr	r1, [r7, #20]
 80102b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102ba:	f7f7 f96b 	bl	8007594 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80102be:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80102c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80102cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d004      	beq.n	80102de <ip4_frag+0x1b6>
        poff = 0;
 80102d4:	2300      	movs	r3, #0
 80102d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80102de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d196      	bne.n	8010214 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80102e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80102e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80102ec:	4413      	add	r3, r2
 80102ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80102f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80102f8:	3b14      	subs	r3, #20
 80102fa:	429a      	cmp	r2, r3
 80102fc:	bfd4      	ite	le
 80102fe:	2301      	movle	r3, #1
 8010300:	2300      	movgt	r3, #0
 8010302:	b2db      	uxtb	r3, r3
 8010304:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010306:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801030a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801030e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010310:	6a3b      	ldr	r3, [r7, #32]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d002      	beq.n	801031c <ip4_frag+0x1f4>
 8010316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010318:	2b00      	cmp	r3, #0
 801031a:	d003      	beq.n	8010324 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801031c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801031e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010322:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010324:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010326:	4618      	mov	r0, r3
 8010328:	f7f5 fd8c 	bl	8005e44 <lwip_htons>
 801032c:	4603      	mov	r3, r0
 801032e:	461a      	mov	r2, r3
 8010330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010332:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010334:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010336:	3314      	adds	r3, #20
 8010338:	b29b      	uxth	r3, r3
 801033a:	4618      	mov	r0, r3
 801033c:	f7f5 fd82 	bl	8005e44 <lwip_htons>
 8010340:	4603      	mov	r3, r0
 8010342:	461a      	mov	r2, r3
 8010344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010346:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034a:	2200      	movs	r2, #0
 801034c:	729a      	strb	r2, [r3, #10]
 801034e:	2200      	movs	r2, #0
 8010350:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	695b      	ldr	r3, [r3, #20]
 8010356:	687a      	ldr	r2, [r7, #4]
 8010358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801035a:	68b8      	ldr	r0, [r7, #8]
 801035c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801035e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010360:	f7f7 f856 	bl	8007410 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010364:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010368:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801036a:	1ad3      	subs	r3, r2, r3
 801036c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010370:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010374:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010376:	4413      	add	r3, r2
 8010378:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801037c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010380:	2b00      	cmp	r3, #0
 8010382:	f47f af1a 	bne.w	80101ba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010386:	2300      	movs	r3, #0
 8010388:	e002      	b.n	8010390 <ip4_frag+0x268>
      goto memerr;
 801038a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801038c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010390:	4618      	mov	r0, r3
 8010392:	3748      	adds	r7, #72	; 0x48
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	08013dc4 	.word	0x08013dc4
 801039c:	08013fa0 	.word	0x08013fa0
 80103a0:	08013e0c 	.word	0x08013e0c
 80103a4:	08013fbc 	.word	0x08013fbc
 80103a8:	08013fdc 	.word	0x08013fdc
 80103ac:	080100c1 	.word	0x080100c1

080103b0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b086      	sub	sp, #24
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80103ba:	230e      	movs	r3, #14
 80103bc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	895b      	ldrh	r3, [r3, #10]
 80103c2:	2b0e      	cmp	r3, #14
 80103c4:	d96e      	bls.n	80104a4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	7bdb      	ldrb	r3, [r3, #15]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d106      	bne.n	80103dc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103d4:	3301      	adds	r3, #1
 80103d6:	b2da      	uxtb	r2, r3
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	7b1a      	ldrb	r2, [r3, #12]
 80103e6:	7b5b      	ldrb	r3, [r3, #13]
 80103e8:	021b      	lsls	r3, r3, #8
 80103ea:	4313      	orrs	r3, r2
 80103ec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80103ee:	693b      	ldr	r3, [r7, #16]
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	f003 0301 	and.w	r3, r3, #1
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d023      	beq.n	8010442 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d10f      	bne.n	8010422 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	785b      	ldrb	r3, [r3, #1]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d11b      	bne.n	8010442 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801040e:	2b5e      	cmp	r3, #94	; 0x5e
 8010410:	d117      	bne.n	8010442 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	7b5b      	ldrb	r3, [r3, #13]
 8010416:	f043 0310 	orr.w	r3, r3, #16
 801041a:	b2da      	uxtb	r2, r3
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	735a      	strb	r2, [r3, #13]
 8010420:	e00f      	b.n	8010442 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	2206      	movs	r2, #6
 8010426:	4928      	ldr	r1, [pc, #160]	; (80104c8 <ethernet_input+0x118>)
 8010428:	4618      	mov	r0, r3
 801042a:	f000 f8bb 	bl	80105a4 <memcmp>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d106      	bne.n	8010442 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	7b5b      	ldrb	r3, [r3, #13]
 8010438:	f043 0308 	orr.w	r3, r3, #8
 801043c:	b2da      	uxtb	r2, r3
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010442:	89fb      	ldrh	r3, [r7, #14]
 8010444:	2b08      	cmp	r3, #8
 8010446:	d003      	beq.n	8010450 <ethernet_input+0xa0>
 8010448:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801044c:	d014      	beq.n	8010478 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801044e:	e032      	b.n	80104b6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010456:	f003 0308 	and.w	r3, r3, #8
 801045a:	2b00      	cmp	r3, #0
 801045c:	d024      	beq.n	80104a8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801045e:	8afb      	ldrh	r3, [r7, #22]
 8010460:	4619      	mov	r1, r3
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f7f6 ff4e 	bl	8007304 <pbuf_remove_header>
 8010468:	4603      	mov	r3, r0
 801046a:	2b00      	cmp	r3, #0
 801046c:	d11e      	bne.n	80104ac <ethernet_input+0xfc>
        ip4_input(p, netif);
 801046e:	6839      	ldr	r1, [r7, #0]
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f7fe ff2d 	bl	800f2d0 <ip4_input>
      break;
 8010476:	e013      	b.n	80104a0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801047e:	f003 0308 	and.w	r3, r3, #8
 8010482:	2b00      	cmp	r3, #0
 8010484:	d014      	beq.n	80104b0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010486:	8afb      	ldrh	r3, [r7, #22]
 8010488:	4619      	mov	r1, r3
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f7f6 ff3a 	bl	8007304 <pbuf_remove_header>
 8010490:	4603      	mov	r3, r0
 8010492:	2b00      	cmp	r3, #0
 8010494:	d10e      	bne.n	80104b4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010496:	6839      	ldr	r1, [r7, #0]
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f7fe f8cd 	bl	800e638 <etharp_input>
      break;
 801049e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80104a0:	2300      	movs	r3, #0
 80104a2:	e00c      	b.n	80104be <ethernet_input+0x10e>
    goto free_and_return;
 80104a4:	bf00      	nop
 80104a6:	e006      	b.n	80104b6 <ethernet_input+0x106>
        goto free_and_return;
 80104a8:	bf00      	nop
 80104aa:	e004      	b.n	80104b6 <ethernet_input+0x106>
        goto free_and_return;
 80104ac:	bf00      	nop
 80104ae:	e002      	b.n	80104b6 <ethernet_input+0x106>
        goto free_and_return;
 80104b0:	bf00      	nop
 80104b2:	e000      	b.n	80104b6 <ethernet_input+0x106>
        goto free_and_return;
 80104b4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f7f6 ffaa 	bl	8007410 <pbuf_free>
  return ERR_OK;
 80104bc:	2300      	movs	r3, #0
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3718      	adds	r7, #24
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	080143a0 	.word	0x080143a0

080104cc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b086      	sub	sp, #24
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	60f8      	str	r0, [r7, #12]
 80104d4:	60b9      	str	r1, [r7, #8]
 80104d6:	607a      	str	r2, [r7, #4]
 80104d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80104da:	8c3b      	ldrh	r3, [r7, #32]
 80104dc:	4618      	mov	r0, r3
 80104de:	f7f5 fcb1 	bl	8005e44 <lwip_htons>
 80104e2:	4603      	mov	r3, r0
 80104e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80104e6:	210e      	movs	r1, #14
 80104e8:	68b8      	ldr	r0, [r7, #8]
 80104ea:	f7f6 fefb 	bl	80072e4 <pbuf_add_header>
 80104ee:	4603      	mov	r3, r0
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d125      	bne.n	8010540 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	8afa      	ldrh	r2, [r7, #22]
 80104fe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	2206      	movs	r2, #6
 8010504:	6839      	ldr	r1, [r7, #0]
 8010506:	4618      	mov	r0, r3
 8010508:	f000 f85b 	bl	80105c2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	3306      	adds	r3, #6
 8010510:	2206      	movs	r2, #6
 8010512:	6879      	ldr	r1, [r7, #4]
 8010514:	4618      	mov	r0, r3
 8010516:	f000 f854 	bl	80105c2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010520:	2b06      	cmp	r3, #6
 8010522:	d006      	beq.n	8010532 <ethernet_output+0x66>
 8010524:	4b0a      	ldr	r3, [pc, #40]	; (8010550 <ethernet_output+0x84>)
 8010526:	f240 1233 	movw	r2, #307	; 0x133
 801052a:	490a      	ldr	r1, [pc, #40]	; (8010554 <ethernet_output+0x88>)
 801052c:	480a      	ldr	r0, [pc, #40]	; (8010558 <ethernet_output+0x8c>)
 801052e:	f000 f85b 	bl	80105e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	699b      	ldr	r3, [r3, #24]
 8010536:	68b9      	ldr	r1, [r7, #8]
 8010538:	68f8      	ldr	r0, [r7, #12]
 801053a:	4798      	blx	r3
 801053c:	4603      	mov	r3, r0
 801053e:	e002      	b.n	8010546 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010540:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010542:	f06f 0301 	mvn.w	r3, #1
}
 8010546:	4618      	mov	r0, r3
 8010548:	3718      	adds	r7, #24
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	bf00      	nop
 8010550:	08013fec 	.word	0x08013fec
 8010554:	08014024 	.word	0x08014024
 8010558:	08014058 	.word	0x08014058

0801055c <__libc_init_array>:
 801055c:	b570      	push	{r4, r5, r6, lr}
 801055e:	4e0d      	ldr	r6, [pc, #52]	; (8010594 <__libc_init_array+0x38>)
 8010560:	4c0d      	ldr	r4, [pc, #52]	; (8010598 <__libc_init_array+0x3c>)
 8010562:	1ba4      	subs	r4, r4, r6
 8010564:	10a4      	asrs	r4, r4, #2
 8010566:	2500      	movs	r5, #0
 8010568:	42a5      	cmp	r5, r4
 801056a:	d109      	bne.n	8010580 <__libc_init_array+0x24>
 801056c:	4e0b      	ldr	r6, [pc, #44]	; (801059c <__libc_init_array+0x40>)
 801056e:	4c0c      	ldr	r4, [pc, #48]	; (80105a0 <__libc_init_array+0x44>)
 8010570:	f000 ff7a 	bl	8011468 <_init>
 8010574:	1ba4      	subs	r4, r4, r6
 8010576:	10a4      	asrs	r4, r4, #2
 8010578:	2500      	movs	r5, #0
 801057a:	42a5      	cmp	r5, r4
 801057c:	d105      	bne.n	801058a <__libc_init_array+0x2e>
 801057e:	bd70      	pop	{r4, r5, r6, pc}
 8010580:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010584:	4798      	blx	r3
 8010586:	3501      	adds	r5, #1
 8010588:	e7ee      	b.n	8010568 <__libc_init_array+0xc>
 801058a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801058e:	4798      	blx	r3
 8010590:	3501      	adds	r5, #1
 8010592:	e7f2      	b.n	801057a <__libc_init_array+0x1e>
 8010594:	08014450 	.word	0x08014450
 8010598:	08014450 	.word	0x08014450
 801059c:	08014450 	.word	0x08014450
 80105a0:	08014454 	.word	0x08014454

080105a4 <memcmp>:
 80105a4:	b530      	push	{r4, r5, lr}
 80105a6:	2400      	movs	r4, #0
 80105a8:	42a2      	cmp	r2, r4
 80105aa:	d101      	bne.n	80105b0 <memcmp+0xc>
 80105ac:	2000      	movs	r0, #0
 80105ae:	e007      	b.n	80105c0 <memcmp+0x1c>
 80105b0:	5d03      	ldrb	r3, [r0, r4]
 80105b2:	3401      	adds	r4, #1
 80105b4:	190d      	adds	r5, r1, r4
 80105b6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80105ba:	42ab      	cmp	r3, r5
 80105bc:	d0f4      	beq.n	80105a8 <memcmp+0x4>
 80105be:	1b58      	subs	r0, r3, r5
 80105c0:	bd30      	pop	{r4, r5, pc}

080105c2 <memcpy>:
 80105c2:	b510      	push	{r4, lr}
 80105c4:	1e43      	subs	r3, r0, #1
 80105c6:	440a      	add	r2, r1
 80105c8:	4291      	cmp	r1, r2
 80105ca:	d100      	bne.n	80105ce <memcpy+0xc>
 80105cc:	bd10      	pop	{r4, pc}
 80105ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105d6:	e7f7      	b.n	80105c8 <memcpy+0x6>

080105d8 <memset>:
 80105d8:	4402      	add	r2, r0
 80105da:	4603      	mov	r3, r0
 80105dc:	4293      	cmp	r3, r2
 80105de:	d100      	bne.n	80105e2 <memset+0xa>
 80105e0:	4770      	bx	lr
 80105e2:	f803 1b01 	strb.w	r1, [r3], #1
 80105e6:	e7f9      	b.n	80105dc <memset+0x4>

080105e8 <iprintf>:
 80105e8:	b40f      	push	{r0, r1, r2, r3}
 80105ea:	4b0a      	ldr	r3, [pc, #40]	; (8010614 <iprintf+0x2c>)
 80105ec:	b513      	push	{r0, r1, r4, lr}
 80105ee:	681c      	ldr	r4, [r3, #0]
 80105f0:	b124      	cbz	r4, 80105fc <iprintf+0x14>
 80105f2:	69a3      	ldr	r3, [r4, #24]
 80105f4:	b913      	cbnz	r3, 80105fc <iprintf+0x14>
 80105f6:	4620      	mov	r0, r4
 80105f8:	f000 f8a2 	bl	8010740 <__sinit>
 80105fc:	ab05      	add	r3, sp, #20
 80105fe:	9a04      	ldr	r2, [sp, #16]
 8010600:	68a1      	ldr	r1, [r4, #8]
 8010602:	9301      	str	r3, [sp, #4]
 8010604:	4620      	mov	r0, r4
 8010606:	f000 f9ff 	bl	8010a08 <_vfiprintf_r>
 801060a:	b002      	add	sp, #8
 801060c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010610:	b004      	add	sp, #16
 8010612:	4770      	bx	lr
 8010614:	20000014 	.word	0x20000014

08010618 <rand>:
 8010618:	b538      	push	{r3, r4, r5, lr}
 801061a:	4b13      	ldr	r3, [pc, #76]	; (8010668 <rand+0x50>)
 801061c:	681c      	ldr	r4, [r3, #0]
 801061e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010620:	b97b      	cbnz	r3, 8010642 <rand+0x2a>
 8010622:	2018      	movs	r0, #24
 8010624:	f000 f916 	bl	8010854 <malloc>
 8010628:	4a10      	ldr	r2, [pc, #64]	; (801066c <rand+0x54>)
 801062a:	4b11      	ldr	r3, [pc, #68]	; (8010670 <rand+0x58>)
 801062c:	63a0      	str	r0, [r4, #56]	; 0x38
 801062e:	e9c0 2300 	strd	r2, r3, [r0]
 8010632:	4b10      	ldr	r3, [pc, #64]	; (8010674 <rand+0x5c>)
 8010634:	6083      	str	r3, [r0, #8]
 8010636:	230b      	movs	r3, #11
 8010638:	8183      	strh	r3, [r0, #12]
 801063a:	2201      	movs	r2, #1
 801063c:	2300      	movs	r3, #0
 801063e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010642:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010644:	480c      	ldr	r0, [pc, #48]	; (8010678 <rand+0x60>)
 8010646:	690a      	ldr	r2, [r1, #16]
 8010648:	694b      	ldr	r3, [r1, #20]
 801064a:	4c0c      	ldr	r4, [pc, #48]	; (801067c <rand+0x64>)
 801064c:	4350      	muls	r0, r2
 801064e:	fb04 0003 	mla	r0, r4, r3, r0
 8010652:	fba2 2304 	umull	r2, r3, r2, r4
 8010656:	4403      	add	r3, r0
 8010658:	1c54      	adds	r4, r2, #1
 801065a:	f143 0500 	adc.w	r5, r3, #0
 801065e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8010662:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8010666:	bd38      	pop	{r3, r4, r5, pc}
 8010668:	20000014 	.word	0x20000014
 801066c:	abcd330e 	.word	0xabcd330e
 8010670:	e66d1234 	.word	0xe66d1234
 8010674:	0005deec 	.word	0x0005deec
 8010678:	5851f42d 	.word	0x5851f42d
 801067c:	4c957f2d 	.word	0x4c957f2d

08010680 <strchr>:
 8010680:	b2c9      	uxtb	r1, r1
 8010682:	4603      	mov	r3, r0
 8010684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010688:	b11a      	cbz	r2, 8010692 <strchr+0x12>
 801068a:	428a      	cmp	r2, r1
 801068c:	d1f9      	bne.n	8010682 <strchr+0x2>
 801068e:	4618      	mov	r0, r3
 8010690:	4770      	bx	lr
 8010692:	2900      	cmp	r1, #0
 8010694:	bf18      	it	ne
 8010696:	2300      	movne	r3, #0
 8010698:	e7f9      	b.n	801068e <strchr+0xe>

0801069a <strncmp>:
 801069a:	b510      	push	{r4, lr}
 801069c:	b16a      	cbz	r2, 80106ba <strncmp+0x20>
 801069e:	3901      	subs	r1, #1
 80106a0:	1884      	adds	r4, r0, r2
 80106a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80106a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d103      	bne.n	80106b6 <strncmp+0x1c>
 80106ae:	42a0      	cmp	r0, r4
 80106b0:	d001      	beq.n	80106b6 <strncmp+0x1c>
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1f5      	bne.n	80106a2 <strncmp+0x8>
 80106b6:	1a98      	subs	r0, r3, r2
 80106b8:	bd10      	pop	{r4, pc}
 80106ba:	4610      	mov	r0, r2
 80106bc:	e7fc      	b.n	80106b8 <strncmp+0x1e>
	...

080106c0 <std>:
 80106c0:	2300      	movs	r3, #0
 80106c2:	b510      	push	{r4, lr}
 80106c4:	4604      	mov	r4, r0
 80106c6:	e9c0 3300 	strd	r3, r3, [r0]
 80106ca:	6083      	str	r3, [r0, #8]
 80106cc:	8181      	strh	r1, [r0, #12]
 80106ce:	6643      	str	r3, [r0, #100]	; 0x64
 80106d0:	81c2      	strh	r2, [r0, #14]
 80106d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80106d6:	6183      	str	r3, [r0, #24]
 80106d8:	4619      	mov	r1, r3
 80106da:	2208      	movs	r2, #8
 80106dc:	305c      	adds	r0, #92	; 0x5c
 80106de:	f7ff ff7b 	bl	80105d8 <memset>
 80106e2:	4b05      	ldr	r3, [pc, #20]	; (80106f8 <std+0x38>)
 80106e4:	6263      	str	r3, [r4, #36]	; 0x24
 80106e6:	4b05      	ldr	r3, [pc, #20]	; (80106fc <std+0x3c>)
 80106e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80106ea:	4b05      	ldr	r3, [pc, #20]	; (8010700 <std+0x40>)
 80106ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80106ee:	4b05      	ldr	r3, [pc, #20]	; (8010704 <std+0x44>)
 80106f0:	6224      	str	r4, [r4, #32]
 80106f2:	6323      	str	r3, [r4, #48]	; 0x30
 80106f4:	bd10      	pop	{r4, pc}
 80106f6:	bf00      	nop
 80106f8:	08010f65 	.word	0x08010f65
 80106fc:	08010f87 	.word	0x08010f87
 8010700:	08010fbf 	.word	0x08010fbf
 8010704:	08010fe3 	.word	0x08010fe3

08010708 <_cleanup_r>:
 8010708:	4901      	ldr	r1, [pc, #4]	; (8010710 <_cleanup_r+0x8>)
 801070a:	f000 b885 	b.w	8010818 <_fwalk_reent>
 801070e:	bf00      	nop
 8010710:	080112bd 	.word	0x080112bd

08010714 <__sfmoreglue>:
 8010714:	b570      	push	{r4, r5, r6, lr}
 8010716:	1e4a      	subs	r2, r1, #1
 8010718:	2568      	movs	r5, #104	; 0x68
 801071a:	4355      	muls	r5, r2
 801071c:	460e      	mov	r6, r1
 801071e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010722:	f000 f8ed 	bl	8010900 <_malloc_r>
 8010726:	4604      	mov	r4, r0
 8010728:	b140      	cbz	r0, 801073c <__sfmoreglue+0x28>
 801072a:	2100      	movs	r1, #0
 801072c:	e9c0 1600 	strd	r1, r6, [r0]
 8010730:	300c      	adds	r0, #12
 8010732:	60a0      	str	r0, [r4, #8]
 8010734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010738:	f7ff ff4e 	bl	80105d8 <memset>
 801073c:	4620      	mov	r0, r4
 801073e:	bd70      	pop	{r4, r5, r6, pc}

08010740 <__sinit>:
 8010740:	6983      	ldr	r3, [r0, #24]
 8010742:	b510      	push	{r4, lr}
 8010744:	4604      	mov	r4, r0
 8010746:	bb33      	cbnz	r3, 8010796 <__sinit+0x56>
 8010748:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801074c:	6503      	str	r3, [r0, #80]	; 0x50
 801074e:	4b12      	ldr	r3, [pc, #72]	; (8010798 <__sinit+0x58>)
 8010750:	4a12      	ldr	r2, [pc, #72]	; (801079c <__sinit+0x5c>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	6282      	str	r2, [r0, #40]	; 0x28
 8010756:	4298      	cmp	r0, r3
 8010758:	bf04      	itt	eq
 801075a:	2301      	moveq	r3, #1
 801075c:	6183      	streq	r3, [r0, #24]
 801075e:	f000 f81f 	bl	80107a0 <__sfp>
 8010762:	6060      	str	r0, [r4, #4]
 8010764:	4620      	mov	r0, r4
 8010766:	f000 f81b 	bl	80107a0 <__sfp>
 801076a:	60a0      	str	r0, [r4, #8]
 801076c:	4620      	mov	r0, r4
 801076e:	f000 f817 	bl	80107a0 <__sfp>
 8010772:	2200      	movs	r2, #0
 8010774:	60e0      	str	r0, [r4, #12]
 8010776:	2104      	movs	r1, #4
 8010778:	6860      	ldr	r0, [r4, #4]
 801077a:	f7ff ffa1 	bl	80106c0 <std>
 801077e:	2201      	movs	r2, #1
 8010780:	2109      	movs	r1, #9
 8010782:	68a0      	ldr	r0, [r4, #8]
 8010784:	f7ff ff9c 	bl	80106c0 <std>
 8010788:	2202      	movs	r2, #2
 801078a:	2112      	movs	r1, #18
 801078c:	68e0      	ldr	r0, [r4, #12]
 801078e:	f7ff ff97 	bl	80106c0 <std>
 8010792:	2301      	movs	r3, #1
 8010794:	61a3      	str	r3, [r4, #24]
 8010796:	bd10      	pop	{r4, pc}
 8010798:	080143b0 	.word	0x080143b0
 801079c:	08010709 	.word	0x08010709

080107a0 <__sfp>:
 80107a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a2:	4b1b      	ldr	r3, [pc, #108]	; (8010810 <__sfp+0x70>)
 80107a4:	681e      	ldr	r6, [r3, #0]
 80107a6:	69b3      	ldr	r3, [r6, #24]
 80107a8:	4607      	mov	r7, r0
 80107aa:	b913      	cbnz	r3, 80107b2 <__sfp+0x12>
 80107ac:	4630      	mov	r0, r6
 80107ae:	f7ff ffc7 	bl	8010740 <__sinit>
 80107b2:	3648      	adds	r6, #72	; 0x48
 80107b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80107b8:	3b01      	subs	r3, #1
 80107ba:	d503      	bpl.n	80107c4 <__sfp+0x24>
 80107bc:	6833      	ldr	r3, [r6, #0]
 80107be:	b133      	cbz	r3, 80107ce <__sfp+0x2e>
 80107c0:	6836      	ldr	r6, [r6, #0]
 80107c2:	e7f7      	b.n	80107b4 <__sfp+0x14>
 80107c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80107c8:	b16d      	cbz	r5, 80107e6 <__sfp+0x46>
 80107ca:	3468      	adds	r4, #104	; 0x68
 80107cc:	e7f4      	b.n	80107b8 <__sfp+0x18>
 80107ce:	2104      	movs	r1, #4
 80107d0:	4638      	mov	r0, r7
 80107d2:	f7ff ff9f 	bl	8010714 <__sfmoreglue>
 80107d6:	6030      	str	r0, [r6, #0]
 80107d8:	2800      	cmp	r0, #0
 80107da:	d1f1      	bne.n	80107c0 <__sfp+0x20>
 80107dc:	230c      	movs	r3, #12
 80107de:	603b      	str	r3, [r7, #0]
 80107e0:	4604      	mov	r4, r0
 80107e2:	4620      	mov	r0, r4
 80107e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107e6:	4b0b      	ldr	r3, [pc, #44]	; (8010814 <__sfp+0x74>)
 80107e8:	6665      	str	r5, [r4, #100]	; 0x64
 80107ea:	e9c4 5500 	strd	r5, r5, [r4]
 80107ee:	60a5      	str	r5, [r4, #8]
 80107f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80107f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80107f8:	2208      	movs	r2, #8
 80107fa:	4629      	mov	r1, r5
 80107fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010800:	f7ff feea 	bl	80105d8 <memset>
 8010804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801080c:	e7e9      	b.n	80107e2 <__sfp+0x42>
 801080e:	bf00      	nop
 8010810:	080143b0 	.word	0x080143b0
 8010814:	ffff0001 	.word	0xffff0001

08010818 <_fwalk_reent>:
 8010818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801081c:	4680      	mov	r8, r0
 801081e:	4689      	mov	r9, r1
 8010820:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010824:	2600      	movs	r6, #0
 8010826:	b914      	cbnz	r4, 801082e <_fwalk_reent+0x16>
 8010828:	4630      	mov	r0, r6
 801082a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801082e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010832:	3f01      	subs	r7, #1
 8010834:	d501      	bpl.n	801083a <_fwalk_reent+0x22>
 8010836:	6824      	ldr	r4, [r4, #0]
 8010838:	e7f5      	b.n	8010826 <_fwalk_reent+0xe>
 801083a:	89ab      	ldrh	r3, [r5, #12]
 801083c:	2b01      	cmp	r3, #1
 801083e:	d907      	bls.n	8010850 <_fwalk_reent+0x38>
 8010840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010844:	3301      	adds	r3, #1
 8010846:	d003      	beq.n	8010850 <_fwalk_reent+0x38>
 8010848:	4629      	mov	r1, r5
 801084a:	4640      	mov	r0, r8
 801084c:	47c8      	blx	r9
 801084e:	4306      	orrs	r6, r0
 8010850:	3568      	adds	r5, #104	; 0x68
 8010852:	e7ee      	b.n	8010832 <_fwalk_reent+0x1a>

08010854 <malloc>:
 8010854:	4b02      	ldr	r3, [pc, #8]	; (8010860 <malloc+0xc>)
 8010856:	4601      	mov	r1, r0
 8010858:	6818      	ldr	r0, [r3, #0]
 801085a:	f000 b851 	b.w	8010900 <_malloc_r>
 801085e:	bf00      	nop
 8010860:	20000014 	.word	0x20000014

08010864 <_free_r>:
 8010864:	b538      	push	{r3, r4, r5, lr}
 8010866:	4605      	mov	r5, r0
 8010868:	2900      	cmp	r1, #0
 801086a:	d045      	beq.n	80108f8 <_free_r+0x94>
 801086c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010870:	1f0c      	subs	r4, r1, #4
 8010872:	2b00      	cmp	r3, #0
 8010874:	bfb8      	it	lt
 8010876:	18e4      	addlt	r4, r4, r3
 8010878:	f000 fdc0 	bl	80113fc <__malloc_lock>
 801087c:	4a1f      	ldr	r2, [pc, #124]	; (80108fc <_free_r+0x98>)
 801087e:	6813      	ldr	r3, [r2, #0]
 8010880:	4610      	mov	r0, r2
 8010882:	b933      	cbnz	r3, 8010892 <_free_r+0x2e>
 8010884:	6063      	str	r3, [r4, #4]
 8010886:	6014      	str	r4, [r2, #0]
 8010888:	4628      	mov	r0, r5
 801088a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801088e:	f000 bdb6 	b.w	80113fe <__malloc_unlock>
 8010892:	42a3      	cmp	r3, r4
 8010894:	d90c      	bls.n	80108b0 <_free_r+0x4c>
 8010896:	6821      	ldr	r1, [r4, #0]
 8010898:	1862      	adds	r2, r4, r1
 801089a:	4293      	cmp	r3, r2
 801089c:	bf04      	itt	eq
 801089e:	681a      	ldreq	r2, [r3, #0]
 80108a0:	685b      	ldreq	r3, [r3, #4]
 80108a2:	6063      	str	r3, [r4, #4]
 80108a4:	bf04      	itt	eq
 80108a6:	1852      	addeq	r2, r2, r1
 80108a8:	6022      	streq	r2, [r4, #0]
 80108aa:	6004      	str	r4, [r0, #0]
 80108ac:	e7ec      	b.n	8010888 <_free_r+0x24>
 80108ae:	4613      	mov	r3, r2
 80108b0:	685a      	ldr	r2, [r3, #4]
 80108b2:	b10a      	cbz	r2, 80108b8 <_free_r+0x54>
 80108b4:	42a2      	cmp	r2, r4
 80108b6:	d9fa      	bls.n	80108ae <_free_r+0x4a>
 80108b8:	6819      	ldr	r1, [r3, #0]
 80108ba:	1858      	adds	r0, r3, r1
 80108bc:	42a0      	cmp	r0, r4
 80108be:	d10b      	bne.n	80108d8 <_free_r+0x74>
 80108c0:	6820      	ldr	r0, [r4, #0]
 80108c2:	4401      	add	r1, r0
 80108c4:	1858      	adds	r0, r3, r1
 80108c6:	4282      	cmp	r2, r0
 80108c8:	6019      	str	r1, [r3, #0]
 80108ca:	d1dd      	bne.n	8010888 <_free_r+0x24>
 80108cc:	6810      	ldr	r0, [r2, #0]
 80108ce:	6852      	ldr	r2, [r2, #4]
 80108d0:	605a      	str	r2, [r3, #4]
 80108d2:	4401      	add	r1, r0
 80108d4:	6019      	str	r1, [r3, #0]
 80108d6:	e7d7      	b.n	8010888 <_free_r+0x24>
 80108d8:	d902      	bls.n	80108e0 <_free_r+0x7c>
 80108da:	230c      	movs	r3, #12
 80108dc:	602b      	str	r3, [r5, #0]
 80108de:	e7d3      	b.n	8010888 <_free_r+0x24>
 80108e0:	6820      	ldr	r0, [r4, #0]
 80108e2:	1821      	adds	r1, r4, r0
 80108e4:	428a      	cmp	r2, r1
 80108e6:	bf04      	itt	eq
 80108e8:	6811      	ldreq	r1, [r2, #0]
 80108ea:	6852      	ldreq	r2, [r2, #4]
 80108ec:	6062      	str	r2, [r4, #4]
 80108ee:	bf04      	itt	eq
 80108f0:	1809      	addeq	r1, r1, r0
 80108f2:	6021      	streq	r1, [r4, #0]
 80108f4:	605c      	str	r4, [r3, #4]
 80108f6:	e7c7      	b.n	8010888 <_free_r+0x24>
 80108f8:	bd38      	pop	{r3, r4, r5, pc}
 80108fa:	bf00      	nop
 80108fc:	20000648 	.word	0x20000648

08010900 <_malloc_r>:
 8010900:	b570      	push	{r4, r5, r6, lr}
 8010902:	1ccd      	adds	r5, r1, #3
 8010904:	f025 0503 	bic.w	r5, r5, #3
 8010908:	3508      	adds	r5, #8
 801090a:	2d0c      	cmp	r5, #12
 801090c:	bf38      	it	cc
 801090e:	250c      	movcc	r5, #12
 8010910:	2d00      	cmp	r5, #0
 8010912:	4606      	mov	r6, r0
 8010914:	db01      	blt.n	801091a <_malloc_r+0x1a>
 8010916:	42a9      	cmp	r1, r5
 8010918:	d903      	bls.n	8010922 <_malloc_r+0x22>
 801091a:	230c      	movs	r3, #12
 801091c:	6033      	str	r3, [r6, #0]
 801091e:	2000      	movs	r0, #0
 8010920:	bd70      	pop	{r4, r5, r6, pc}
 8010922:	f000 fd6b 	bl	80113fc <__malloc_lock>
 8010926:	4a21      	ldr	r2, [pc, #132]	; (80109ac <_malloc_r+0xac>)
 8010928:	6814      	ldr	r4, [r2, #0]
 801092a:	4621      	mov	r1, r4
 801092c:	b991      	cbnz	r1, 8010954 <_malloc_r+0x54>
 801092e:	4c20      	ldr	r4, [pc, #128]	; (80109b0 <_malloc_r+0xb0>)
 8010930:	6823      	ldr	r3, [r4, #0]
 8010932:	b91b      	cbnz	r3, 801093c <_malloc_r+0x3c>
 8010934:	4630      	mov	r0, r6
 8010936:	f000 fb05 	bl	8010f44 <_sbrk_r>
 801093a:	6020      	str	r0, [r4, #0]
 801093c:	4629      	mov	r1, r5
 801093e:	4630      	mov	r0, r6
 8010940:	f000 fb00 	bl	8010f44 <_sbrk_r>
 8010944:	1c43      	adds	r3, r0, #1
 8010946:	d124      	bne.n	8010992 <_malloc_r+0x92>
 8010948:	230c      	movs	r3, #12
 801094a:	6033      	str	r3, [r6, #0]
 801094c:	4630      	mov	r0, r6
 801094e:	f000 fd56 	bl	80113fe <__malloc_unlock>
 8010952:	e7e4      	b.n	801091e <_malloc_r+0x1e>
 8010954:	680b      	ldr	r3, [r1, #0]
 8010956:	1b5b      	subs	r3, r3, r5
 8010958:	d418      	bmi.n	801098c <_malloc_r+0x8c>
 801095a:	2b0b      	cmp	r3, #11
 801095c:	d90f      	bls.n	801097e <_malloc_r+0x7e>
 801095e:	600b      	str	r3, [r1, #0]
 8010960:	50cd      	str	r5, [r1, r3]
 8010962:	18cc      	adds	r4, r1, r3
 8010964:	4630      	mov	r0, r6
 8010966:	f000 fd4a 	bl	80113fe <__malloc_unlock>
 801096a:	f104 000b 	add.w	r0, r4, #11
 801096e:	1d23      	adds	r3, r4, #4
 8010970:	f020 0007 	bic.w	r0, r0, #7
 8010974:	1ac3      	subs	r3, r0, r3
 8010976:	d0d3      	beq.n	8010920 <_malloc_r+0x20>
 8010978:	425a      	negs	r2, r3
 801097a:	50e2      	str	r2, [r4, r3]
 801097c:	e7d0      	b.n	8010920 <_malloc_r+0x20>
 801097e:	428c      	cmp	r4, r1
 8010980:	684b      	ldr	r3, [r1, #4]
 8010982:	bf16      	itet	ne
 8010984:	6063      	strne	r3, [r4, #4]
 8010986:	6013      	streq	r3, [r2, #0]
 8010988:	460c      	movne	r4, r1
 801098a:	e7eb      	b.n	8010964 <_malloc_r+0x64>
 801098c:	460c      	mov	r4, r1
 801098e:	6849      	ldr	r1, [r1, #4]
 8010990:	e7cc      	b.n	801092c <_malloc_r+0x2c>
 8010992:	1cc4      	adds	r4, r0, #3
 8010994:	f024 0403 	bic.w	r4, r4, #3
 8010998:	42a0      	cmp	r0, r4
 801099a:	d005      	beq.n	80109a8 <_malloc_r+0xa8>
 801099c:	1a21      	subs	r1, r4, r0
 801099e:	4630      	mov	r0, r6
 80109a0:	f000 fad0 	bl	8010f44 <_sbrk_r>
 80109a4:	3001      	adds	r0, #1
 80109a6:	d0cf      	beq.n	8010948 <_malloc_r+0x48>
 80109a8:	6025      	str	r5, [r4, #0]
 80109aa:	e7db      	b.n	8010964 <_malloc_r+0x64>
 80109ac:	20000648 	.word	0x20000648
 80109b0:	2000064c 	.word	0x2000064c

080109b4 <__sfputc_r>:
 80109b4:	6893      	ldr	r3, [r2, #8]
 80109b6:	3b01      	subs	r3, #1
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	b410      	push	{r4}
 80109bc:	6093      	str	r3, [r2, #8]
 80109be:	da08      	bge.n	80109d2 <__sfputc_r+0x1e>
 80109c0:	6994      	ldr	r4, [r2, #24]
 80109c2:	42a3      	cmp	r3, r4
 80109c4:	db01      	blt.n	80109ca <__sfputc_r+0x16>
 80109c6:	290a      	cmp	r1, #10
 80109c8:	d103      	bne.n	80109d2 <__sfputc_r+0x1e>
 80109ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109ce:	f000 bb0d 	b.w	8010fec <__swbuf_r>
 80109d2:	6813      	ldr	r3, [r2, #0]
 80109d4:	1c58      	adds	r0, r3, #1
 80109d6:	6010      	str	r0, [r2, #0]
 80109d8:	7019      	strb	r1, [r3, #0]
 80109da:	4608      	mov	r0, r1
 80109dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109e0:	4770      	bx	lr

080109e2 <__sfputs_r>:
 80109e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109e4:	4606      	mov	r6, r0
 80109e6:	460f      	mov	r7, r1
 80109e8:	4614      	mov	r4, r2
 80109ea:	18d5      	adds	r5, r2, r3
 80109ec:	42ac      	cmp	r4, r5
 80109ee:	d101      	bne.n	80109f4 <__sfputs_r+0x12>
 80109f0:	2000      	movs	r0, #0
 80109f2:	e007      	b.n	8010a04 <__sfputs_r+0x22>
 80109f4:	463a      	mov	r2, r7
 80109f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109fa:	4630      	mov	r0, r6
 80109fc:	f7ff ffda 	bl	80109b4 <__sfputc_r>
 8010a00:	1c43      	adds	r3, r0, #1
 8010a02:	d1f3      	bne.n	80109ec <__sfputs_r+0xa>
 8010a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a08 <_vfiprintf_r>:
 8010a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a0c:	460c      	mov	r4, r1
 8010a0e:	b09d      	sub	sp, #116	; 0x74
 8010a10:	4617      	mov	r7, r2
 8010a12:	461d      	mov	r5, r3
 8010a14:	4606      	mov	r6, r0
 8010a16:	b118      	cbz	r0, 8010a20 <_vfiprintf_r+0x18>
 8010a18:	6983      	ldr	r3, [r0, #24]
 8010a1a:	b90b      	cbnz	r3, 8010a20 <_vfiprintf_r+0x18>
 8010a1c:	f7ff fe90 	bl	8010740 <__sinit>
 8010a20:	4b7c      	ldr	r3, [pc, #496]	; (8010c14 <_vfiprintf_r+0x20c>)
 8010a22:	429c      	cmp	r4, r3
 8010a24:	d158      	bne.n	8010ad8 <_vfiprintf_r+0xd0>
 8010a26:	6874      	ldr	r4, [r6, #4]
 8010a28:	89a3      	ldrh	r3, [r4, #12]
 8010a2a:	0718      	lsls	r0, r3, #28
 8010a2c:	d55e      	bpl.n	8010aec <_vfiprintf_r+0xe4>
 8010a2e:	6923      	ldr	r3, [r4, #16]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d05b      	beq.n	8010aec <_vfiprintf_r+0xe4>
 8010a34:	2300      	movs	r3, #0
 8010a36:	9309      	str	r3, [sp, #36]	; 0x24
 8010a38:	2320      	movs	r3, #32
 8010a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a3e:	2330      	movs	r3, #48	; 0x30
 8010a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a44:	9503      	str	r5, [sp, #12]
 8010a46:	f04f 0b01 	mov.w	fp, #1
 8010a4a:	46b8      	mov	r8, r7
 8010a4c:	4645      	mov	r5, r8
 8010a4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010a52:	b10b      	cbz	r3, 8010a58 <_vfiprintf_r+0x50>
 8010a54:	2b25      	cmp	r3, #37	; 0x25
 8010a56:	d154      	bne.n	8010b02 <_vfiprintf_r+0xfa>
 8010a58:	ebb8 0a07 	subs.w	sl, r8, r7
 8010a5c:	d00b      	beq.n	8010a76 <_vfiprintf_r+0x6e>
 8010a5e:	4653      	mov	r3, sl
 8010a60:	463a      	mov	r2, r7
 8010a62:	4621      	mov	r1, r4
 8010a64:	4630      	mov	r0, r6
 8010a66:	f7ff ffbc 	bl	80109e2 <__sfputs_r>
 8010a6a:	3001      	adds	r0, #1
 8010a6c:	f000 80c2 	beq.w	8010bf4 <_vfiprintf_r+0x1ec>
 8010a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a72:	4453      	add	r3, sl
 8010a74:	9309      	str	r3, [sp, #36]	; 0x24
 8010a76:	f898 3000 	ldrb.w	r3, [r8]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	f000 80ba 	beq.w	8010bf4 <_vfiprintf_r+0x1ec>
 8010a80:	2300      	movs	r3, #0
 8010a82:	f04f 32ff 	mov.w	r2, #4294967295
 8010a86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a8a:	9304      	str	r3, [sp, #16]
 8010a8c:	9307      	str	r3, [sp, #28]
 8010a8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a92:	931a      	str	r3, [sp, #104]	; 0x68
 8010a94:	46a8      	mov	r8, r5
 8010a96:	2205      	movs	r2, #5
 8010a98:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010a9c:	485e      	ldr	r0, [pc, #376]	; (8010c18 <_vfiprintf_r+0x210>)
 8010a9e:	f7ef fbe7 	bl	8000270 <memchr>
 8010aa2:	9b04      	ldr	r3, [sp, #16]
 8010aa4:	bb78      	cbnz	r0, 8010b06 <_vfiprintf_r+0xfe>
 8010aa6:	06d9      	lsls	r1, r3, #27
 8010aa8:	bf44      	itt	mi
 8010aaa:	2220      	movmi	r2, #32
 8010aac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010ab0:	071a      	lsls	r2, r3, #28
 8010ab2:	bf44      	itt	mi
 8010ab4:	222b      	movmi	r2, #43	; 0x2b
 8010ab6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010aba:	782a      	ldrb	r2, [r5, #0]
 8010abc:	2a2a      	cmp	r2, #42	; 0x2a
 8010abe:	d02a      	beq.n	8010b16 <_vfiprintf_r+0x10e>
 8010ac0:	9a07      	ldr	r2, [sp, #28]
 8010ac2:	46a8      	mov	r8, r5
 8010ac4:	2000      	movs	r0, #0
 8010ac6:	250a      	movs	r5, #10
 8010ac8:	4641      	mov	r1, r8
 8010aca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ace:	3b30      	subs	r3, #48	; 0x30
 8010ad0:	2b09      	cmp	r3, #9
 8010ad2:	d969      	bls.n	8010ba8 <_vfiprintf_r+0x1a0>
 8010ad4:	b360      	cbz	r0, 8010b30 <_vfiprintf_r+0x128>
 8010ad6:	e024      	b.n	8010b22 <_vfiprintf_r+0x11a>
 8010ad8:	4b50      	ldr	r3, [pc, #320]	; (8010c1c <_vfiprintf_r+0x214>)
 8010ada:	429c      	cmp	r4, r3
 8010adc:	d101      	bne.n	8010ae2 <_vfiprintf_r+0xda>
 8010ade:	68b4      	ldr	r4, [r6, #8]
 8010ae0:	e7a2      	b.n	8010a28 <_vfiprintf_r+0x20>
 8010ae2:	4b4f      	ldr	r3, [pc, #316]	; (8010c20 <_vfiprintf_r+0x218>)
 8010ae4:	429c      	cmp	r4, r3
 8010ae6:	bf08      	it	eq
 8010ae8:	68f4      	ldreq	r4, [r6, #12]
 8010aea:	e79d      	b.n	8010a28 <_vfiprintf_r+0x20>
 8010aec:	4621      	mov	r1, r4
 8010aee:	4630      	mov	r0, r6
 8010af0:	f000 fae0 	bl	80110b4 <__swsetup_r>
 8010af4:	2800      	cmp	r0, #0
 8010af6:	d09d      	beq.n	8010a34 <_vfiprintf_r+0x2c>
 8010af8:	f04f 30ff 	mov.w	r0, #4294967295
 8010afc:	b01d      	add	sp, #116	; 0x74
 8010afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b02:	46a8      	mov	r8, r5
 8010b04:	e7a2      	b.n	8010a4c <_vfiprintf_r+0x44>
 8010b06:	4a44      	ldr	r2, [pc, #272]	; (8010c18 <_vfiprintf_r+0x210>)
 8010b08:	1a80      	subs	r0, r0, r2
 8010b0a:	fa0b f000 	lsl.w	r0, fp, r0
 8010b0e:	4318      	orrs	r0, r3
 8010b10:	9004      	str	r0, [sp, #16]
 8010b12:	4645      	mov	r5, r8
 8010b14:	e7be      	b.n	8010a94 <_vfiprintf_r+0x8c>
 8010b16:	9a03      	ldr	r2, [sp, #12]
 8010b18:	1d11      	adds	r1, r2, #4
 8010b1a:	6812      	ldr	r2, [r2, #0]
 8010b1c:	9103      	str	r1, [sp, #12]
 8010b1e:	2a00      	cmp	r2, #0
 8010b20:	db01      	blt.n	8010b26 <_vfiprintf_r+0x11e>
 8010b22:	9207      	str	r2, [sp, #28]
 8010b24:	e004      	b.n	8010b30 <_vfiprintf_r+0x128>
 8010b26:	4252      	negs	r2, r2
 8010b28:	f043 0302 	orr.w	r3, r3, #2
 8010b2c:	9207      	str	r2, [sp, #28]
 8010b2e:	9304      	str	r3, [sp, #16]
 8010b30:	f898 3000 	ldrb.w	r3, [r8]
 8010b34:	2b2e      	cmp	r3, #46	; 0x2e
 8010b36:	d10e      	bne.n	8010b56 <_vfiprintf_r+0x14e>
 8010b38:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8010b3e:	d138      	bne.n	8010bb2 <_vfiprintf_r+0x1aa>
 8010b40:	9b03      	ldr	r3, [sp, #12]
 8010b42:	1d1a      	adds	r2, r3, #4
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	9203      	str	r2, [sp, #12]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	bfb8      	it	lt
 8010b4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b50:	f108 0802 	add.w	r8, r8, #2
 8010b54:	9305      	str	r3, [sp, #20]
 8010b56:	4d33      	ldr	r5, [pc, #204]	; (8010c24 <_vfiprintf_r+0x21c>)
 8010b58:	f898 1000 	ldrb.w	r1, [r8]
 8010b5c:	2203      	movs	r2, #3
 8010b5e:	4628      	mov	r0, r5
 8010b60:	f7ef fb86 	bl	8000270 <memchr>
 8010b64:	b140      	cbz	r0, 8010b78 <_vfiprintf_r+0x170>
 8010b66:	2340      	movs	r3, #64	; 0x40
 8010b68:	1b40      	subs	r0, r0, r5
 8010b6a:	fa03 f000 	lsl.w	r0, r3, r0
 8010b6e:	9b04      	ldr	r3, [sp, #16]
 8010b70:	4303      	orrs	r3, r0
 8010b72:	f108 0801 	add.w	r8, r8, #1
 8010b76:	9304      	str	r3, [sp, #16]
 8010b78:	f898 1000 	ldrb.w	r1, [r8]
 8010b7c:	482a      	ldr	r0, [pc, #168]	; (8010c28 <_vfiprintf_r+0x220>)
 8010b7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b82:	2206      	movs	r2, #6
 8010b84:	f108 0701 	add.w	r7, r8, #1
 8010b88:	f7ef fb72 	bl	8000270 <memchr>
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	d037      	beq.n	8010c00 <_vfiprintf_r+0x1f8>
 8010b90:	4b26      	ldr	r3, [pc, #152]	; (8010c2c <_vfiprintf_r+0x224>)
 8010b92:	bb1b      	cbnz	r3, 8010bdc <_vfiprintf_r+0x1d4>
 8010b94:	9b03      	ldr	r3, [sp, #12]
 8010b96:	3307      	adds	r3, #7
 8010b98:	f023 0307 	bic.w	r3, r3, #7
 8010b9c:	3308      	adds	r3, #8
 8010b9e:	9303      	str	r3, [sp, #12]
 8010ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ba2:	444b      	add	r3, r9
 8010ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8010ba6:	e750      	b.n	8010a4a <_vfiprintf_r+0x42>
 8010ba8:	fb05 3202 	mla	r2, r5, r2, r3
 8010bac:	2001      	movs	r0, #1
 8010bae:	4688      	mov	r8, r1
 8010bb0:	e78a      	b.n	8010ac8 <_vfiprintf_r+0xc0>
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	f108 0801 	add.w	r8, r8, #1
 8010bb8:	9305      	str	r3, [sp, #20]
 8010bba:	4619      	mov	r1, r3
 8010bbc:	250a      	movs	r5, #10
 8010bbe:	4640      	mov	r0, r8
 8010bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bc4:	3a30      	subs	r2, #48	; 0x30
 8010bc6:	2a09      	cmp	r2, #9
 8010bc8:	d903      	bls.n	8010bd2 <_vfiprintf_r+0x1ca>
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d0c3      	beq.n	8010b56 <_vfiprintf_r+0x14e>
 8010bce:	9105      	str	r1, [sp, #20]
 8010bd0:	e7c1      	b.n	8010b56 <_vfiprintf_r+0x14e>
 8010bd2:	fb05 2101 	mla	r1, r5, r1, r2
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	4680      	mov	r8, r0
 8010bda:	e7f0      	b.n	8010bbe <_vfiprintf_r+0x1b6>
 8010bdc:	ab03      	add	r3, sp, #12
 8010bde:	9300      	str	r3, [sp, #0]
 8010be0:	4622      	mov	r2, r4
 8010be2:	4b13      	ldr	r3, [pc, #76]	; (8010c30 <_vfiprintf_r+0x228>)
 8010be4:	a904      	add	r1, sp, #16
 8010be6:	4630      	mov	r0, r6
 8010be8:	f3af 8000 	nop.w
 8010bec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010bf0:	4681      	mov	r9, r0
 8010bf2:	d1d5      	bne.n	8010ba0 <_vfiprintf_r+0x198>
 8010bf4:	89a3      	ldrh	r3, [r4, #12]
 8010bf6:	065b      	lsls	r3, r3, #25
 8010bf8:	f53f af7e 	bmi.w	8010af8 <_vfiprintf_r+0xf0>
 8010bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bfe:	e77d      	b.n	8010afc <_vfiprintf_r+0xf4>
 8010c00:	ab03      	add	r3, sp, #12
 8010c02:	9300      	str	r3, [sp, #0]
 8010c04:	4622      	mov	r2, r4
 8010c06:	4b0a      	ldr	r3, [pc, #40]	; (8010c30 <_vfiprintf_r+0x228>)
 8010c08:	a904      	add	r1, sp, #16
 8010c0a:	4630      	mov	r0, r6
 8010c0c:	f000 f888 	bl	8010d20 <_printf_i>
 8010c10:	e7ec      	b.n	8010bec <_vfiprintf_r+0x1e4>
 8010c12:	bf00      	nop
 8010c14:	080143d4 	.word	0x080143d4
 8010c18:	08014414 	.word	0x08014414
 8010c1c:	080143f4 	.word	0x080143f4
 8010c20:	080143b4 	.word	0x080143b4
 8010c24:	0801441a 	.word	0x0801441a
 8010c28:	0801441e 	.word	0x0801441e
 8010c2c:	00000000 	.word	0x00000000
 8010c30:	080109e3 	.word	0x080109e3

08010c34 <_printf_common>:
 8010c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c38:	4691      	mov	r9, r2
 8010c3a:	461f      	mov	r7, r3
 8010c3c:	688a      	ldr	r2, [r1, #8]
 8010c3e:	690b      	ldr	r3, [r1, #16]
 8010c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c44:	4293      	cmp	r3, r2
 8010c46:	bfb8      	it	lt
 8010c48:	4613      	movlt	r3, r2
 8010c4a:	f8c9 3000 	str.w	r3, [r9]
 8010c4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c52:	4606      	mov	r6, r0
 8010c54:	460c      	mov	r4, r1
 8010c56:	b112      	cbz	r2, 8010c5e <_printf_common+0x2a>
 8010c58:	3301      	adds	r3, #1
 8010c5a:	f8c9 3000 	str.w	r3, [r9]
 8010c5e:	6823      	ldr	r3, [r4, #0]
 8010c60:	0699      	lsls	r1, r3, #26
 8010c62:	bf42      	ittt	mi
 8010c64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010c68:	3302      	addmi	r3, #2
 8010c6a:	f8c9 3000 	strmi.w	r3, [r9]
 8010c6e:	6825      	ldr	r5, [r4, #0]
 8010c70:	f015 0506 	ands.w	r5, r5, #6
 8010c74:	d107      	bne.n	8010c86 <_printf_common+0x52>
 8010c76:	f104 0a19 	add.w	sl, r4, #25
 8010c7a:	68e3      	ldr	r3, [r4, #12]
 8010c7c:	f8d9 2000 	ldr.w	r2, [r9]
 8010c80:	1a9b      	subs	r3, r3, r2
 8010c82:	42ab      	cmp	r3, r5
 8010c84:	dc28      	bgt.n	8010cd8 <_printf_common+0xa4>
 8010c86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010c8a:	6822      	ldr	r2, [r4, #0]
 8010c8c:	3300      	adds	r3, #0
 8010c8e:	bf18      	it	ne
 8010c90:	2301      	movne	r3, #1
 8010c92:	0692      	lsls	r2, r2, #26
 8010c94:	d42d      	bmi.n	8010cf2 <_printf_common+0xbe>
 8010c96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c9a:	4639      	mov	r1, r7
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	47c0      	blx	r8
 8010ca0:	3001      	adds	r0, #1
 8010ca2:	d020      	beq.n	8010ce6 <_printf_common+0xb2>
 8010ca4:	6823      	ldr	r3, [r4, #0]
 8010ca6:	68e5      	ldr	r5, [r4, #12]
 8010ca8:	f8d9 2000 	ldr.w	r2, [r9]
 8010cac:	f003 0306 	and.w	r3, r3, #6
 8010cb0:	2b04      	cmp	r3, #4
 8010cb2:	bf08      	it	eq
 8010cb4:	1aad      	subeq	r5, r5, r2
 8010cb6:	68a3      	ldr	r3, [r4, #8]
 8010cb8:	6922      	ldr	r2, [r4, #16]
 8010cba:	bf0c      	ite	eq
 8010cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cc0:	2500      	movne	r5, #0
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	bfc4      	itt	gt
 8010cc6:	1a9b      	subgt	r3, r3, r2
 8010cc8:	18ed      	addgt	r5, r5, r3
 8010cca:	f04f 0900 	mov.w	r9, #0
 8010cce:	341a      	adds	r4, #26
 8010cd0:	454d      	cmp	r5, r9
 8010cd2:	d11a      	bne.n	8010d0a <_printf_common+0xd6>
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	e008      	b.n	8010cea <_printf_common+0xb6>
 8010cd8:	2301      	movs	r3, #1
 8010cda:	4652      	mov	r2, sl
 8010cdc:	4639      	mov	r1, r7
 8010cde:	4630      	mov	r0, r6
 8010ce0:	47c0      	blx	r8
 8010ce2:	3001      	adds	r0, #1
 8010ce4:	d103      	bne.n	8010cee <_printf_common+0xba>
 8010ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8010cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cee:	3501      	adds	r5, #1
 8010cf0:	e7c3      	b.n	8010c7a <_printf_common+0x46>
 8010cf2:	18e1      	adds	r1, r4, r3
 8010cf4:	1c5a      	adds	r2, r3, #1
 8010cf6:	2030      	movs	r0, #48	; 0x30
 8010cf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cfc:	4422      	add	r2, r4
 8010cfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d06:	3302      	adds	r3, #2
 8010d08:	e7c5      	b.n	8010c96 <_printf_common+0x62>
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	4622      	mov	r2, r4
 8010d0e:	4639      	mov	r1, r7
 8010d10:	4630      	mov	r0, r6
 8010d12:	47c0      	blx	r8
 8010d14:	3001      	adds	r0, #1
 8010d16:	d0e6      	beq.n	8010ce6 <_printf_common+0xb2>
 8010d18:	f109 0901 	add.w	r9, r9, #1
 8010d1c:	e7d8      	b.n	8010cd0 <_printf_common+0x9c>
	...

08010d20 <_printf_i>:
 8010d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010d28:	460c      	mov	r4, r1
 8010d2a:	7e09      	ldrb	r1, [r1, #24]
 8010d2c:	b085      	sub	sp, #20
 8010d2e:	296e      	cmp	r1, #110	; 0x6e
 8010d30:	4617      	mov	r7, r2
 8010d32:	4606      	mov	r6, r0
 8010d34:	4698      	mov	r8, r3
 8010d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d38:	f000 80b3 	beq.w	8010ea2 <_printf_i+0x182>
 8010d3c:	d822      	bhi.n	8010d84 <_printf_i+0x64>
 8010d3e:	2963      	cmp	r1, #99	; 0x63
 8010d40:	d036      	beq.n	8010db0 <_printf_i+0x90>
 8010d42:	d80a      	bhi.n	8010d5a <_printf_i+0x3a>
 8010d44:	2900      	cmp	r1, #0
 8010d46:	f000 80b9 	beq.w	8010ebc <_printf_i+0x19c>
 8010d4a:	2958      	cmp	r1, #88	; 0x58
 8010d4c:	f000 8083 	beq.w	8010e56 <_printf_i+0x136>
 8010d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010d58:	e032      	b.n	8010dc0 <_printf_i+0xa0>
 8010d5a:	2964      	cmp	r1, #100	; 0x64
 8010d5c:	d001      	beq.n	8010d62 <_printf_i+0x42>
 8010d5e:	2969      	cmp	r1, #105	; 0x69
 8010d60:	d1f6      	bne.n	8010d50 <_printf_i+0x30>
 8010d62:	6820      	ldr	r0, [r4, #0]
 8010d64:	6813      	ldr	r3, [r2, #0]
 8010d66:	0605      	lsls	r5, r0, #24
 8010d68:	f103 0104 	add.w	r1, r3, #4
 8010d6c:	d52a      	bpl.n	8010dc4 <_printf_i+0xa4>
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	6011      	str	r1, [r2, #0]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	da03      	bge.n	8010d7e <_printf_i+0x5e>
 8010d76:	222d      	movs	r2, #45	; 0x2d
 8010d78:	425b      	negs	r3, r3
 8010d7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010d7e:	486f      	ldr	r0, [pc, #444]	; (8010f3c <_printf_i+0x21c>)
 8010d80:	220a      	movs	r2, #10
 8010d82:	e039      	b.n	8010df8 <_printf_i+0xd8>
 8010d84:	2973      	cmp	r1, #115	; 0x73
 8010d86:	f000 809d 	beq.w	8010ec4 <_printf_i+0x1a4>
 8010d8a:	d808      	bhi.n	8010d9e <_printf_i+0x7e>
 8010d8c:	296f      	cmp	r1, #111	; 0x6f
 8010d8e:	d020      	beq.n	8010dd2 <_printf_i+0xb2>
 8010d90:	2970      	cmp	r1, #112	; 0x70
 8010d92:	d1dd      	bne.n	8010d50 <_printf_i+0x30>
 8010d94:	6823      	ldr	r3, [r4, #0]
 8010d96:	f043 0320 	orr.w	r3, r3, #32
 8010d9a:	6023      	str	r3, [r4, #0]
 8010d9c:	e003      	b.n	8010da6 <_printf_i+0x86>
 8010d9e:	2975      	cmp	r1, #117	; 0x75
 8010da0:	d017      	beq.n	8010dd2 <_printf_i+0xb2>
 8010da2:	2978      	cmp	r1, #120	; 0x78
 8010da4:	d1d4      	bne.n	8010d50 <_printf_i+0x30>
 8010da6:	2378      	movs	r3, #120	; 0x78
 8010da8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010dac:	4864      	ldr	r0, [pc, #400]	; (8010f40 <_printf_i+0x220>)
 8010dae:	e055      	b.n	8010e5c <_printf_i+0x13c>
 8010db0:	6813      	ldr	r3, [r2, #0]
 8010db2:	1d19      	adds	r1, r3, #4
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	6011      	str	r1, [r2, #0]
 8010db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	e08c      	b.n	8010ede <_printf_i+0x1be>
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	6011      	str	r1, [r2, #0]
 8010dc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010dcc:	bf18      	it	ne
 8010dce:	b21b      	sxthne	r3, r3
 8010dd0:	e7cf      	b.n	8010d72 <_printf_i+0x52>
 8010dd2:	6813      	ldr	r3, [r2, #0]
 8010dd4:	6825      	ldr	r5, [r4, #0]
 8010dd6:	1d18      	adds	r0, r3, #4
 8010dd8:	6010      	str	r0, [r2, #0]
 8010dda:	0628      	lsls	r0, r5, #24
 8010ddc:	d501      	bpl.n	8010de2 <_printf_i+0xc2>
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	e002      	b.n	8010de8 <_printf_i+0xc8>
 8010de2:	0668      	lsls	r0, r5, #25
 8010de4:	d5fb      	bpl.n	8010dde <_printf_i+0xbe>
 8010de6:	881b      	ldrh	r3, [r3, #0]
 8010de8:	4854      	ldr	r0, [pc, #336]	; (8010f3c <_printf_i+0x21c>)
 8010dea:	296f      	cmp	r1, #111	; 0x6f
 8010dec:	bf14      	ite	ne
 8010dee:	220a      	movne	r2, #10
 8010df0:	2208      	moveq	r2, #8
 8010df2:	2100      	movs	r1, #0
 8010df4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010df8:	6865      	ldr	r5, [r4, #4]
 8010dfa:	60a5      	str	r5, [r4, #8]
 8010dfc:	2d00      	cmp	r5, #0
 8010dfe:	f2c0 8095 	blt.w	8010f2c <_printf_i+0x20c>
 8010e02:	6821      	ldr	r1, [r4, #0]
 8010e04:	f021 0104 	bic.w	r1, r1, #4
 8010e08:	6021      	str	r1, [r4, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d13d      	bne.n	8010e8a <_printf_i+0x16a>
 8010e0e:	2d00      	cmp	r5, #0
 8010e10:	f040 808e 	bne.w	8010f30 <_printf_i+0x210>
 8010e14:	4665      	mov	r5, ip
 8010e16:	2a08      	cmp	r2, #8
 8010e18:	d10b      	bne.n	8010e32 <_printf_i+0x112>
 8010e1a:	6823      	ldr	r3, [r4, #0]
 8010e1c:	07db      	lsls	r3, r3, #31
 8010e1e:	d508      	bpl.n	8010e32 <_printf_i+0x112>
 8010e20:	6923      	ldr	r3, [r4, #16]
 8010e22:	6862      	ldr	r2, [r4, #4]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	bfde      	ittt	le
 8010e28:	2330      	movle	r3, #48	; 0x30
 8010e2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010e2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010e32:	ebac 0305 	sub.w	r3, ip, r5
 8010e36:	6123      	str	r3, [r4, #16]
 8010e38:	f8cd 8000 	str.w	r8, [sp]
 8010e3c:	463b      	mov	r3, r7
 8010e3e:	aa03      	add	r2, sp, #12
 8010e40:	4621      	mov	r1, r4
 8010e42:	4630      	mov	r0, r6
 8010e44:	f7ff fef6 	bl	8010c34 <_printf_common>
 8010e48:	3001      	adds	r0, #1
 8010e4a:	d14d      	bne.n	8010ee8 <_printf_i+0x1c8>
 8010e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e50:	b005      	add	sp, #20
 8010e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e56:	4839      	ldr	r0, [pc, #228]	; (8010f3c <_printf_i+0x21c>)
 8010e58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010e5c:	6813      	ldr	r3, [r2, #0]
 8010e5e:	6821      	ldr	r1, [r4, #0]
 8010e60:	1d1d      	adds	r5, r3, #4
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	6015      	str	r5, [r2, #0]
 8010e66:	060a      	lsls	r2, r1, #24
 8010e68:	d50b      	bpl.n	8010e82 <_printf_i+0x162>
 8010e6a:	07ca      	lsls	r2, r1, #31
 8010e6c:	bf44      	itt	mi
 8010e6e:	f041 0120 	orrmi.w	r1, r1, #32
 8010e72:	6021      	strmi	r1, [r4, #0]
 8010e74:	b91b      	cbnz	r3, 8010e7e <_printf_i+0x15e>
 8010e76:	6822      	ldr	r2, [r4, #0]
 8010e78:	f022 0220 	bic.w	r2, r2, #32
 8010e7c:	6022      	str	r2, [r4, #0]
 8010e7e:	2210      	movs	r2, #16
 8010e80:	e7b7      	b.n	8010df2 <_printf_i+0xd2>
 8010e82:	064d      	lsls	r5, r1, #25
 8010e84:	bf48      	it	mi
 8010e86:	b29b      	uxthmi	r3, r3
 8010e88:	e7ef      	b.n	8010e6a <_printf_i+0x14a>
 8010e8a:	4665      	mov	r5, ip
 8010e8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e90:	fb02 3311 	mls	r3, r2, r1, r3
 8010e94:	5cc3      	ldrb	r3, [r0, r3]
 8010e96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	2900      	cmp	r1, #0
 8010e9e:	d1f5      	bne.n	8010e8c <_printf_i+0x16c>
 8010ea0:	e7b9      	b.n	8010e16 <_printf_i+0xf6>
 8010ea2:	6813      	ldr	r3, [r2, #0]
 8010ea4:	6825      	ldr	r5, [r4, #0]
 8010ea6:	6961      	ldr	r1, [r4, #20]
 8010ea8:	1d18      	adds	r0, r3, #4
 8010eaa:	6010      	str	r0, [r2, #0]
 8010eac:	0628      	lsls	r0, r5, #24
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	d501      	bpl.n	8010eb6 <_printf_i+0x196>
 8010eb2:	6019      	str	r1, [r3, #0]
 8010eb4:	e002      	b.n	8010ebc <_printf_i+0x19c>
 8010eb6:	066a      	lsls	r2, r5, #25
 8010eb8:	d5fb      	bpl.n	8010eb2 <_printf_i+0x192>
 8010eba:	8019      	strh	r1, [r3, #0]
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	6123      	str	r3, [r4, #16]
 8010ec0:	4665      	mov	r5, ip
 8010ec2:	e7b9      	b.n	8010e38 <_printf_i+0x118>
 8010ec4:	6813      	ldr	r3, [r2, #0]
 8010ec6:	1d19      	adds	r1, r3, #4
 8010ec8:	6011      	str	r1, [r2, #0]
 8010eca:	681d      	ldr	r5, [r3, #0]
 8010ecc:	6862      	ldr	r2, [r4, #4]
 8010ece:	2100      	movs	r1, #0
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	f7ef f9cd 	bl	8000270 <memchr>
 8010ed6:	b108      	cbz	r0, 8010edc <_printf_i+0x1bc>
 8010ed8:	1b40      	subs	r0, r0, r5
 8010eda:	6060      	str	r0, [r4, #4]
 8010edc:	6863      	ldr	r3, [r4, #4]
 8010ede:	6123      	str	r3, [r4, #16]
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ee6:	e7a7      	b.n	8010e38 <_printf_i+0x118>
 8010ee8:	6923      	ldr	r3, [r4, #16]
 8010eea:	462a      	mov	r2, r5
 8010eec:	4639      	mov	r1, r7
 8010eee:	4630      	mov	r0, r6
 8010ef0:	47c0      	blx	r8
 8010ef2:	3001      	adds	r0, #1
 8010ef4:	d0aa      	beq.n	8010e4c <_printf_i+0x12c>
 8010ef6:	6823      	ldr	r3, [r4, #0]
 8010ef8:	079b      	lsls	r3, r3, #30
 8010efa:	d413      	bmi.n	8010f24 <_printf_i+0x204>
 8010efc:	68e0      	ldr	r0, [r4, #12]
 8010efe:	9b03      	ldr	r3, [sp, #12]
 8010f00:	4298      	cmp	r0, r3
 8010f02:	bfb8      	it	lt
 8010f04:	4618      	movlt	r0, r3
 8010f06:	e7a3      	b.n	8010e50 <_printf_i+0x130>
 8010f08:	2301      	movs	r3, #1
 8010f0a:	464a      	mov	r2, r9
 8010f0c:	4639      	mov	r1, r7
 8010f0e:	4630      	mov	r0, r6
 8010f10:	47c0      	blx	r8
 8010f12:	3001      	adds	r0, #1
 8010f14:	d09a      	beq.n	8010e4c <_printf_i+0x12c>
 8010f16:	3501      	adds	r5, #1
 8010f18:	68e3      	ldr	r3, [r4, #12]
 8010f1a:	9a03      	ldr	r2, [sp, #12]
 8010f1c:	1a9b      	subs	r3, r3, r2
 8010f1e:	42ab      	cmp	r3, r5
 8010f20:	dcf2      	bgt.n	8010f08 <_printf_i+0x1e8>
 8010f22:	e7eb      	b.n	8010efc <_printf_i+0x1dc>
 8010f24:	2500      	movs	r5, #0
 8010f26:	f104 0919 	add.w	r9, r4, #25
 8010f2a:	e7f5      	b.n	8010f18 <_printf_i+0x1f8>
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d1ac      	bne.n	8010e8a <_printf_i+0x16a>
 8010f30:	7803      	ldrb	r3, [r0, #0]
 8010f32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f3a:	e76c      	b.n	8010e16 <_printf_i+0xf6>
 8010f3c:	08014425 	.word	0x08014425
 8010f40:	08014436 	.word	0x08014436

08010f44 <_sbrk_r>:
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	4c06      	ldr	r4, [pc, #24]	; (8010f60 <_sbrk_r+0x1c>)
 8010f48:	2300      	movs	r3, #0
 8010f4a:	4605      	mov	r5, r0
 8010f4c:	4608      	mov	r0, r1
 8010f4e:	6023      	str	r3, [r4, #0]
 8010f50:	f7ef fe70 	bl	8000c34 <_sbrk>
 8010f54:	1c43      	adds	r3, r0, #1
 8010f56:	d102      	bne.n	8010f5e <_sbrk_r+0x1a>
 8010f58:	6823      	ldr	r3, [r4, #0]
 8010f5a:	b103      	cbz	r3, 8010f5e <_sbrk_r+0x1a>
 8010f5c:	602b      	str	r3, [r5, #0]
 8010f5e:	bd38      	pop	{r3, r4, r5, pc}
 8010f60:	2000716c 	.word	0x2000716c

08010f64 <__sread>:
 8010f64:	b510      	push	{r4, lr}
 8010f66:	460c      	mov	r4, r1
 8010f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f6c:	f000 fa48 	bl	8011400 <_read_r>
 8010f70:	2800      	cmp	r0, #0
 8010f72:	bfab      	itete	ge
 8010f74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f76:	89a3      	ldrhlt	r3, [r4, #12]
 8010f78:	181b      	addge	r3, r3, r0
 8010f7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f7e:	bfac      	ite	ge
 8010f80:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f82:	81a3      	strhlt	r3, [r4, #12]
 8010f84:	bd10      	pop	{r4, pc}

08010f86 <__swrite>:
 8010f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f8a:	461f      	mov	r7, r3
 8010f8c:	898b      	ldrh	r3, [r1, #12]
 8010f8e:	05db      	lsls	r3, r3, #23
 8010f90:	4605      	mov	r5, r0
 8010f92:	460c      	mov	r4, r1
 8010f94:	4616      	mov	r6, r2
 8010f96:	d505      	bpl.n	8010fa4 <__swrite+0x1e>
 8010f98:	2302      	movs	r3, #2
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fa0:	f000 f9b6 	bl	8011310 <_lseek_r>
 8010fa4:	89a3      	ldrh	r3, [r4, #12]
 8010fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010fae:	81a3      	strh	r3, [r4, #12]
 8010fb0:	4632      	mov	r2, r6
 8010fb2:	463b      	mov	r3, r7
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fba:	f000 b869 	b.w	8011090 <_write_r>

08010fbe <__sseek>:
 8010fbe:	b510      	push	{r4, lr}
 8010fc0:	460c      	mov	r4, r1
 8010fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fc6:	f000 f9a3 	bl	8011310 <_lseek_r>
 8010fca:	1c43      	adds	r3, r0, #1
 8010fcc:	89a3      	ldrh	r3, [r4, #12]
 8010fce:	bf15      	itete	ne
 8010fd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010fd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010fd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010fda:	81a3      	strheq	r3, [r4, #12]
 8010fdc:	bf18      	it	ne
 8010fde:	81a3      	strhne	r3, [r4, #12]
 8010fe0:	bd10      	pop	{r4, pc}

08010fe2 <__sclose>:
 8010fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fe6:	f000 b8d3 	b.w	8011190 <_close_r>
	...

08010fec <__swbuf_r>:
 8010fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fee:	460e      	mov	r6, r1
 8010ff0:	4614      	mov	r4, r2
 8010ff2:	4605      	mov	r5, r0
 8010ff4:	b118      	cbz	r0, 8010ffe <__swbuf_r+0x12>
 8010ff6:	6983      	ldr	r3, [r0, #24]
 8010ff8:	b90b      	cbnz	r3, 8010ffe <__swbuf_r+0x12>
 8010ffa:	f7ff fba1 	bl	8010740 <__sinit>
 8010ffe:	4b21      	ldr	r3, [pc, #132]	; (8011084 <__swbuf_r+0x98>)
 8011000:	429c      	cmp	r4, r3
 8011002:	d12a      	bne.n	801105a <__swbuf_r+0x6e>
 8011004:	686c      	ldr	r4, [r5, #4]
 8011006:	69a3      	ldr	r3, [r4, #24]
 8011008:	60a3      	str	r3, [r4, #8]
 801100a:	89a3      	ldrh	r3, [r4, #12]
 801100c:	071a      	lsls	r2, r3, #28
 801100e:	d52e      	bpl.n	801106e <__swbuf_r+0x82>
 8011010:	6923      	ldr	r3, [r4, #16]
 8011012:	b363      	cbz	r3, 801106e <__swbuf_r+0x82>
 8011014:	6923      	ldr	r3, [r4, #16]
 8011016:	6820      	ldr	r0, [r4, #0]
 8011018:	1ac0      	subs	r0, r0, r3
 801101a:	6963      	ldr	r3, [r4, #20]
 801101c:	b2f6      	uxtb	r6, r6
 801101e:	4283      	cmp	r3, r0
 8011020:	4637      	mov	r7, r6
 8011022:	dc04      	bgt.n	801102e <__swbuf_r+0x42>
 8011024:	4621      	mov	r1, r4
 8011026:	4628      	mov	r0, r5
 8011028:	f000 f948 	bl	80112bc <_fflush_r>
 801102c:	bb28      	cbnz	r0, 801107a <__swbuf_r+0x8e>
 801102e:	68a3      	ldr	r3, [r4, #8]
 8011030:	3b01      	subs	r3, #1
 8011032:	60a3      	str	r3, [r4, #8]
 8011034:	6823      	ldr	r3, [r4, #0]
 8011036:	1c5a      	adds	r2, r3, #1
 8011038:	6022      	str	r2, [r4, #0]
 801103a:	701e      	strb	r6, [r3, #0]
 801103c:	6963      	ldr	r3, [r4, #20]
 801103e:	3001      	adds	r0, #1
 8011040:	4283      	cmp	r3, r0
 8011042:	d004      	beq.n	801104e <__swbuf_r+0x62>
 8011044:	89a3      	ldrh	r3, [r4, #12]
 8011046:	07db      	lsls	r3, r3, #31
 8011048:	d519      	bpl.n	801107e <__swbuf_r+0x92>
 801104a:	2e0a      	cmp	r6, #10
 801104c:	d117      	bne.n	801107e <__swbuf_r+0x92>
 801104e:	4621      	mov	r1, r4
 8011050:	4628      	mov	r0, r5
 8011052:	f000 f933 	bl	80112bc <_fflush_r>
 8011056:	b190      	cbz	r0, 801107e <__swbuf_r+0x92>
 8011058:	e00f      	b.n	801107a <__swbuf_r+0x8e>
 801105a:	4b0b      	ldr	r3, [pc, #44]	; (8011088 <__swbuf_r+0x9c>)
 801105c:	429c      	cmp	r4, r3
 801105e:	d101      	bne.n	8011064 <__swbuf_r+0x78>
 8011060:	68ac      	ldr	r4, [r5, #8]
 8011062:	e7d0      	b.n	8011006 <__swbuf_r+0x1a>
 8011064:	4b09      	ldr	r3, [pc, #36]	; (801108c <__swbuf_r+0xa0>)
 8011066:	429c      	cmp	r4, r3
 8011068:	bf08      	it	eq
 801106a:	68ec      	ldreq	r4, [r5, #12]
 801106c:	e7cb      	b.n	8011006 <__swbuf_r+0x1a>
 801106e:	4621      	mov	r1, r4
 8011070:	4628      	mov	r0, r5
 8011072:	f000 f81f 	bl	80110b4 <__swsetup_r>
 8011076:	2800      	cmp	r0, #0
 8011078:	d0cc      	beq.n	8011014 <__swbuf_r+0x28>
 801107a:	f04f 37ff 	mov.w	r7, #4294967295
 801107e:	4638      	mov	r0, r7
 8011080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011082:	bf00      	nop
 8011084:	080143d4 	.word	0x080143d4
 8011088:	080143f4 	.word	0x080143f4
 801108c:	080143b4 	.word	0x080143b4

08011090 <_write_r>:
 8011090:	b538      	push	{r3, r4, r5, lr}
 8011092:	4c07      	ldr	r4, [pc, #28]	; (80110b0 <_write_r+0x20>)
 8011094:	4605      	mov	r5, r0
 8011096:	4608      	mov	r0, r1
 8011098:	4611      	mov	r1, r2
 801109a:	2200      	movs	r2, #0
 801109c:	6022      	str	r2, [r4, #0]
 801109e:	461a      	mov	r2, r3
 80110a0:	f7ef fd77 	bl	8000b92 <_write>
 80110a4:	1c43      	adds	r3, r0, #1
 80110a6:	d102      	bne.n	80110ae <_write_r+0x1e>
 80110a8:	6823      	ldr	r3, [r4, #0]
 80110aa:	b103      	cbz	r3, 80110ae <_write_r+0x1e>
 80110ac:	602b      	str	r3, [r5, #0]
 80110ae:	bd38      	pop	{r3, r4, r5, pc}
 80110b0:	2000716c 	.word	0x2000716c

080110b4 <__swsetup_r>:
 80110b4:	4b32      	ldr	r3, [pc, #200]	; (8011180 <__swsetup_r+0xcc>)
 80110b6:	b570      	push	{r4, r5, r6, lr}
 80110b8:	681d      	ldr	r5, [r3, #0]
 80110ba:	4606      	mov	r6, r0
 80110bc:	460c      	mov	r4, r1
 80110be:	b125      	cbz	r5, 80110ca <__swsetup_r+0x16>
 80110c0:	69ab      	ldr	r3, [r5, #24]
 80110c2:	b913      	cbnz	r3, 80110ca <__swsetup_r+0x16>
 80110c4:	4628      	mov	r0, r5
 80110c6:	f7ff fb3b 	bl	8010740 <__sinit>
 80110ca:	4b2e      	ldr	r3, [pc, #184]	; (8011184 <__swsetup_r+0xd0>)
 80110cc:	429c      	cmp	r4, r3
 80110ce:	d10f      	bne.n	80110f0 <__swsetup_r+0x3c>
 80110d0:	686c      	ldr	r4, [r5, #4]
 80110d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110d6:	b29a      	uxth	r2, r3
 80110d8:	0715      	lsls	r5, r2, #28
 80110da:	d42c      	bmi.n	8011136 <__swsetup_r+0x82>
 80110dc:	06d0      	lsls	r0, r2, #27
 80110de:	d411      	bmi.n	8011104 <__swsetup_r+0x50>
 80110e0:	2209      	movs	r2, #9
 80110e2:	6032      	str	r2, [r6, #0]
 80110e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110e8:	81a3      	strh	r3, [r4, #12]
 80110ea:	f04f 30ff 	mov.w	r0, #4294967295
 80110ee:	e03e      	b.n	801116e <__swsetup_r+0xba>
 80110f0:	4b25      	ldr	r3, [pc, #148]	; (8011188 <__swsetup_r+0xd4>)
 80110f2:	429c      	cmp	r4, r3
 80110f4:	d101      	bne.n	80110fa <__swsetup_r+0x46>
 80110f6:	68ac      	ldr	r4, [r5, #8]
 80110f8:	e7eb      	b.n	80110d2 <__swsetup_r+0x1e>
 80110fa:	4b24      	ldr	r3, [pc, #144]	; (801118c <__swsetup_r+0xd8>)
 80110fc:	429c      	cmp	r4, r3
 80110fe:	bf08      	it	eq
 8011100:	68ec      	ldreq	r4, [r5, #12]
 8011102:	e7e6      	b.n	80110d2 <__swsetup_r+0x1e>
 8011104:	0751      	lsls	r1, r2, #29
 8011106:	d512      	bpl.n	801112e <__swsetup_r+0x7a>
 8011108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801110a:	b141      	cbz	r1, 801111e <__swsetup_r+0x6a>
 801110c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011110:	4299      	cmp	r1, r3
 8011112:	d002      	beq.n	801111a <__swsetup_r+0x66>
 8011114:	4630      	mov	r0, r6
 8011116:	f7ff fba5 	bl	8010864 <_free_r>
 801111a:	2300      	movs	r3, #0
 801111c:	6363      	str	r3, [r4, #52]	; 0x34
 801111e:	89a3      	ldrh	r3, [r4, #12]
 8011120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011124:	81a3      	strh	r3, [r4, #12]
 8011126:	2300      	movs	r3, #0
 8011128:	6063      	str	r3, [r4, #4]
 801112a:	6923      	ldr	r3, [r4, #16]
 801112c:	6023      	str	r3, [r4, #0]
 801112e:	89a3      	ldrh	r3, [r4, #12]
 8011130:	f043 0308 	orr.w	r3, r3, #8
 8011134:	81a3      	strh	r3, [r4, #12]
 8011136:	6923      	ldr	r3, [r4, #16]
 8011138:	b94b      	cbnz	r3, 801114e <__swsetup_r+0x9a>
 801113a:	89a3      	ldrh	r3, [r4, #12]
 801113c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011144:	d003      	beq.n	801114e <__swsetup_r+0x9a>
 8011146:	4621      	mov	r1, r4
 8011148:	4630      	mov	r0, r6
 801114a:	f000 f917 	bl	801137c <__smakebuf_r>
 801114e:	89a2      	ldrh	r2, [r4, #12]
 8011150:	f012 0301 	ands.w	r3, r2, #1
 8011154:	d00c      	beq.n	8011170 <__swsetup_r+0xbc>
 8011156:	2300      	movs	r3, #0
 8011158:	60a3      	str	r3, [r4, #8]
 801115a:	6963      	ldr	r3, [r4, #20]
 801115c:	425b      	negs	r3, r3
 801115e:	61a3      	str	r3, [r4, #24]
 8011160:	6923      	ldr	r3, [r4, #16]
 8011162:	b953      	cbnz	r3, 801117a <__swsetup_r+0xc6>
 8011164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011168:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801116c:	d1ba      	bne.n	80110e4 <__swsetup_r+0x30>
 801116e:	bd70      	pop	{r4, r5, r6, pc}
 8011170:	0792      	lsls	r2, r2, #30
 8011172:	bf58      	it	pl
 8011174:	6963      	ldrpl	r3, [r4, #20]
 8011176:	60a3      	str	r3, [r4, #8]
 8011178:	e7f2      	b.n	8011160 <__swsetup_r+0xac>
 801117a:	2000      	movs	r0, #0
 801117c:	e7f7      	b.n	801116e <__swsetup_r+0xba>
 801117e:	bf00      	nop
 8011180:	20000014 	.word	0x20000014
 8011184:	080143d4 	.word	0x080143d4
 8011188:	080143f4 	.word	0x080143f4
 801118c:	080143b4 	.word	0x080143b4

08011190 <_close_r>:
 8011190:	b538      	push	{r3, r4, r5, lr}
 8011192:	4c06      	ldr	r4, [pc, #24]	; (80111ac <_close_r+0x1c>)
 8011194:	2300      	movs	r3, #0
 8011196:	4605      	mov	r5, r0
 8011198:	4608      	mov	r0, r1
 801119a:	6023      	str	r3, [r4, #0]
 801119c:	f7ef fd15 	bl	8000bca <_close>
 80111a0:	1c43      	adds	r3, r0, #1
 80111a2:	d102      	bne.n	80111aa <_close_r+0x1a>
 80111a4:	6823      	ldr	r3, [r4, #0]
 80111a6:	b103      	cbz	r3, 80111aa <_close_r+0x1a>
 80111a8:	602b      	str	r3, [r5, #0]
 80111aa:	bd38      	pop	{r3, r4, r5, pc}
 80111ac:	2000716c 	.word	0x2000716c

080111b0 <__sflush_r>:
 80111b0:	898a      	ldrh	r2, [r1, #12]
 80111b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111b6:	4605      	mov	r5, r0
 80111b8:	0710      	lsls	r0, r2, #28
 80111ba:	460c      	mov	r4, r1
 80111bc:	d458      	bmi.n	8011270 <__sflush_r+0xc0>
 80111be:	684b      	ldr	r3, [r1, #4]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	dc05      	bgt.n	80111d0 <__sflush_r+0x20>
 80111c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	dc02      	bgt.n	80111d0 <__sflush_r+0x20>
 80111ca:	2000      	movs	r0, #0
 80111cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111d2:	2e00      	cmp	r6, #0
 80111d4:	d0f9      	beq.n	80111ca <__sflush_r+0x1a>
 80111d6:	2300      	movs	r3, #0
 80111d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80111dc:	682f      	ldr	r7, [r5, #0]
 80111de:	6a21      	ldr	r1, [r4, #32]
 80111e0:	602b      	str	r3, [r5, #0]
 80111e2:	d032      	beq.n	801124a <__sflush_r+0x9a>
 80111e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80111e6:	89a3      	ldrh	r3, [r4, #12]
 80111e8:	075a      	lsls	r2, r3, #29
 80111ea:	d505      	bpl.n	80111f8 <__sflush_r+0x48>
 80111ec:	6863      	ldr	r3, [r4, #4]
 80111ee:	1ac0      	subs	r0, r0, r3
 80111f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80111f2:	b10b      	cbz	r3, 80111f8 <__sflush_r+0x48>
 80111f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111f6:	1ac0      	subs	r0, r0, r3
 80111f8:	2300      	movs	r3, #0
 80111fa:	4602      	mov	r2, r0
 80111fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111fe:	6a21      	ldr	r1, [r4, #32]
 8011200:	4628      	mov	r0, r5
 8011202:	47b0      	blx	r6
 8011204:	1c43      	adds	r3, r0, #1
 8011206:	89a3      	ldrh	r3, [r4, #12]
 8011208:	d106      	bne.n	8011218 <__sflush_r+0x68>
 801120a:	6829      	ldr	r1, [r5, #0]
 801120c:	291d      	cmp	r1, #29
 801120e:	d848      	bhi.n	80112a2 <__sflush_r+0xf2>
 8011210:	4a29      	ldr	r2, [pc, #164]	; (80112b8 <__sflush_r+0x108>)
 8011212:	40ca      	lsrs	r2, r1
 8011214:	07d6      	lsls	r6, r2, #31
 8011216:	d544      	bpl.n	80112a2 <__sflush_r+0xf2>
 8011218:	2200      	movs	r2, #0
 801121a:	6062      	str	r2, [r4, #4]
 801121c:	04d9      	lsls	r1, r3, #19
 801121e:	6922      	ldr	r2, [r4, #16]
 8011220:	6022      	str	r2, [r4, #0]
 8011222:	d504      	bpl.n	801122e <__sflush_r+0x7e>
 8011224:	1c42      	adds	r2, r0, #1
 8011226:	d101      	bne.n	801122c <__sflush_r+0x7c>
 8011228:	682b      	ldr	r3, [r5, #0]
 801122a:	b903      	cbnz	r3, 801122e <__sflush_r+0x7e>
 801122c:	6560      	str	r0, [r4, #84]	; 0x54
 801122e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011230:	602f      	str	r7, [r5, #0]
 8011232:	2900      	cmp	r1, #0
 8011234:	d0c9      	beq.n	80111ca <__sflush_r+0x1a>
 8011236:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801123a:	4299      	cmp	r1, r3
 801123c:	d002      	beq.n	8011244 <__sflush_r+0x94>
 801123e:	4628      	mov	r0, r5
 8011240:	f7ff fb10 	bl	8010864 <_free_r>
 8011244:	2000      	movs	r0, #0
 8011246:	6360      	str	r0, [r4, #52]	; 0x34
 8011248:	e7c0      	b.n	80111cc <__sflush_r+0x1c>
 801124a:	2301      	movs	r3, #1
 801124c:	4628      	mov	r0, r5
 801124e:	47b0      	blx	r6
 8011250:	1c41      	adds	r1, r0, #1
 8011252:	d1c8      	bne.n	80111e6 <__sflush_r+0x36>
 8011254:	682b      	ldr	r3, [r5, #0]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d0c5      	beq.n	80111e6 <__sflush_r+0x36>
 801125a:	2b1d      	cmp	r3, #29
 801125c:	d001      	beq.n	8011262 <__sflush_r+0xb2>
 801125e:	2b16      	cmp	r3, #22
 8011260:	d101      	bne.n	8011266 <__sflush_r+0xb6>
 8011262:	602f      	str	r7, [r5, #0]
 8011264:	e7b1      	b.n	80111ca <__sflush_r+0x1a>
 8011266:	89a3      	ldrh	r3, [r4, #12]
 8011268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801126c:	81a3      	strh	r3, [r4, #12]
 801126e:	e7ad      	b.n	80111cc <__sflush_r+0x1c>
 8011270:	690f      	ldr	r7, [r1, #16]
 8011272:	2f00      	cmp	r7, #0
 8011274:	d0a9      	beq.n	80111ca <__sflush_r+0x1a>
 8011276:	0793      	lsls	r3, r2, #30
 8011278:	680e      	ldr	r6, [r1, #0]
 801127a:	bf08      	it	eq
 801127c:	694b      	ldreq	r3, [r1, #20]
 801127e:	600f      	str	r7, [r1, #0]
 8011280:	bf18      	it	ne
 8011282:	2300      	movne	r3, #0
 8011284:	eba6 0807 	sub.w	r8, r6, r7
 8011288:	608b      	str	r3, [r1, #8]
 801128a:	f1b8 0f00 	cmp.w	r8, #0
 801128e:	dd9c      	ble.n	80111ca <__sflush_r+0x1a>
 8011290:	4643      	mov	r3, r8
 8011292:	463a      	mov	r2, r7
 8011294:	6a21      	ldr	r1, [r4, #32]
 8011296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011298:	4628      	mov	r0, r5
 801129a:	47b0      	blx	r6
 801129c:	2800      	cmp	r0, #0
 801129e:	dc06      	bgt.n	80112ae <__sflush_r+0xfe>
 80112a0:	89a3      	ldrh	r3, [r4, #12]
 80112a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112a6:	81a3      	strh	r3, [r4, #12]
 80112a8:	f04f 30ff 	mov.w	r0, #4294967295
 80112ac:	e78e      	b.n	80111cc <__sflush_r+0x1c>
 80112ae:	4407      	add	r7, r0
 80112b0:	eba8 0800 	sub.w	r8, r8, r0
 80112b4:	e7e9      	b.n	801128a <__sflush_r+0xda>
 80112b6:	bf00      	nop
 80112b8:	20400001 	.word	0x20400001

080112bc <_fflush_r>:
 80112bc:	b538      	push	{r3, r4, r5, lr}
 80112be:	690b      	ldr	r3, [r1, #16]
 80112c0:	4605      	mov	r5, r0
 80112c2:	460c      	mov	r4, r1
 80112c4:	b1db      	cbz	r3, 80112fe <_fflush_r+0x42>
 80112c6:	b118      	cbz	r0, 80112d0 <_fflush_r+0x14>
 80112c8:	6983      	ldr	r3, [r0, #24]
 80112ca:	b90b      	cbnz	r3, 80112d0 <_fflush_r+0x14>
 80112cc:	f7ff fa38 	bl	8010740 <__sinit>
 80112d0:	4b0c      	ldr	r3, [pc, #48]	; (8011304 <_fflush_r+0x48>)
 80112d2:	429c      	cmp	r4, r3
 80112d4:	d109      	bne.n	80112ea <_fflush_r+0x2e>
 80112d6:	686c      	ldr	r4, [r5, #4]
 80112d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112dc:	b17b      	cbz	r3, 80112fe <_fflush_r+0x42>
 80112de:	4621      	mov	r1, r4
 80112e0:	4628      	mov	r0, r5
 80112e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112e6:	f7ff bf63 	b.w	80111b0 <__sflush_r>
 80112ea:	4b07      	ldr	r3, [pc, #28]	; (8011308 <_fflush_r+0x4c>)
 80112ec:	429c      	cmp	r4, r3
 80112ee:	d101      	bne.n	80112f4 <_fflush_r+0x38>
 80112f0:	68ac      	ldr	r4, [r5, #8]
 80112f2:	e7f1      	b.n	80112d8 <_fflush_r+0x1c>
 80112f4:	4b05      	ldr	r3, [pc, #20]	; (801130c <_fflush_r+0x50>)
 80112f6:	429c      	cmp	r4, r3
 80112f8:	bf08      	it	eq
 80112fa:	68ec      	ldreq	r4, [r5, #12]
 80112fc:	e7ec      	b.n	80112d8 <_fflush_r+0x1c>
 80112fe:	2000      	movs	r0, #0
 8011300:	bd38      	pop	{r3, r4, r5, pc}
 8011302:	bf00      	nop
 8011304:	080143d4 	.word	0x080143d4
 8011308:	080143f4 	.word	0x080143f4
 801130c:	080143b4 	.word	0x080143b4

08011310 <_lseek_r>:
 8011310:	b538      	push	{r3, r4, r5, lr}
 8011312:	4c07      	ldr	r4, [pc, #28]	; (8011330 <_lseek_r+0x20>)
 8011314:	4605      	mov	r5, r0
 8011316:	4608      	mov	r0, r1
 8011318:	4611      	mov	r1, r2
 801131a:	2200      	movs	r2, #0
 801131c:	6022      	str	r2, [r4, #0]
 801131e:	461a      	mov	r2, r3
 8011320:	f7ef fc7a 	bl	8000c18 <_lseek>
 8011324:	1c43      	adds	r3, r0, #1
 8011326:	d102      	bne.n	801132e <_lseek_r+0x1e>
 8011328:	6823      	ldr	r3, [r4, #0]
 801132a:	b103      	cbz	r3, 801132e <_lseek_r+0x1e>
 801132c:	602b      	str	r3, [r5, #0]
 801132e:	bd38      	pop	{r3, r4, r5, pc}
 8011330:	2000716c 	.word	0x2000716c

08011334 <__swhatbuf_r>:
 8011334:	b570      	push	{r4, r5, r6, lr}
 8011336:	460e      	mov	r6, r1
 8011338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801133c:	2900      	cmp	r1, #0
 801133e:	b096      	sub	sp, #88	; 0x58
 8011340:	4614      	mov	r4, r2
 8011342:	461d      	mov	r5, r3
 8011344:	da07      	bge.n	8011356 <__swhatbuf_r+0x22>
 8011346:	2300      	movs	r3, #0
 8011348:	602b      	str	r3, [r5, #0]
 801134a:	89b3      	ldrh	r3, [r6, #12]
 801134c:	061a      	lsls	r2, r3, #24
 801134e:	d410      	bmi.n	8011372 <__swhatbuf_r+0x3e>
 8011350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011354:	e00e      	b.n	8011374 <__swhatbuf_r+0x40>
 8011356:	466a      	mov	r2, sp
 8011358:	f000 f864 	bl	8011424 <_fstat_r>
 801135c:	2800      	cmp	r0, #0
 801135e:	dbf2      	blt.n	8011346 <__swhatbuf_r+0x12>
 8011360:	9a01      	ldr	r2, [sp, #4]
 8011362:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011366:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801136a:	425a      	negs	r2, r3
 801136c:	415a      	adcs	r2, r3
 801136e:	602a      	str	r2, [r5, #0]
 8011370:	e7ee      	b.n	8011350 <__swhatbuf_r+0x1c>
 8011372:	2340      	movs	r3, #64	; 0x40
 8011374:	2000      	movs	r0, #0
 8011376:	6023      	str	r3, [r4, #0]
 8011378:	b016      	add	sp, #88	; 0x58
 801137a:	bd70      	pop	{r4, r5, r6, pc}

0801137c <__smakebuf_r>:
 801137c:	898b      	ldrh	r3, [r1, #12]
 801137e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011380:	079d      	lsls	r5, r3, #30
 8011382:	4606      	mov	r6, r0
 8011384:	460c      	mov	r4, r1
 8011386:	d507      	bpl.n	8011398 <__smakebuf_r+0x1c>
 8011388:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801138c:	6023      	str	r3, [r4, #0]
 801138e:	6123      	str	r3, [r4, #16]
 8011390:	2301      	movs	r3, #1
 8011392:	6163      	str	r3, [r4, #20]
 8011394:	b002      	add	sp, #8
 8011396:	bd70      	pop	{r4, r5, r6, pc}
 8011398:	ab01      	add	r3, sp, #4
 801139a:	466a      	mov	r2, sp
 801139c:	f7ff ffca 	bl	8011334 <__swhatbuf_r>
 80113a0:	9900      	ldr	r1, [sp, #0]
 80113a2:	4605      	mov	r5, r0
 80113a4:	4630      	mov	r0, r6
 80113a6:	f7ff faab 	bl	8010900 <_malloc_r>
 80113aa:	b948      	cbnz	r0, 80113c0 <__smakebuf_r+0x44>
 80113ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113b0:	059a      	lsls	r2, r3, #22
 80113b2:	d4ef      	bmi.n	8011394 <__smakebuf_r+0x18>
 80113b4:	f023 0303 	bic.w	r3, r3, #3
 80113b8:	f043 0302 	orr.w	r3, r3, #2
 80113bc:	81a3      	strh	r3, [r4, #12]
 80113be:	e7e3      	b.n	8011388 <__smakebuf_r+0xc>
 80113c0:	4b0d      	ldr	r3, [pc, #52]	; (80113f8 <__smakebuf_r+0x7c>)
 80113c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80113c4:	89a3      	ldrh	r3, [r4, #12]
 80113c6:	6020      	str	r0, [r4, #0]
 80113c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113cc:	81a3      	strh	r3, [r4, #12]
 80113ce:	9b00      	ldr	r3, [sp, #0]
 80113d0:	6163      	str	r3, [r4, #20]
 80113d2:	9b01      	ldr	r3, [sp, #4]
 80113d4:	6120      	str	r0, [r4, #16]
 80113d6:	b15b      	cbz	r3, 80113f0 <__smakebuf_r+0x74>
 80113d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113dc:	4630      	mov	r0, r6
 80113de:	f000 f833 	bl	8011448 <_isatty_r>
 80113e2:	b128      	cbz	r0, 80113f0 <__smakebuf_r+0x74>
 80113e4:	89a3      	ldrh	r3, [r4, #12]
 80113e6:	f023 0303 	bic.w	r3, r3, #3
 80113ea:	f043 0301 	orr.w	r3, r3, #1
 80113ee:	81a3      	strh	r3, [r4, #12]
 80113f0:	89a3      	ldrh	r3, [r4, #12]
 80113f2:	431d      	orrs	r5, r3
 80113f4:	81a5      	strh	r5, [r4, #12]
 80113f6:	e7cd      	b.n	8011394 <__smakebuf_r+0x18>
 80113f8:	08010709 	.word	0x08010709

080113fc <__malloc_lock>:
 80113fc:	4770      	bx	lr

080113fe <__malloc_unlock>:
 80113fe:	4770      	bx	lr

08011400 <_read_r>:
 8011400:	b538      	push	{r3, r4, r5, lr}
 8011402:	4c07      	ldr	r4, [pc, #28]	; (8011420 <_read_r+0x20>)
 8011404:	4605      	mov	r5, r0
 8011406:	4608      	mov	r0, r1
 8011408:	4611      	mov	r1, r2
 801140a:	2200      	movs	r2, #0
 801140c:	6022      	str	r2, [r4, #0]
 801140e:	461a      	mov	r2, r3
 8011410:	f7ef fba2 	bl	8000b58 <_read>
 8011414:	1c43      	adds	r3, r0, #1
 8011416:	d102      	bne.n	801141e <_read_r+0x1e>
 8011418:	6823      	ldr	r3, [r4, #0]
 801141a:	b103      	cbz	r3, 801141e <_read_r+0x1e>
 801141c:	602b      	str	r3, [r5, #0]
 801141e:	bd38      	pop	{r3, r4, r5, pc}
 8011420:	2000716c 	.word	0x2000716c

08011424 <_fstat_r>:
 8011424:	b538      	push	{r3, r4, r5, lr}
 8011426:	4c07      	ldr	r4, [pc, #28]	; (8011444 <_fstat_r+0x20>)
 8011428:	2300      	movs	r3, #0
 801142a:	4605      	mov	r5, r0
 801142c:	4608      	mov	r0, r1
 801142e:	4611      	mov	r1, r2
 8011430:	6023      	str	r3, [r4, #0]
 8011432:	f7ef fbd6 	bl	8000be2 <_fstat>
 8011436:	1c43      	adds	r3, r0, #1
 8011438:	d102      	bne.n	8011440 <_fstat_r+0x1c>
 801143a:	6823      	ldr	r3, [r4, #0]
 801143c:	b103      	cbz	r3, 8011440 <_fstat_r+0x1c>
 801143e:	602b      	str	r3, [r5, #0]
 8011440:	bd38      	pop	{r3, r4, r5, pc}
 8011442:	bf00      	nop
 8011444:	2000716c 	.word	0x2000716c

08011448 <_isatty_r>:
 8011448:	b538      	push	{r3, r4, r5, lr}
 801144a:	4c06      	ldr	r4, [pc, #24]	; (8011464 <_isatty_r+0x1c>)
 801144c:	2300      	movs	r3, #0
 801144e:	4605      	mov	r5, r0
 8011450:	4608      	mov	r0, r1
 8011452:	6023      	str	r3, [r4, #0]
 8011454:	f7ef fbd5 	bl	8000c02 <_isatty>
 8011458:	1c43      	adds	r3, r0, #1
 801145a:	d102      	bne.n	8011462 <_isatty_r+0x1a>
 801145c:	6823      	ldr	r3, [r4, #0]
 801145e:	b103      	cbz	r3, 8011462 <_isatty_r+0x1a>
 8011460:	602b      	str	r3, [r5, #0]
 8011462:	bd38      	pop	{r3, r4, r5, pc}
 8011464:	2000716c 	.word	0x2000716c

08011468 <_init>:
 8011468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801146a:	bf00      	nop
 801146c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801146e:	bc08      	pop	{r3}
 8011470:	469e      	mov	lr, r3
 8011472:	4770      	bx	lr

08011474 <_fini>:
 8011474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011476:	bf00      	nop
 8011478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801147a:	bc08      	pop	{r3}
 801147c:	469e      	mov	lr, r3
 801147e:	4770      	bx	lr
